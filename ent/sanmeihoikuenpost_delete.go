// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/predicate"
	"github.com/a10adotapp/a10a.app/ent/sanmeihoikuenpost"
)

// SanmeiHoikuenPostDelete is the builder for deleting a SanmeiHoikuenPost entity.
type SanmeiHoikuenPostDelete struct {
	config
	hooks    []Hook
	mutation *SanmeiHoikuenPostMutation
}

// Where appends a list predicates to the SanmeiHoikuenPostDelete builder.
func (shpd *SanmeiHoikuenPostDelete) Where(ps ...predicate.SanmeiHoikuenPost) *SanmeiHoikuenPostDelete {
	shpd.mutation.Where(ps...)
	return shpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (shpd *SanmeiHoikuenPostDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, shpd.sqlExec, shpd.mutation, shpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (shpd *SanmeiHoikuenPostDelete) ExecX(ctx context.Context) int {
	n, err := shpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (shpd *SanmeiHoikuenPostDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sanmeihoikuenpost.Table, sqlgraph.NewFieldSpec(sanmeihoikuenpost.FieldID, field.TypeUint32))
	if ps := shpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, shpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	shpd.mutation.done = true
	return affected, err
}

// SanmeiHoikuenPostDeleteOne is the builder for deleting a single SanmeiHoikuenPost entity.
type SanmeiHoikuenPostDeleteOne struct {
	shpd *SanmeiHoikuenPostDelete
}

// Where appends a list predicates to the SanmeiHoikuenPostDelete builder.
func (shpdo *SanmeiHoikuenPostDeleteOne) Where(ps ...predicate.SanmeiHoikuenPost) *SanmeiHoikuenPostDeleteOne {
	shpdo.shpd.mutation.Where(ps...)
	return shpdo
}

// Exec executes the deletion query.
func (shpdo *SanmeiHoikuenPostDeleteOne) Exec(ctx context.Context) error {
	n, err := shpdo.shpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sanmeihoikuenpost.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (shpdo *SanmeiHoikuenPostDeleteOne) ExecX(ctx context.Context) {
	if err := shpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
