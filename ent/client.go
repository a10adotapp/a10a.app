// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/a10adotapp/a10a.app/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a10adotapp/a10a.app/ent/changokushiweapon"
	"github.com/a10adotapp/a10a.app/ent/changokushiweaponchangelog"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ChangokushiWeapon is the client for interacting with the ChangokushiWeapon builders.
	ChangokushiWeapon *ChangokushiWeaponClient
	// ChangokushiWeaponChangeLog is the client for interacting with the ChangokushiWeaponChangeLog builders.
	ChangokushiWeaponChangeLog *ChangokushiWeaponChangeLogClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ChangokushiWeapon = NewChangokushiWeaponClient(c.config)
	c.ChangokushiWeaponChangeLog = NewChangokushiWeaponChangeLogClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		ChangokushiWeapon:          NewChangokushiWeaponClient(cfg),
		ChangokushiWeaponChangeLog: NewChangokushiWeaponChangeLogClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		ChangokushiWeapon:          NewChangokushiWeaponClient(cfg),
		ChangokushiWeaponChangeLog: NewChangokushiWeaponChangeLogClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ChangokushiWeapon.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ChangokushiWeapon.Use(hooks...)
	c.ChangokushiWeaponChangeLog.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ChangokushiWeapon.Intercept(interceptors...)
	c.ChangokushiWeaponChangeLog.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChangokushiWeaponMutation:
		return c.ChangokushiWeapon.mutate(ctx, m)
	case *ChangokushiWeaponChangeLogMutation:
		return c.ChangokushiWeaponChangeLog.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChangokushiWeaponClient is a client for the ChangokushiWeapon schema.
type ChangokushiWeaponClient struct {
	config
}

// NewChangokushiWeaponClient returns a client for the ChangokushiWeapon from the given config.
func NewChangokushiWeaponClient(c config) *ChangokushiWeaponClient {
	return &ChangokushiWeaponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `changokushiweapon.Hooks(f(g(h())))`.
func (c *ChangokushiWeaponClient) Use(hooks ...Hook) {
	c.hooks.ChangokushiWeapon = append(c.hooks.ChangokushiWeapon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `changokushiweapon.Intercept(f(g(h())))`.
func (c *ChangokushiWeaponClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChangokushiWeapon = append(c.inters.ChangokushiWeapon, interceptors...)
}

// Create returns a builder for creating a ChangokushiWeapon entity.
func (c *ChangokushiWeaponClient) Create() *ChangokushiWeaponCreate {
	mutation := newChangokushiWeaponMutation(c.config, OpCreate)
	return &ChangokushiWeaponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChangokushiWeapon entities.
func (c *ChangokushiWeaponClient) CreateBulk(builders ...*ChangokushiWeaponCreate) *ChangokushiWeaponCreateBulk {
	return &ChangokushiWeaponCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChangokushiWeaponClient) MapCreateBulk(slice any, setFunc func(*ChangokushiWeaponCreate, int)) *ChangokushiWeaponCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChangokushiWeaponCreateBulk{err: fmt.Errorf("calling to ChangokushiWeaponClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChangokushiWeaponCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChangokushiWeaponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChangokushiWeapon.
func (c *ChangokushiWeaponClient) Update() *ChangokushiWeaponUpdate {
	mutation := newChangokushiWeaponMutation(c.config, OpUpdate)
	return &ChangokushiWeaponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChangokushiWeaponClient) UpdateOne(cw *ChangokushiWeapon) *ChangokushiWeaponUpdateOne {
	mutation := newChangokushiWeaponMutation(c.config, OpUpdateOne, withChangokushiWeapon(cw))
	return &ChangokushiWeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChangokushiWeaponClient) UpdateOneID(id uint32) *ChangokushiWeaponUpdateOne {
	mutation := newChangokushiWeaponMutation(c.config, OpUpdateOne, withChangokushiWeaponID(id))
	return &ChangokushiWeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChangokushiWeapon.
func (c *ChangokushiWeaponClient) Delete() *ChangokushiWeaponDelete {
	mutation := newChangokushiWeaponMutation(c.config, OpDelete)
	return &ChangokushiWeaponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChangokushiWeaponClient) DeleteOne(cw *ChangokushiWeapon) *ChangokushiWeaponDeleteOne {
	return c.DeleteOneID(cw.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChangokushiWeaponClient) DeleteOneID(id uint32) *ChangokushiWeaponDeleteOne {
	builder := c.Delete().Where(changokushiweapon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChangokushiWeaponDeleteOne{builder}
}

// Query returns a query builder for ChangokushiWeapon.
func (c *ChangokushiWeaponClient) Query() *ChangokushiWeaponQuery {
	return &ChangokushiWeaponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChangokushiWeapon},
		inters: c.Interceptors(),
	}
}

// Get returns a ChangokushiWeapon entity by its id.
func (c *ChangokushiWeaponClient) Get(ctx context.Context, id uint32) (*ChangokushiWeapon, error) {
	return c.Query().Where(changokushiweapon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChangokushiWeaponClient) GetX(ctx context.Context, id uint32) *ChangokushiWeapon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChangeLogs queries the change_logs edge of a ChangokushiWeapon.
func (c *ChangokushiWeaponClient) QueryChangeLogs(cw *ChangokushiWeapon) *ChangokushiWeaponChangeLogQuery {
	query := (&ChangokushiWeaponChangeLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(changokushiweapon.Table, changokushiweapon.FieldID, id),
			sqlgraph.To(changokushiweaponchangelog.Table, changokushiweaponchangelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changokushiweapon.ChangeLogsTable, changokushiweapon.ChangeLogsColumn),
		)
		fromV = sqlgraph.Neighbors(cw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChangokushiWeaponClient) Hooks() []Hook {
	hooks := c.hooks.ChangokushiWeapon
	return append(hooks[:len(hooks):len(hooks)], changokushiweapon.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ChangokushiWeaponClient) Interceptors() []Interceptor {
	inters := c.inters.ChangokushiWeapon
	return append(inters[:len(inters):len(inters)], changokushiweapon.Interceptors[:]...)
}

func (c *ChangokushiWeaponClient) mutate(ctx context.Context, m *ChangokushiWeaponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChangokushiWeaponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChangokushiWeaponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChangokushiWeaponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChangokushiWeaponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChangokushiWeapon mutation op: %q", m.Op())
	}
}

// ChangokushiWeaponChangeLogClient is a client for the ChangokushiWeaponChangeLog schema.
type ChangokushiWeaponChangeLogClient struct {
	config
}

// NewChangokushiWeaponChangeLogClient returns a client for the ChangokushiWeaponChangeLog from the given config.
func NewChangokushiWeaponChangeLogClient(c config) *ChangokushiWeaponChangeLogClient {
	return &ChangokushiWeaponChangeLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `changokushiweaponchangelog.Hooks(f(g(h())))`.
func (c *ChangokushiWeaponChangeLogClient) Use(hooks ...Hook) {
	c.hooks.ChangokushiWeaponChangeLog = append(c.hooks.ChangokushiWeaponChangeLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `changokushiweaponchangelog.Intercept(f(g(h())))`.
func (c *ChangokushiWeaponChangeLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChangokushiWeaponChangeLog = append(c.inters.ChangokushiWeaponChangeLog, interceptors...)
}

// Create returns a builder for creating a ChangokushiWeaponChangeLog entity.
func (c *ChangokushiWeaponChangeLogClient) Create() *ChangokushiWeaponChangeLogCreate {
	mutation := newChangokushiWeaponChangeLogMutation(c.config, OpCreate)
	return &ChangokushiWeaponChangeLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChangokushiWeaponChangeLog entities.
func (c *ChangokushiWeaponChangeLogClient) CreateBulk(builders ...*ChangokushiWeaponChangeLogCreate) *ChangokushiWeaponChangeLogCreateBulk {
	return &ChangokushiWeaponChangeLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChangokushiWeaponChangeLogClient) MapCreateBulk(slice any, setFunc func(*ChangokushiWeaponChangeLogCreate, int)) *ChangokushiWeaponChangeLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChangokushiWeaponChangeLogCreateBulk{err: fmt.Errorf("calling to ChangokushiWeaponChangeLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChangokushiWeaponChangeLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChangokushiWeaponChangeLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChangokushiWeaponChangeLog.
func (c *ChangokushiWeaponChangeLogClient) Update() *ChangokushiWeaponChangeLogUpdate {
	mutation := newChangokushiWeaponChangeLogMutation(c.config, OpUpdate)
	return &ChangokushiWeaponChangeLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChangokushiWeaponChangeLogClient) UpdateOne(cwcl *ChangokushiWeaponChangeLog) *ChangokushiWeaponChangeLogUpdateOne {
	mutation := newChangokushiWeaponChangeLogMutation(c.config, OpUpdateOne, withChangokushiWeaponChangeLog(cwcl))
	return &ChangokushiWeaponChangeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChangokushiWeaponChangeLogClient) UpdateOneID(id uint32) *ChangokushiWeaponChangeLogUpdateOne {
	mutation := newChangokushiWeaponChangeLogMutation(c.config, OpUpdateOne, withChangokushiWeaponChangeLogID(id))
	return &ChangokushiWeaponChangeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChangokushiWeaponChangeLog.
func (c *ChangokushiWeaponChangeLogClient) Delete() *ChangokushiWeaponChangeLogDelete {
	mutation := newChangokushiWeaponChangeLogMutation(c.config, OpDelete)
	return &ChangokushiWeaponChangeLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChangokushiWeaponChangeLogClient) DeleteOne(cwcl *ChangokushiWeaponChangeLog) *ChangokushiWeaponChangeLogDeleteOne {
	return c.DeleteOneID(cwcl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChangokushiWeaponChangeLogClient) DeleteOneID(id uint32) *ChangokushiWeaponChangeLogDeleteOne {
	builder := c.Delete().Where(changokushiweaponchangelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChangokushiWeaponChangeLogDeleteOne{builder}
}

// Query returns a query builder for ChangokushiWeaponChangeLog.
func (c *ChangokushiWeaponChangeLogClient) Query() *ChangokushiWeaponChangeLogQuery {
	return &ChangokushiWeaponChangeLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChangokushiWeaponChangeLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ChangokushiWeaponChangeLog entity by its id.
func (c *ChangokushiWeaponChangeLogClient) Get(ctx context.Context, id uint32) (*ChangokushiWeaponChangeLog, error) {
	return c.Query().Where(changokushiweaponchangelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChangokushiWeaponChangeLogClient) GetX(ctx context.Context, id uint32) *ChangokushiWeaponChangeLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChangokushiWeapon queries the changokushi_weapon edge of a ChangokushiWeaponChangeLog.
func (c *ChangokushiWeaponChangeLogClient) QueryChangokushiWeapon(cwcl *ChangokushiWeaponChangeLog) *ChangokushiWeaponQuery {
	query := (&ChangokushiWeaponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cwcl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(changokushiweaponchangelog.Table, changokushiweaponchangelog.FieldID, id),
			sqlgraph.To(changokushiweapon.Table, changokushiweapon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, changokushiweaponchangelog.ChangokushiWeaponTable, changokushiweaponchangelog.ChangokushiWeaponColumn),
		)
		fromV = sqlgraph.Neighbors(cwcl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChangokushiWeaponChangeLogClient) Hooks() []Hook {
	hooks := c.hooks.ChangokushiWeaponChangeLog
	return append(hooks[:len(hooks):len(hooks)], changokushiweaponchangelog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ChangokushiWeaponChangeLogClient) Interceptors() []Interceptor {
	inters := c.inters.ChangokushiWeaponChangeLog
	return append(inters[:len(inters):len(inters)], changokushiweaponchangelog.Interceptors[:]...)
}

func (c *ChangokushiWeaponChangeLogClient) mutate(ctx context.Context, m *ChangokushiWeaponChangeLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChangokushiWeaponChangeLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChangokushiWeaponChangeLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChangokushiWeaponChangeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChangokushiWeaponChangeLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChangokushiWeaponChangeLog mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ChangokushiWeapon, ChangokushiWeaponChangeLog []ent.Hook
	}
	inters struct {
		ChangokushiWeapon, ChangokushiWeaponChangeLog []ent.Interceptor
	}
)
