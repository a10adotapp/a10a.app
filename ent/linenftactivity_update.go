// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/linenft"
	"github.com/a10adotapp/a10a.app/ent/linenftactivity"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// LINENFTActivityUpdate is the builder for updating LINENFTActivity entities.
type LINENFTActivityUpdate struct {
	config
	hooks    []Hook
	mutation *LINENFTActivityMutation
}

// Where appends a list predicates to the LINENFTActivityUpdate builder.
func (lau *LINENFTActivityUpdate) Where(ps ...predicate.LINENFTActivity) *LINENFTActivityUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetUpdatedAt sets the "updated_at" field.
func (lau *LINENFTActivityUpdate) SetUpdatedAt(t time.Time) *LINENFTActivityUpdate {
	lau.mutation.SetUpdatedAt(t)
	return lau
}

// SetDeletedAt sets the "deleted_at" field.
func (lau *LINENFTActivityUpdate) SetDeletedAt(t time.Time) *LINENFTActivityUpdate {
	lau.mutation.SetDeletedAt(t)
	return lau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lau *LINENFTActivityUpdate) SetNillableDeletedAt(t *time.Time) *LINENFTActivityUpdate {
	if t != nil {
		lau.SetDeletedAt(*t)
	}
	return lau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (lau *LINENFTActivityUpdate) ClearDeletedAt() *LINENFTActivityUpdate {
	lau.mutation.ClearDeletedAt()
	return lau
}

// SetActivityType sets the "activity_type" field.
func (lau *LINENFTActivityUpdate) SetActivityType(s string) *LINENFTActivityUpdate {
	lau.mutation.SetActivityType(s)
	return lau
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (lau *LINENFTActivityUpdate) SetNillableActivityType(s *string) *LINENFTActivityUpdate {
	if s != nil {
		lau.SetActivityType(*s)
	}
	return lau
}

// SetSaleID sets the "sale_id" field.
func (lau *LINENFTActivityUpdate) SetSaleID(u uint32) *LINENFTActivityUpdate {
	lau.mutation.ResetSaleID()
	lau.mutation.SetSaleID(u)
	return lau
}

// SetNillableSaleID sets the "sale_id" field if the given value is not nil.
func (lau *LINENFTActivityUpdate) SetNillableSaleID(u *uint32) *LINENFTActivityUpdate {
	if u != nil {
		lau.SetSaleID(*u)
	}
	return lau
}

// AddSaleID adds u to the "sale_id" field.
func (lau *LINENFTActivityUpdate) AddSaleID(u int32) *LINENFTActivityUpdate {
	lau.mutation.AddSaleID(u)
	return lau
}

// SetSaleType sets the "sale_type" field.
func (lau *LINENFTActivityUpdate) SetSaleType(s string) *LINENFTActivityUpdate {
	lau.mutation.SetSaleType(s)
	return lau
}

// SetNillableSaleType sets the "sale_type" field if the given value is not nil.
func (lau *LINENFTActivityUpdate) SetNillableSaleType(s *string) *LINENFTActivityUpdate {
	if s != nil {
		lau.SetSaleType(*s)
	}
	return lau
}

// SetCurrencyType sets the "currency_type" field.
func (lau *LINENFTActivityUpdate) SetCurrencyType(s string) *LINENFTActivityUpdate {
	lau.mutation.SetCurrencyType(s)
	return lau
}

// SetNillableCurrencyType sets the "currency_type" field if the given value is not nil.
func (lau *LINENFTActivityUpdate) SetNillableCurrencyType(s *string) *LINENFTActivityUpdate {
	if s != nil {
		lau.SetCurrencyType(*s)
	}
	return lau
}

// SetPrice sets the "price" field.
func (lau *LINENFTActivityUpdate) SetPrice(f float32) *LINENFTActivityUpdate {
	lau.mutation.ResetPrice()
	lau.mutation.SetPrice(f)
	return lau
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (lau *LINENFTActivityUpdate) SetNillablePrice(f *float32) *LINENFTActivityUpdate {
	if f != nil {
		lau.SetPrice(*f)
	}
	return lau
}

// AddPrice adds f to the "price" field.
func (lau *LINENFTActivityUpdate) AddPrice(f float32) *LINENFTActivityUpdate {
	lau.mutation.AddPrice(f)
	return lau
}

// SetActivatedAt sets the "activated_at" field.
func (lau *LINENFTActivityUpdate) SetActivatedAt(t time.Time) *LINENFTActivityUpdate {
	lau.mutation.SetActivatedAt(t)
	return lau
}

// SetNillableActivatedAt sets the "activated_at" field if the given value is not nil.
func (lau *LINENFTActivityUpdate) SetNillableActivatedAt(t *time.Time) *LINENFTActivityUpdate {
	if t != nil {
		lau.SetActivatedAt(*t)
	}
	return lau
}

// SetLineNftID sets the "line_nft" edge to the LINENFT entity by ID.
func (lau *LINENFTActivityUpdate) SetLineNftID(id uint32) *LINENFTActivityUpdate {
	lau.mutation.SetLineNftID(id)
	return lau
}

// SetLineNft sets the "line_nft" edge to the LINENFT entity.
func (lau *LINENFTActivityUpdate) SetLineNft(l *LINENFT) *LINENFTActivityUpdate {
	return lau.SetLineNftID(l.ID)
}

// Mutation returns the LINENFTActivityMutation object of the builder.
func (lau *LINENFTActivityUpdate) Mutation() *LINENFTActivityMutation {
	return lau.mutation
}

// ClearLineNft clears the "line_nft" edge to the LINENFT entity.
func (lau *LINENFTActivityUpdate) ClearLineNft() *LINENFTActivityUpdate {
	lau.mutation.ClearLineNft()
	return lau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LINENFTActivityUpdate) Save(ctx context.Context) (int, error) {
	if err := lau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, lau.sqlSave, lau.mutation, lau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LINENFTActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LINENFTActivityUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LINENFTActivityUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lau *LINENFTActivityUpdate) defaults() error {
	if _, ok := lau.mutation.UpdatedAt(); !ok {
		if linenftactivity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized linenftactivity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := linenftactivity.UpdateDefaultUpdatedAt()
		lau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lau *LINENFTActivityUpdate) check() error {
	if _, ok := lau.mutation.LineNftID(); lau.mutation.LineNftCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LINENFTActivity.line_nft"`)
	}
	return nil
}

func (lau *LINENFTActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(linenftactivity.Table, linenftactivity.Columns, sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32))
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lau.mutation.UpdatedAt(); ok {
		_spec.SetField(linenftactivity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lau.mutation.DeletedAt(); ok {
		_spec.SetField(linenftactivity.FieldDeletedAt, field.TypeTime, value)
	}
	if lau.mutation.DeletedAtCleared() {
		_spec.ClearField(linenftactivity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := lau.mutation.ActivityType(); ok {
		_spec.SetField(linenftactivity.FieldActivityType, field.TypeString, value)
	}
	if value, ok := lau.mutation.SaleID(); ok {
		_spec.SetField(linenftactivity.FieldSaleID, field.TypeUint32, value)
	}
	if value, ok := lau.mutation.AddedSaleID(); ok {
		_spec.AddField(linenftactivity.FieldSaleID, field.TypeUint32, value)
	}
	if value, ok := lau.mutation.SaleType(); ok {
		_spec.SetField(linenftactivity.FieldSaleType, field.TypeString, value)
	}
	if value, ok := lau.mutation.CurrencyType(); ok {
		_spec.SetField(linenftactivity.FieldCurrencyType, field.TypeString, value)
	}
	if value, ok := lau.mutation.Price(); ok {
		_spec.SetField(linenftactivity.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := lau.mutation.AddedPrice(); ok {
		_spec.AddField(linenftactivity.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := lau.mutation.ActivatedAt(); ok {
		_spec.SetField(linenftactivity.FieldActivatedAt, field.TypeTime, value)
	}
	if lau.mutation.LineNftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   linenftactivity.LineNftTable,
			Columns: []string{linenftactivity.LineNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenft.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lau.mutation.LineNftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   linenftactivity.LineNftTable,
			Columns: []string{linenftactivity.LineNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenft.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linenftactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lau.mutation.done = true
	return n, nil
}

// LINENFTActivityUpdateOne is the builder for updating a single LINENFTActivity entity.
type LINENFTActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LINENFTActivityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lauo *LINENFTActivityUpdateOne) SetUpdatedAt(t time.Time) *LINENFTActivityUpdateOne {
	lauo.mutation.SetUpdatedAt(t)
	return lauo
}

// SetDeletedAt sets the "deleted_at" field.
func (lauo *LINENFTActivityUpdateOne) SetDeletedAt(t time.Time) *LINENFTActivityUpdateOne {
	lauo.mutation.SetDeletedAt(t)
	return lauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lauo *LINENFTActivityUpdateOne) SetNillableDeletedAt(t *time.Time) *LINENFTActivityUpdateOne {
	if t != nil {
		lauo.SetDeletedAt(*t)
	}
	return lauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (lauo *LINENFTActivityUpdateOne) ClearDeletedAt() *LINENFTActivityUpdateOne {
	lauo.mutation.ClearDeletedAt()
	return lauo
}

// SetActivityType sets the "activity_type" field.
func (lauo *LINENFTActivityUpdateOne) SetActivityType(s string) *LINENFTActivityUpdateOne {
	lauo.mutation.SetActivityType(s)
	return lauo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (lauo *LINENFTActivityUpdateOne) SetNillableActivityType(s *string) *LINENFTActivityUpdateOne {
	if s != nil {
		lauo.SetActivityType(*s)
	}
	return lauo
}

// SetSaleID sets the "sale_id" field.
func (lauo *LINENFTActivityUpdateOne) SetSaleID(u uint32) *LINENFTActivityUpdateOne {
	lauo.mutation.ResetSaleID()
	lauo.mutation.SetSaleID(u)
	return lauo
}

// SetNillableSaleID sets the "sale_id" field if the given value is not nil.
func (lauo *LINENFTActivityUpdateOne) SetNillableSaleID(u *uint32) *LINENFTActivityUpdateOne {
	if u != nil {
		lauo.SetSaleID(*u)
	}
	return lauo
}

// AddSaleID adds u to the "sale_id" field.
func (lauo *LINENFTActivityUpdateOne) AddSaleID(u int32) *LINENFTActivityUpdateOne {
	lauo.mutation.AddSaleID(u)
	return lauo
}

// SetSaleType sets the "sale_type" field.
func (lauo *LINENFTActivityUpdateOne) SetSaleType(s string) *LINENFTActivityUpdateOne {
	lauo.mutation.SetSaleType(s)
	return lauo
}

// SetNillableSaleType sets the "sale_type" field if the given value is not nil.
func (lauo *LINENFTActivityUpdateOne) SetNillableSaleType(s *string) *LINENFTActivityUpdateOne {
	if s != nil {
		lauo.SetSaleType(*s)
	}
	return lauo
}

// SetCurrencyType sets the "currency_type" field.
func (lauo *LINENFTActivityUpdateOne) SetCurrencyType(s string) *LINENFTActivityUpdateOne {
	lauo.mutation.SetCurrencyType(s)
	return lauo
}

// SetNillableCurrencyType sets the "currency_type" field if the given value is not nil.
func (lauo *LINENFTActivityUpdateOne) SetNillableCurrencyType(s *string) *LINENFTActivityUpdateOne {
	if s != nil {
		lauo.SetCurrencyType(*s)
	}
	return lauo
}

// SetPrice sets the "price" field.
func (lauo *LINENFTActivityUpdateOne) SetPrice(f float32) *LINENFTActivityUpdateOne {
	lauo.mutation.ResetPrice()
	lauo.mutation.SetPrice(f)
	return lauo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (lauo *LINENFTActivityUpdateOne) SetNillablePrice(f *float32) *LINENFTActivityUpdateOne {
	if f != nil {
		lauo.SetPrice(*f)
	}
	return lauo
}

// AddPrice adds f to the "price" field.
func (lauo *LINENFTActivityUpdateOne) AddPrice(f float32) *LINENFTActivityUpdateOne {
	lauo.mutation.AddPrice(f)
	return lauo
}

// SetActivatedAt sets the "activated_at" field.
func (lauo *LINENFTActivityUpdateOne) SetActivatedAt(t time.Time) *LINENFTActivityUpdateOne {
	lauo.mutation.SetActivatedAt(t)
	return lauo
}

// SetNillableActivatedAt sets the "activated_at" field if the given value is not nil.
func (lauo *LINENFTActivityUpdateOne) SetNillableActivatedAt(t *time.Time) *LINENFTActivityUpdateOne {
	if t != nil {
		lauo.SetActivatedAt(*t)
	}
	return lauo
}

// SetLineNftID sets the "line_nft" edge to the LINENFT entity by ID.
func (lauo *LINENFTActivityUpdateOne) SetLineNftID(id uint32) *LINENFTActivityUpdateOne {
	lauo.mutation.SetLineNftID(id)
	return lauo
}

// SetLineNft sets the "line_nft" edge to the LINENFT entity.
func (lauo *LINENFTActivityUpdateOne) SetLineNft(l *LINENFT) *LINENFTActivityUpdateOne {
	return lauo.SetLineNftID(l.ID)
}

// Mutation returns the LINENFTActivityMutation object of the builder.
func (lauo *LINENFTActivityUpdateOne) Mutation() *LINENFTActivityMutation {
	return lauo.mutation
}

// ClearLineNft clears the "line_nft" edge to the LINENFT entity.
func (lauo *LINENFTActivityUpdateOne) ClearLineNft() *LINENFTActivityUpdateOne {
	lauo.mutation.ClearLineNft()
	return lauo
}

// Where appends a list predicates to the LINENFTActivityUpdate builder.
func (lauo *LINENFTActivityUpdateOne) Where(ps ...predicate.LINENFTActivity) *LINENFTActivityUpdateOne {
	lauo.mutation.Where(ps...)
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LINENFTActivityUpdateOne) Select(field string, fields ...string) *LINENFTActivityUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LINENFTActivity entity.
func (lauo *LINENFTActivityUpdateOne) Save(ctx context.Context) (*LINENFTActivity, error) {
	if err := lauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, lauo.sqlSave, lauo.mutation, lauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LINENFTActivityUpdateOne) SaveX(ctx context.Context) *LINENFTActivity {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LINENFTActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LINENFTActivityUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lauo *LINENFTActivityUpdateOne) defaults() error {
	if _, ok := lauo.mutation.UpdatedAt(); !ok {
		if linenftactivity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized linenftactivity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := linenftactivity.UpdateDefaultUpdatedAt()
		lauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lauo *LINENFTActivityUpdateOne) check() error {
	if _, ok := lauo.mutation.LineNftID(); lauo.mutation.LineNftCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LINENFTActivity.line_nft"`)
	}
	return nil
}

func (lauo *LINENFTActivityUpdateOne) sqlSave(ctx context.Context) (_node *LINENFTActivity, err error) {
	if err := lauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(linenftactivity.Table, linenftactivity.Columns, sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32))
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LINENFTActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linenftactivity.FieldID)
		for _, f := range fields {
			if !linenftactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != linenftactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lauo.mutation.UpdatedAt(); ok {
		_spec.SetField(linenftactivity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lauo.mutation.DeletedAt(); ok {
		_spec.SetField(linenftactivity.FieldDeletedAt, field.TypeTime, value)
	}
	if lauo.mutation.DeletedAtCleared() {
		_spec.ClearField(linenftactivity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := lauo.mutation.ActivityType(); ok {
		_spec.SetField(linenftactivity.FieldActivityType, field.TypeString, value)
	}
	if value, ok := lauo.mutation.SaleID(); ok {
		_spec.SetField(linenftactivity.FieldSaleID, field.TypeUint32, value)
	}
	if value, ok := lauo.mutation.AddedSaleID(); ok {
		_spec.AddField(linenftactivity.FieldSaleID, field.TypeUint32, value)
	}
	if value, ok := lauo.mutation.SaleType(); ok {
		_spec.SetField(linenftactivity.FieldSaleType, field.TypeString, value)
	}
	if value, ok := lauo.mutation.CurrencyType(); ok {
		_spec.SetField(linenftactivity.FieldCurrencyType, field.TypeString, value)
	}
	if value, ok := lauo.mutation.Price(); ok {
		_spec.SetField(linenftactivity.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := lauo.mutation.AddedPrice(); ok {
		_spec.AddField(linenftactivity.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := lauo.mutation.ActivatedAt(); ok {
		_spec.SetField(linenftactivity.FieldActivatedAt, field.TypeTime, value)
	}
	if lauo.mutation.LineNftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   linenftactivity.LineNftTable,
			Columns: []string{linenftactivity.LineNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenft.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lauo.mutation.LineNftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   linenftactivity.LineNftTable,
			Columns: []string{linenftactivity.LineNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenft.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LINENFTActivity{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linenftactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lauo.mutation.done = true
	return _node, nil
}
