// Code generated by ent, DO NOT EDIT.

package finschiaitemtoken

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the finschiaitemtoken type in the database.
	Label = "finschia_item_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldContractID holds the string denoting the contract_id field in the database.
	FieldContractID = "contract_id"
	// FieldTokenType holds the string denoting the token_type field in the database.
	FieldTokenType = "token_type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// EdgeMillionArthursProperties holds the string denoting the million_arthurs_properties edge name in mutations.
	EdgeMillionArthursProperties = "million_arthurs_properties"
	// Table holds the table name of the finschiaitemtoken in the database.
	Table = "finschia_item_tokens"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "finschia_item_token_activities"
	// ActivitiesInverseTable is the table name for the FinschiaItemTokenActivity entity.
	// It exists in this package in order to avoid circular dependency with the "finschiaitemtokenactivity" package.
	ActivitiesInverseTable = "finschia_item_token_activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "finschia_item_token_id"
	// MillionArthursPropertiesTable is the table that holds the million_arthurs_properties relation/edge.
	MillionArthursPropertiesTable = "finschia_item_token_million_arthurs_properties"
	// MillionArthursPropertiesInverseTable is the table name for the FinschiaItemTokenMillionArthursProperty entity.
	// It exists in this package in order to avoid circular dependency with the "finschiaitemtokenmillionarthursproperty" package.
	MillionArthursPropertiesInverseTable = "finschia_item_token_million_arthurs_properties"
	// MillionArthursPropertiesColumn is the table column denoting the million_arthurs_properties relation/edge.
	MillionArthursPropertiesColumn = "finschia_item_token_id"
)

// Columns holds all SQL columns for finschiaitemtoken fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldContractID,
	FieldTokenType,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/a10adotapp/a10a.app/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the FinschiaItemToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByContractID orders the results by the contract_id field.
func ByContractID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractID, opts...).ToFunc()
}

// ByTokenType orders the results by the token_type field.
func ByTokenType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMillionArthursPropertiesCount orders the results by million_arthurs_properties count.
func ByMillionArthursPropertiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMillionArthursPropertiesStep(), opts...)
	}
}

// ByMillionArthursProperties orders the results by million_arthurs_properties terms.
func ByMillionArthursProperties(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMillionArthursPropertiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
func newMillionArthursPropertiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MillionArthursPropertiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MillionArthursPropertiesTable, MillionArthursPropertiesColumn),
	)
}
