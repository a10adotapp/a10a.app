// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenftchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// KusogeeeeeeNFTChangeLogDelete is the builder for deleting a KusogeeeeeeNFTChangeLog entity.
type KusogeeeeeeNFTChangeLogDelete struct {
	config
	hooks    []Hook
	mutation *KusogeeeeeeNFTChangeLogMutation
}

// Where appends a list predicates to the KusogeeeeeeNFTChangeLogDelete builder.
func (kncld *KusogeeeeeeNFTChangeLogDelete) Where(ps ...predicate.KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTChangeLogDelete {
	kncld.mutation.Where(ps...)
	return kncld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kncld *KusogeeeeeeNFTChangeLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, kncld.sqlExec, kncld.mutation, kncld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (kncld *KusogeeeeeeNFTChangeLogDelete) ExecX(ctx context.Context) int {
	n, err := kncld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kncld *KusogeeeeeeNFTChangeLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(kusogeeeeeenftchangelog.Table, sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32))
	if ps := kncld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, kncld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	kncld.mutation.done = true
	return affected, err
}

// KusogeeeeeeNFTChangeLogDeleteOne is the builder for deleting a single KusogeeeeeeNFTChangeLog entity.
type KusogeeeeeeNFTChangeLogDeleteOne struct {
	kncld *KusogeeeeeeNFTChangeLogDelete
}

// Where appends a list predicates to the KusogeeeeeeNFTChangeLogDelete builder.
func (kncldo *KusogeeeeeeNFTChangeLogDeleteOne) Where(ps ...predicate.KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTChangeLogDeleteOne {
	kncldo.kncld.mutation.Where(ps...)
	return kncldo
}

// Exec executes the deletion query.
func (kncldo *KusogeeeeeeNFTChangeLogDeleteOne) Exec(ctx context.Context) error {
	n, err := kncldo.kncld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{kusogeeeeeenftchangelog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kncldo *KusogeeeeeeNFTChangeLogDeleteOne) ExecX(ctx context.Context) {
	if err := kncldo.Exec(ctx); err != nil {
		panic(err)
	}
}
