// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/linenft"
	"github.com/a10adotapp/a10a.app/ent/linenftactivity"
)

// LINE NFT 売買履歴
type LINENFTActivity struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// ActivityType holds the value of the "activity_type" field.
	ActivityType string `json:"activity_type"`
	// SaleID holds the value of the "sale_id" field.
	SaleID uint32 `json:"sale_id"`
	// SaleType holds the value of the "sale_type" field.
	SaleType string `json:"sale_type"`
	// CurrencyType holds the value of the "currency_type" field.
	CurrencyType string `json:"currency_type"`
	// Price holds the value of the "price" field.
	Price float32 `json:"price"`
	// ActivatedAt holds the value of the "activated_at" field.
	ActivatedAt time.Time `json:"activated_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LINENFTActivityQuery when eager-loading is set.
	Edges              LINENFTActivityEdges `json:"edges"`
	linenft_activities *uint32
	selectValues       sql.SelectValues
}

// LINENFTActivityEdges holds the relations/edges for other nodes in the graph.
type LINENFTActivityEdges struct {
	// LineNft holds the value of the line_nft edge.
	LineNft *LINENFT `json:"line_nft,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LineNftOrErr returns the LineNft value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LINENFTActivityEdges) LineNftOrErr() (*LINENFT, error) {
	if e.loadedTypes[0] {
		if e.LineNft == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: linenft.Label}
		}
		return e.LineNft, nil
	}
	return nil, &NotLoadedError{edge: "line_nft"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LINENFTActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case linenftactivity.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case linenftactivity.FieldID, linenftactivity.FieldSaleID:
			values[i] = new(sql.NullInt64)
		case linenftactivity.FieldActivityType, linenftactivity.FieldSaleType, linenftactivity.FieldCurrencyType:
			values[i] = new(sql.NullString)
		case linenftactivity.FieldCreatedAt, linenftactivity.FieldUpdatedAt, linenftactivity.FieldDeletedAt, linenftactivity.FieldActivatedAt:
			values[i] = new(sql.NullTime)
		case linenftactivity.ForeignKeys[0]: // linenft_activities
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LINENFTActivity fields.
func (la *LINENFTActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linenftactivity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			la.ID = uint32(value.Int64)
		case linenftactivity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				la.CreatedAt = value.Time
			}
		case linenftactivity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				la.UpdatedAt = value.Time
			}
		case linenftactivity.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				la.DeletedAt = new(time.Time)
				*la.DeletedAt = value.Time
			}
		case linenftactivity.FieldActivityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type", values[i])
			} else if value.Valid {
				la.ActivityType = value.String
			}
		case linenftactivity.FieldSaleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_id", values[i])
			} else if value.Valid {
				la.SaleID = uint32(value.Int64)
			}
		case linenftactivity.FieldSaleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sale_type", values[i])
			} else if value.Valid {
				la.SaleType = value.String
			}
		case linenftactivity.FieldCurrencyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_type", values[i])
			} else if value.Valid {
				la.CurrencyType = value.String
			}
		case linenftactivity.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				la.Price = float32(value.Float64)
			}
		case linenftactivity.FieldActivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activated_at", values[i])
			} else if value.Valid {
				la.ActivatedAt = value.Time
			}
		case linenftactivity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field linenft_activities", value)
			} else if value.Valid {
				la.linenft_activities = new(uint32)
				*la.linenft_activities = uint32(value.Int64)
			}
		default:
			la.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LINENFTActivity.
// This includes values selected through modifiers, order, etc.
func (la *LINENFTActivity) Value(name string) (ent.Value, error) {
	return la.selectValues.Get(name)
}

// QueryLineNft queries the "line_nft" edge of the LINENFTActivity entity.
func (la *LINENFTActivity) QueryLineNft() *LINENFTQuery {
	return NewLINENFTActivityClient(la.config).QueryLineNft(la)
}

// Update returns a builder for updating this LINENFTActivity.
// Note that you need to call LINENFTActivity.Unwrap() before calling this method if this LINENFTActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LINENFTActivity) Update() *LINENFTActivityUpdateOne {
	return NewLINENFTActivityClient(la.config).UpdateOne(la)
}

// Unwrap unwraps the LINENFTActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LINENFTActivity) Unwrap() *LINENFTActivity {
	_tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LINENFTActivity is not a transactional entity")
	}
	la.config.driver = _tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LINENFTActivity) String() string {
	var builder strings.Builder
	builder.WriteString("LINENFTActivity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", la.ID))
	builder.WriteString("created_at=")
	builder.WriteString(la.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(la.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := la.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("activity_type=")
	builder.WriteString(la.ActivityType)
	builder.WriteString(", ")
	builder.WriteString("sale_id=")
	builder.WriteString(fmt.Sprintf("%v", la.SaleID))
	builder.WriteString(", ")
	builder.WriteString("sale_type=")
	builder.WriteString(la.SaleType)
	builder.WriteString(", ")
	builder.WriteString("currency_type=")
	builder.WriteString(la.CurrencyType)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", la.Price))
	builder.WriteString(", ")
	builder.WriteString("activated_at=")
	builder.WriteString(la.ActivatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LINENFTActivities is a parsable slice of LINENFTActivity.
type LINENFTActivities []*LINENFTActivity
