// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtoken"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenactivity"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenmillionarthursproperty"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// FinschiaItemTokenUpdate is the builder for updating FinschiaItemToken entities.
type FinschiaItemTokenUpdate struct {
	config
	hooks    []Hook
	mutation *FinschiaItemTokenMutation
}

// Where appends a list predicates to the FinschiaItemTokenUpdate builder.
func (fitu *FinschiaItemTokenUpdate) Where(ps ...predicate.FinschiaItemToken) *FinschiaItemTokenUpdate {
	fitu.mutation.Where(ps...)
	return fitu
}

// SetUpdatedAt sets the "updated_at" field.
func (fitu *FinschiaItemTokenUpdate) SetUpdatedAt(t time.Time) *FinschiaItemTokenUpdate {
	fitu.mutation.SetUpdatedAt(t)
	return fitu
}

// SetDeletedAt sets the "deleted_at" field.
func (fitu *FinschiaItemTokenUpdate) SetDeletedAt(t time.Time) *FinschiaItemTokenUpdate {
	fitu.mutation.SetDeletedAt(t)
	return fitu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fitu *FinschiaItemTokenUpdate) SetNillableDeletedAt(t *time.Time) *FinschiaItemTokenUpdate {
	if t != nil {
		fitu.SetDeletedAt(*t)
	}
	return fitu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fitu *FinschiaItemTokenUpdate) ClearDeletedAt() *FinschiaItemTokenUpdate {
	fitu.mutation.ClearDeletedAt()
	return fitu
}

// SetContractID sets the "contract_id" field.
func (fitu *FinschiaItemTokenUpdate) SetContractID(s string) *FinschiaItemTokenUpdate {
	fitu.mutation.SetContractID(s)
	return fitu
}

// SetNillableContractID sets the "contract_id" field if the given value is not nil.
func (fitu *FinschiaItemTokenUpdate) SetNillableContractID(s *string) *FinschiaItemTokenUpdate {
	if s != nil {
		fitu.SetContractID(*s)
	}
	return fitu
}

// SetTokenType sets the "token_type" field.
func (fitu *FinschiaItemTokenUpdate) SetTokenType(s string) *FinschiaItemTokenUpdate {
	fitu.mutation.SetTokenType(s)
	return fitu
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (fitu *FinschiaItemTokenUpdate) SetNillableTokenType(s *string) *FinschiaItemTokenUpdate {
	if s != nil {
		fitu.SetTokenType(*s)
	}
	return fitu
}

// SetName sets the "name" field.
func (fitu *FinschiaItemTokenUpdate) SetName(s string) *FinschiaItemTokenUpdate {
	fitu.mutation.SetName(s)
	return fitu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fitu *FinschiaItemTokenUpdate) SetNillableName(s *string) *FinschiaItemTokenUpdate {
	if s != nil {
		fitu.SetName(*s)
	}
	return fitu
}

// AddActivityIDs adds the "activities" edge to the FinschiaItemTokenActivity entity by IDs.
func (fitu *FinschiaItemTokenUpdate) AddActivityIDs(ids ...uint32) *FinschiaItemTokenUpdate {
	fitu.mutation.AddActivityIDs(ids...)
	return fitu
}

// AddActivities adds the "activities" edges to the FinschiaItemTokenActivity entity.
func (fitu *FinschiaItemTokenUpdate) AddActivities(f ...*FinschiaItemTokenActivity) *FinschiaItemTokenUpdate {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fitu.AddActivityIDs(ids...)
}

// AddMillionArthursPropertyIDs adds the "million_arthurs_properties" edge to the FinschiaItemTokenMillionArthursProperty entity by IDs.
func (fitu *FinschiaItemTokenUpdate) AddMillionArthursPropertyIDs(ids ...uint32) *FinschiaItemTokenUpdate {
	fitu.mutation.AddMillionArthursPropertyIDs(ids...)
	return fitu
}

// AddMillionArthursProperties adds the "million_arthurs_properties" edges to the FinschiaItemTokenMillionArthursProperty entity.
func (fitu *FinschiaItemTokenUpdate) AddMillionArthursProperties(f ...*FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenUpdate {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fitu.AddMillionArthursPropertyIDs(ids...)
}

// Mutation returns the FinschiaItemTokenMutation object of the builder.
func (fitu *FinschiaItemTokenUpdate) Mutation() *FinschiaItemTokenMutation {
	return fitu.mutation
}

// ClearActivities clears all "activities" edges to the FinschiaItemTokenActivity entity.
func (fitu *FinschiaItemTokenUpdate) ClearActivities() *FinschiaItemTokenUpdate {
	fitu.mutation.ClearActivities()
	return fitu
}

// RemoveActivityIDs removes the "activities" edge to FinschiaItemTokenActivity entities by IDs.
func (fitu *FinschiaItemTokenUpdate) RemoveActivityIDs(ids ...uint32) *FinschiaItemTokenUpdate {
	fitu.mutation.RemoveActivityIDs(ids...)
	return fitu
}

// RemoveActivities removes "activities" edges to FinschiaItemTokenActivity entities.
func (fitu *FinschiaItemTokenUpdate) RemoveActivities(f ...*FinschiaItemTokenActivity) *FinschiaItemTokenUpdate {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fitu.RemoveActivityIDs(ids...)
}

// ClearMillionArthursProperties clears all "million_arthurs_properties" edges to the FinschiaItemTokenMillionArthursProperty entity.
func (fitu *FinschiaItemTokenUpdate) ClearMillionArthursProperties() *FinschiaItemTokenUpdate {
	fitu.mutation.ClearMillionArthursProperties()
	return fitu
}

// RemoveMillionArthursPropertyIDs removes the "million_arthurs_properties" edge to FinschiaItemTokenMillionArthursProperty entities by IDs.
func (fitu *FinschiaItemTokenUpdate) RemoveMillionArthursPropertyIDs(ids ...uint32) *FinschiaItemTokenUpdate {
	fitu.mutation.RemoveMillionArthursPropertyIDs(ids...)
	return fitu
}

// RemoveMillionArthursProperties removes "million_arthurs_properties" edges to FinschiaItemTokenMillionArthursProperty entities.
func (fitu *FinschiaItemTokenUpdate) RemoveMillionArthursProperties(f ...*FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenUpdate {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fitu.RemoveMillionArthursPropertyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fitu *FinschiaItemTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := fitu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fitu.sqlSave, fitu.mutation, fitu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fitu *FinschiaItemTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := fitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fitu *FinschiaItemTokenUpdate) Exec(ctx context.Context) error {
	_, err := fitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitu *FinschiaItemTokenUpdate) ExecX(ctx context.Context) {
	if err := fitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitu *FinschiaItemTokenUpdate) defaults() error {
	if _, ok := fitu.mutation.UpdatedAt(); !ok {
		if finschiaitemtoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtoken.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtoken.UpdateDefaultUpdatedAt()
		fitu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (fitu *FinschiaItemTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(finschiaitemtoken.Table, finschiaitemtoken.Columns, sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32))
	if ps := fitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fitu.mutation.UpdatedAt(); ok {
		_spec.SetField(finschiaitemtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fitu.mutation.DeletedAt(); ok {
		_spec.SetField(finschiaitemtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if fitu.mutation.DeletedAtCleared() {
		_spec.ClearField(finschiaitemtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fitu.mutation.ContractID(); ok {
		_spec.SetField(finschiaitemtoken.FieldContractID, field.TypeString, value)
	}
	if value, ok := fitu.mutation.TokenType(); ok {
		_spec.SetField(finschiaitemtoken.FieldTokenType, field.TypeString, value)
	}
	if value, ok := fitu.mutation.Name(); ok {
		_spec.SetField(finschiaitemtoken.FieldName, field.TypeString, value)
	}
	if fitu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.ActivitiesTable,
			Columns: []string{finschiaitemtoken.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !fitu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.ActivitiesTable,
			Columns: []string{finschiaitemtoken.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.ActivitiesTable,
			Columns: []string{finschiaitemtoken.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fitu.mutation.MillionArthursPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.MillionArthursPropertiesTable,
			Columns: []string{finschiaitemtoken.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitu.mutation.RemovedMillionArthursPropertiesIDs(); len(nodes) > 0 && !fitu.mutation.MillionArthursPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.MillionArthursPropertiesTable,
			Columns: []string{finschiaitemtoken.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitu.mutation.MillionArthursPropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.MillionArthursPropertiesTable,
			Columns: []string{finschiaitemtoken.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finschiaitemtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fitu.mutation.done = true
	return n, nil
}

// FinschiaItemTokenUpdateOne is the builder for updating a single FinschiaItemToken entity.
type FinschiaItemTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FinschiaItemTokenMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fituo *FinschiaItemTokenUpdateOne) SetUpdatedAt(t time.Time) *FinschiaItemTokenUpdateOne {
	fituo.mutation.SetUpdatedAt(t)
	return fituo
}

// SetDeletedAt sets the "deleted_at" field.
func (fituo *FinschiaItemTokenUpdateOne) SetDeletedAt(t time.Time) *FinschiaItemTokenUpdateOne {
	fituo.mutation.SetDeletedAt(t)
	return fituo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fituo *FinschiaItemTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *FinschiaItemTokenUpdateOne {
	if t != nil {
		fituo.SetDeletedAt(*t)
	}
	return fituo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fituo *FinschiaItemTokenUpdateOne) ClearDeletedAt() *FinschiaItemTokenUpdateOne {
	fituo.mutation.ClearDeletedAt()
	return fituo
}

// SetContractID sets the "contract_id" field.
func (fituo *FinschiaItemTokenUpdateOne) SetContractID(s string) *FinschiaItemTokenUpdateOne {
	fituo.mutation.SetContractID(s)
	return fituo
}

// SetNillableContractID sets the "contract_id" field if the given value is not nil.
func (fituo *FinschiaItemTokenUpdateOne) SetNillableContractID(s *string) *FinschiaItemTokenUpdateOne {
	if s != nil {
		fituo.SetContractID(*s)
	}
	return fituo
}

// SetTokenType sets the "token_type" field.
func (fituo *FinschiaItemTokenUpdateOne) SetTokenType(s string) *FinschiaItemTokenUpdateOne {
	fituo.mutation.SetTokenType(s)
	return fituo
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (fituo *FinschiaItemTokenUpdateOne) SetNillableTokenType(s *string) *FinschiaItemTokenUpdateOne {
	if s != nil {
		fituo.SetTokenType(*s)
	}
	return fituo
}

// SetName sets the "name" field.
func (fituo *FinschiaItemTokenUpdateOne) SetName(s string) *FinschiaItemTokenUpdateOne {
	fituo.mutation.SetName(s)
	return fituo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fituo *FinschiaItemTokenUpdateOne) SetNillableName(s *string) *FinschiaItemTokenUpdateOne {
	if s != nil {
		fituo.SetName(*s)
	}
	return fituo
}

// AddActivityIDs adds the "activities" edge to the FinschiaItemTokenActivity entity by IDs.
func (fituo *FinschiaItemTokenUpdateOne) AddActivityIDs(ids ...uint32) *FinschiaItemTokenUpdateOne {
	fituo.mutation.AddActivityIDs(ids...)
	return fituo
}

// AddActivities adds the "activities" edges to the FinschiaItemTokenActivity entity.
func (fituo *FinschiaItemTokenUpdateOne) AddActivities(f ...*FinschiaItemTokenActivity) *FinschiaItemTokenUpdateOne {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fituo.AddActivityIDs(ids...)
}

// AddMillionArthursPropertyIDs adds the "million_arthurs_properties" edge to the FinschiaItemTokenMillionArthursProperty entity by IDs.
func (fituo *FinschiaItemTokenUpdateOne) AddMillionArthursPropertyIDs(ids ...uint32) *FinschiaItemTokenUpdateOne {
	fituo.mutation.AddMillionArthursPropertyIDs(ids...)
	return fituo
}

// AddMillionArthursProperties adds the "million_arthurs_properties" edges to the FinschiaItemTokenMillionArthursProperty entity.
func (fituo *FinschiaItemTokenUpdateOne) AddMillionArthursProperties(f ...*FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenUpdateOne {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fituo.AddMillionArthursPropertyIDs(ids...)
}

// Mutation returns the FinschiaItemTokenMutation object of the builder.
func (fituo *FinschiaItemTokenUpdateOne) Mutation() *FinschiaItemTokenMutation {
	return fituo.mutation
}

// ClearActivities clears all "activities" edges to the FinschiaItemTokenActivity entity.
func (fituo *FinschiaItemTokenUpdateOne) ClearActivities() *FinschiaItemTokenUpdateOne {
	fituo.mutation.ClearActivities()
	return fituo
}

// RemoveActivityIDs removes the "activities" edge to FinschiaItemTokenActivity entities by IDs.
func (fituo *FinschiaItemTokenUpdateOne) RemoveActivityIDs(ids ...uint32) *FinschiaItemTokenUpdateOne {
	fituo.mutation.RemoveActivityIDs(ids...)
	return fituo
}

// RemoveActivities removes "activities" edges to FinschiaItemTokenActivity entities.
func (fituo *FinschiaItemTokenUpdateOne) RemoveActivities(f ...*FinschiaItemTokenActivity) *FinschiaItemTokenUpdateOne {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fituo.RemoveActivityIDs(ids...)
}

// ClearMillionArthursProperties clears all "million_arthurs_properties" edges to the FinschiaItemTokenMillionArthursProperty entity.
func (fituo *FinschiaItemTokenUpdateOne) ClearMillionArthursProperties() *FinschiaItemTokenUpdateOne {
	fituo.mutation.ClearMillionArthursProperties()
	return fituo
}

// RemoveMillionArthursPropertyIDs removes the "million_arthurs_properties" edge to FinschiaItemTokenMillionArthursProperty entities by IDs.
func (fituo *FinschiaItemTokenUpdateOne) RemoveMillionArthursPropertyIDs(ids ...uint32) *FinschiaItemTokenUpdateOne {
	fituo.mutation.RemoveMillionArthursPropertyIDs(ids...)
	return fituo
}

// RemoveMillionArthursProperties removes "million_arthurs_properties" edges to FinschiaItemTokenMillionArthursProperty entities.
func (fituo *FinschiaItemTokenUpdateOne) RemoveMillionArthursProperties(f ...*FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenUpdateOne {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fituo.RemoveMillionArthursPropertyIDs(ids...)
}

// Where appends a list predicates to the FinschiaItemTokenUpdate builder.
func (fituo *FinschiaItemTokenUpdateOne) Where(ps ...predicate.FinschiaItemToken) *FinschiaItemTokenUpdateOne {
	fituo.mutation.Where(ps...)
	return fituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fituo *FinschiaItemTokenUpdateOne) Select(field string, fields ...string) *FinschiaItemTokenUpdateOne {
	fituo.fields = append([]string{field}, fields...)
	return fituo
}

// Save executes the query and returns the updated FinschiaItemToken entity.
func (fituo *FinschiaItemTokenUpdateOne) Save(ctx context.Context) (*FinschiaItemToken, error) {
	if err := fituo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fituo.sqlSave, fituo.mutation, fituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fituo *FinschiaItemTokenUpdateOne) SaveX(ctx context.Context) *FinschiaItemToken {
	node, err := fituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fituo *FinschiaItemTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := fituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fituo *FinschiaItemTokenUpdateOne) ExecX(ctx context.Context) {
	if err := fituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fituo *FinschiaItemTokenUpdateOne) defaults() error {
	if _, ok := fituo.mutation.UpdatedAt(); !ok {
		if finschiaitemtoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtoken.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtoken.UpdateDefaultUpdatedAt()
		fituo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (fituo *FinschiaItemTokenUpdateOne) sqlSave(ctx context.Context) (_node *FinschiaItemToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(finschiaitemtoken.Table, finschiaitemtoken.Columns, sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32))
	id, ok := fituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FinschiaItemToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, finschiaitemtoken.FieldID)
		for _, f := range fields {
			if !finschiaitemtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != finschiaitemtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fituo.mutation.UpdatedAt(); ok {
		_spec.SetField(finschiaitemtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fituo.mutation.DeletedAt(); ok {
		_spec.SetField(finschiaitemtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if fituo.mutation.DeletedAtCleared() {
		_spec.ClearField(finschiaitemtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fituo.mutation.ContractID(); ok {
		_spec.SetField(finschiaitemtoken.FieldContractID, field.TypeString, value)
	}
	if value, ok := fituo.mutation.TokenType(); ok {
		_spec.SetField(finschiaitemtoken.FieldTokenType, field.TypeString, value)
	}
	if value, ok := fituo.mutation.Name(); ok {
		_spec.SetField(finschiaitemtoken.FieldName, field.TypeString, value)
	}
	if fituo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.ActivitiesTable,
			Columns: []string{finschiaitemtoken.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fituo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !fituo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.ActivitiesTable,
			Columns: []string{finschiaitemtoken.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fituo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.ActivitiesTable,
			Columns: []string{finschiaitemtoken.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fituo.mutation.MillionArthursPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.MillionArthursPropertiesTable,
			Columns: []string{finschiaitemtoken.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fituo.mutation.RemovedMillionArthursPropertiesIDs(); len(nodes) > 0 && !fituo.mutation.MillionArthursPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.MillionArthursPropertiesTable,
			Columns: []string{finschiaitemtoken.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fituo.mutation.MillionArthursPropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.MillionArthursPropertiesTable,
			Columns: []string{finschiaitemtoken.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FinschiaItemToken{config: fituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finschiaitemtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fituo.mutation.done = true
	return _node, nil
}
