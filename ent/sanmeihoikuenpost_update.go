// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/predicate"
	"github.com/a10adotapp/a10a.app/ent/sanmeihoikuenpost"
)

// SanmeiHoikuenPostUpdate is the builder for updating SanmeiHoikuenPost entities.
type SanmeiHoikuenPostUpdate struct {
	config
	hooks    []Hook
	mutation *SanmeiHoikuenPostMutation
}

// Where appends a list predicates to the SanmeiHoikuenPostUpdate builder.
func (shpu *SanmeiHoikuenPostUpdate) Where(ps ...predicate.SanmeiHoikuenPost) *SanmeiHoikuenPostUpdate {
	shpu.mutation.Where(ps...)
	return shpu
}

// SetUpdatedAt sets the "updated_at" field.
func (shpu *SanmeiHoikuenPostUpdate) SetUpdatedAt(t time.Time) *SanmeiHoikuenPostUpdate {
	shpu.mutation.SetUpdatedAt(t)
	return shpu
}

// SetDeletedAt sets the "deleted_at" field.
func (shpu *SanmeiHoikuenPostUpdate) SetDeletedAt(t time.Time) *SanmeiHoikuenPostUpdate {
	shpu.mutation.SetDeletedAt(t)
	return shpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shpu *SanmeiHoikuenPostUpdate) SetNillableDeletedAt(t *time.Time) *SanmeiHoikuenPostUpdate {
	if t != nil {
		shpu.SetDeletedAt(*t)
	}
	return shpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (shpu *SanmeiHoikuenPostUpdate) ClearDeletedAt() *SanmeiHoikuenPostUpdate {
	shpu.mutation.ClearDeletedAt()
	return shpu
}

// SetURL sets the "url" field.
func (shpu *SanmeiHoikuenPostUpdate) SetURL(s string) *SanmeiHoikuenPostUpdate {
	shpu.mutation.SetURL(s)
	return shpu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (shpu *SanmeiHoikuenPostUpdate) SetNillableURL(s *string) *SanmeiHoikuenPostUpdate {
	if s != nil {
		shpu.SetURL(*s)
	}
	return shpu
}

// SetTitle sets the "title" field.
func (shpu *SanmeiHoikuenPostUpdate) SetTitle(s string) *SanmeiHoikuenPostUpdate {
	shpu.mutation.SetTitle(s)
	return shpu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (shpu *SanmeiHoikuenPostUpdate) SetNillableTitle(s *string) *SanmeiHoikuenPostUpdate {
	if s != nil {
		shpu.SetTitle(*s)
	}
	return shpu
}

// SetDate sets the "date" field.
func (shpu *SanmeiHoikuenPostUpdate) SetDate(s string) *SanmeiHoikuenPostUpdate {
	shpu.mutation.SetDate(s)
	return shpu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (shpu *SanmeiHoikuenPostUpdate) SetNillableDate(s *string) *SanmeiHoikuenPostUpdate {
	if s != nil {
		shpu.SetDate(*s)
	}
	return shpu
}

// Mutation returns the SanmeiHoikuenPostMutation object of the builder.
func (shpu *SanmeiHoikuenPostUpdate) Mutation() *SanmeiHoikuenPostMutation {
	return shpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (shpu *SanmeiHoikuenPostUpdate) Save(ctx context.Context) (int, error) {
	if err := shpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, shpu.sqlSave, shpu.mutation, shpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shpu *SanmeiHoikuenPostUpdate) SaveX(ctx context.Context) int {
	affected, err := shpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (shpu *SanmeiHoikuenPostUpdate) Exec(ctx context.Context) error {
	_, err := shpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shpu *SanmeiHoikuenPostUpdate) ExecX(ctx context.Context) {
	if err := shpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shpu *SanmeiHoikuenPostUpdate) defaults() error {
	if _, ok := shpu.mutation.UpdatedAt(); !ok {
		if sanmeihoikuenpost.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sanmeihoikuenpost.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sanmeihoikuenpost.UpdateDefaultUpdatedAt()
		shpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (shpu *SanmeiHoikuenPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sanmeihoikuenpost.Table, sanmeihoikuenpost.Columns, sqlgraph.NewFieldSpec(sanmeihoikuenpost.FieldID, field.TypeUint32))
	if ps := shpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := shpu.mutation.UpdatedAt(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := shpu.mutation.DeletedAt(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldDeletedAt, field.TypeTime, value)
	}
	if shpu.mutation.DeletedAtCleared() {
		_spec.ClearField(sanmeihoikuenpost.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := shpu.mutation.URL(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldURL, field.TypeString, value)
	}
	if value, ok := shpu.mutation.Title(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldTitle, field.TypeString, value)
	}
	if value, ok := shpu.mutation.Date(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldDate, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, shpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sanmeihoikuenpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	shpu.mutation.done = true
	return n, nil
}

// SanmeiHoikuenPostUpdateOne is the builder for updating a single SanmeiHoikuenPost entity.
type SanmeiHoikuenPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SanmeiHoikuenPostMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetUpdatedAt(t time.Time) *SanmeiHoikuenPostUpdateOne {
	shpuo.mutation.SetUpdatedAt(t)
	return shpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetDeletedAt(t time.Time) *SanmeiHoikuenPostUpdateOne {
	shpuo.mutation.SetDeletedAt(t)
	return shpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetNillableDeletedAt(t *time.Time) *SanmeiHoikuenPostUpdateOne {
	if t != nil {
		shpuo.SetDeletedAt(*t)
	}
	return shpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (shpuo *SanmeiHoikuenPostUpdateOne) ClearDeletedAt() *SanmeiHoikuenPostUpdateOne {
	shpuo.mutation.ClearDeletedAt()
	return shpuo
}

// SetURL sets the "url" field.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetURL(s string) *SanmeiHoikuenPostUpdateOne {
	shpuo.mutation.SetURL(s)
	return shpuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetNillableURL(s *string) *SanmeiHoikuenPostUpdateOne {
	if s != nil {
		shpuo.SetURL(*s)
	}
	return shpuo
}

// SetTitle sets the "title" field.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetTitle(s string) *SanmeiHoikuenPostUpdateOne {
	shpuo.mutation.SetTitle(s)
	return shpuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetNillableTitle(s *string) *SanmeiHoikuenPostUpdateOne {
	if s != nil {
		shpuo.SetTitle(*s)
	}
	return shpuo
}

// SetDate sets the "date" field.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetDate(s string) *SanmeiHoikuenPostUpdateOne {
	shpuo.mutation.SetDate(s)
	return shpuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (shpuo *SanmeiHoikuenPostUpdateOne) SetNillableDate(s *string) *SanmeiHoikuenPostUpdateOne {
	if s != nil {
		shpuo.SetDate(*s)
	}
	return shpuo
}

// Mutation returns the SanmeiHoikuenPostMutation object of the builder.
func (shpuo *SanmeiHoikuenPostUpdateOne) Mutation() *SanmeiHoikuenPostMutation {
	return shpuo.mutation
}

// Where appends a list predicates to the SanmeiHoikuenPostUpdate builder.
func (shpuo *SanmeiHoikuenPostUpdateOne) Where(ps ...predicate.SanmeiHoikuenPost) *SanmeiHoikuenPostUpdateOne {
	shpuo.mutation.Where(ps...)
	return shpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (shpuo *SanmeiHoikuenPostUpdateOne) Select(field string, fields ...string) *SanmeiHoikuenPostUpdateOne {
	shpuo.fields = append([]string{field}, fields...)
	return shpuo
}

// Save executes the query and returns the updated SanmeiHoikuenPost entity.
func (shpuo *SanmeiHoikuenPostUpdateOne) Save(ctx context.Context) (*SanmeiHoikuenPost, error) {
	if err := shpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, shpuo.sqlSave, shpuo.mutation, shpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shpuo *SanmeiHoikuenPostUpdateOne) SaveX(ctx context.Context) *SanmeiHoikuenPost {
	node, err := shpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (shpuo *SanmeiHoikuenPostUpdateOne) Exec(ctx context.Context) error {
	_, err := shpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shpuo *SanmeiHoikuenPostUpdateOne) ExecX(ctx context.Context) {
	if err := shpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shpuo *SanmeiHoikuenPostUpdateOne) defaults() error {
	if _, ok := shpuo.mutation.UpdatedAt(); !ok {
		if sanmeihoikuenpost.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sanmeihoikuenpost.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sanmeihoikuenpost.UpdateDefaultUpdatedAt()
		shpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (shpuo *SanmeiHoikuenPostUpdateOne) sqlSave(ctx context.Context) (_node *SanmeiHoikuenPost, err error) {
	_spec := sqlgraph.NewUpdateSpec(sanmeihoikuenpost.Table, sanmeihoikuenpost.Columns, sqlgraph.NewFieldSpec(sanmeihoikuenpost.FieldID, field.TypeUint32))
	id, ok := shpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SanmeiHoikuenPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := shpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sanmeihoikuenpost.FieldID)
		for _, f := range fields {
			if !sanmeihoikuenpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sanmeihoikuenpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := shpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := shpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := shpuo.mutation.DeletedAt(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldDeletedAt, field.TypeTime, value)
	}
	if shpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(sanmeihoikuenpost.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := shpuo.mutation.URL(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldURL, field.TypeString, value)
	}
	if value, ok := shpuo.mutation.Title(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldTitle, field.TypeString, value)
	}
	if value, ok := shpuo.mutation.Date(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldDate, field.TypeString, value)
	}
	_node = &SanmeiHoikuenPost{config: shpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, shpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sanmeihoikuenpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	shpuo.mutation.done = true
	return _node, nil
}
