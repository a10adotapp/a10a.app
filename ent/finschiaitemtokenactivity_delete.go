// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenactivity"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// FinschiaItemTokenActivityDelete is the builder for deleting a FinschiaItemTokenActivity entity.
type FinschiaItemTokenActivityDelete struct {
	config
	hooks    []Hook
	mutation *FinschiaItemTokenActivityMutation
}

// Where appends a list predicates to the FinschiaItemTokenActivityDelete builder.
func (fitad *FinschiaItemTokenActivityDelete) Where(ps ...predicate.FinschiaItemTokenActivity) *FinschiaItemTokenActivityDelete {
	fitad.mutation.Where(ps...)
	return fitad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fitad *FinschiaItemTokenActivityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fitad.sqlExec, fitad.mutation, fitad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fitad *FinschiaItemTokenActivityDelete) ExecX(ctx context.Context) int {
	n, err := fitad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fitad *FinschiaItemTokenActivityDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(finschiaitemtokenactivity.Table, sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32))
	if ps := fitad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fitad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fitad.mutation.done = true
	return affected, err
}

// FinschiaItemTokenActivityDeleteOne is the builder for deleting a single FinschiaItemTokenActivity entity.
type FinschiaItemTokenActivityDeleteOne struct {
	fitad *FinschiaItemTokenActivityDelete
}

// Where appends a list predicates to the FinschiaItemTokenActivityDelete builder.
func (fitado *FinschiaItemTokenActivityDeleteOne) Where(ps ...predicate.FinschiaItemTokenActivity) *FinschiaItemTokenActivityDeleteOne {
	fitado.fitad.mutation.Where(ps...)
	return fitado
}

// Exec executes the deletion query.
func (fitado *FinschiaItemTokenActivityDeleteOne) Exec(ctx context.Context) error {
	n, err := fitado.fitad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{finschiaitemtokenactivity.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fitado *FinschiaItemTokenActivityDeleteOne) ExecX(ctx context.Context) {
	if err := fitado.Exec(ctx); err != nil {
		panic(err)
	}
}
