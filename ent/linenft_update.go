// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/linenft"
	"github.com/a10adotapp/a10a.app/ent/linenftactivity"
	"github.com/a10adotapp/a10a.app/ent/linenftmillionarthursproperty"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// LINENFTUpdate is the builder for updating LINENFT entities.
type LINENFTUpdate struct {
	config
	hooks    []Hook
	mutation *LINENFTMutation
}

// Where appends a list predicates to the LINENFTUpdate builder.
func (lu *LINENFTUpdate) Where(ps ...predicate.LINENFT) *LINENFTUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LINENFTUpdate) SetUpdatedAt(t time.Time) *LINENFTUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetDeletedAt sets the "deleted_at" field.
func (lu *LINENFTUpdate) SetDeletedAt(t time.Time) *LINENFTUpdate {
	lu.mutation.SetDeletedAt(t)
	return lu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableDeletedAt(t *time.Time) *LINENFTUpdate {
	if t != nil {
		lu.SetDeletedAt(*t)
	}
	return lu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (lu *LINENFTUpdate) ClearDeletedAt() *LINENFTUpdate {
	lu.mutation.ClearDeletedAt()
	return lu
}

// SetLineNftID sets the "line_nft_id" field.
func (lu *LINENFTUpdate) SetLineNftID(u uint32) *LINENFTUpdate {
	lu.mutation.ResetLineNftID()
	lu.mutation.SetLineNftID(u)
	return lu
}

// SetNillableLineNftID sets the "line_nft_id" field if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableLineNftID(u *uint32) *LINENFTUpdate {
	if u != nil {
		lu.SetLineNftID(*u)
	}
	return lu
}

// AddLineNftID adds u to the "line_nft_id" field.
func (lu *LINENFTUpdate) AddLineNftID(u int32) *LINENFTUpdate {
	lu.mutation.AddLineNftID(u)
	return lu
}

// SetContractID sets the "contract_id" field.
func (lu *LINENFTUpdate) SetContractID(s string) *LINENFTUpdate {
	lu.mutation.SetContractID(s)
	return lu
}

// SetNillableContractID sets the "contract_id" field if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableContractID(s *string) *LINENFTUpdate {
	if s != nil {
		lu.SetContractID(*s)
	}
	return lu
}

// SetTokenType sets the "token_type" field.
func (lu *LINENFTUpdate) SetTokenType(s string) *LINENFTUpdate {
	lu.mutation.SetTokenType(s)
	return lu
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableTokenType(s *string) *LINENFTUpdate {
	if s != nil {
		lu.SetTokenType(*s)
	}
	return lu
}

// SetTokenIndex sets the "token_index" field.
func (lu *LINENFTUpdate) SetTokenIndex(s string) *LINENFTUpdate {
	lu.mutation.SetTokenIndex(s)
	return lu
}

// SetNillableTokenIndex sets the "token_index" field if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableTokenIndex(s *string) *LINENFTUpdate {
	if s != nil {
		lu.SetTokenIndex(*s)
	}
	return lu
}

// SetTokenName sets the "token_name" field.
func (lu *LINENFTUpdate) SetTokenName(s string) *LINENFTUpdate {
	lu.mutation.SetTokenName(s)
	return lu
}

// SetNillableTokenName sets the "token_name" field if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableTokenName(s *string) *LINENFTUpdate {
	if s != nil {
		lu.SetTokenName(*s)
	}
	return lu
}

// SetTokenDescription sets the "token_description" field.
func (lu *LINENFTUpdate) SetTokenDescription(s string) *LINENFTUpdate {
	lu.mutation.SetTokenDescription(s)
	return lu
}

// SetNillableTokenDescription sets the "token_description" field if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableTokenDescription(s *string) *LINENFTUpdate {
	if s != nil {
		lu.SetTokenDescription(*s)
	}
	return lu
}

// SetTokenContentURL sets the "token_content_url" field.
func (lu *LINENFTUpdate) SetTokenContentURL(s string) *LINENFTUpdate {
	lu.mutation.SetTokenContentURL(s)
	return lu
}

// SetNillableTokenContentURL sets the "token_content_url" field if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableTokenContentURL(s *string) *LINENFTUpdate {
	if s != nil {
		lu.SetTokenContentURL(*s)
	}
	return lu
}

// AddActivityIDs adds the "activities" edge to the LINENFTActivity entity by IDs.
func (lu *LINENFTUpdate) AddActivityIDs(ids ...uint32) *LINENFTUpdate {
	lu.mutation.AddActivityIDs(ids...)
	return lu
}

// AddActivities adds the "activities" edges to the LINENFTActivity entity.
func (lu *LINENFTUpdate) AddActivities(l ...*LINENFTActivity) *LINENFTUpdate {
	ids := make([]uint32, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddActivityIDs(ids...)
}

// SetMillionArthursPropertiesID sets the "million_arthurs_properties" edge to the LINENFTMillionArthursProperty entity by ID.
func (lu *LINENFTUpdate) SetMillionArthursPropertiesID(id uint32) *LINENFTUpdate {
	lu.mutation.SetMillionArthursPropertiesID(id)
	return lu
}

// SetNillableMillionArthursPropertiesID sets the "million_arthurs_properties" edge to the LINENFTMillionArthursProperty entity by ID if the given value is not nil.
func (lu *LINENFTUpdate) SetNillableMillionArthursPropertiesID(id *uint32) *LINENFTUpdate {
	if id != nil {
		lu = lu.SetMillionArthursPropertiesID(*id)
	}
	return lu
}

// SetMillionArthursProperties sets the "million_arthurs_properties" edge to the LINENFTMillionArthursProperty entity.
func (lu *LINENFTUpdate) SetMillionArthursProperties(l *LINENFTMillionArthursProperty) *LINENFTUpdate {
	return lu.SetMillionArthursPropertiesID(l.ID)
}

// Mutation returns the LINENFTMutation object of the builder.
func (lu *LINENFTUpdate) Mutation() *LINENFTMutation {
	return lu.mutation
}

// ClearActivities clears all "activities" edges to the LINENFTActivity entity.
func (lu *LINENFTUpdate) ClearActivities() *LINENFTUpdate {
	lu.mutation.ClearActivities()
	return lu
}

// RemoveActivityIDs removes the "activities" edge to LINENFTActivity entities by IDs.
func (lu *LINENFTUpdate) RemoveActivityIDs(ids ...uint32) *LINENFTUpdate {
	lu.mutation.RemoveActivityIDs(ids...)
	return lu
}

// RemoveActivities removes "activities" edges to LINENFTActivity entities.
func (lu *LINENFTUpdate) RemoveActivities(l ...*LINENFTActivity) *LINENFTUpdate {
	ids := make([]uint32, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveActivityIDs(ids...)
}

// ClearMillionArthursProperties clears the "million_arthurs_properties" edge to the LINENFTMillionArthursProperty entity.
func (lu *LINENFTUpdate) ClearMillionArthursProperties() *LINENFTUpdate {
	lu.mutation.ClearMillionArthursProperties()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LINENFTUpdate) Save(ctx context.Context) (int, error) {
	if err := lu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LINENFTUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LINENFTUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LINENFTUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LINENFTUpdate) defaults() error {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		if linenft.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized linenft.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := linenft.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (lu *LINENFTUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(linenft.Table, linenft.Columns, sqlgraph.NewFieldSpec(linenft.FieldID, field.TypeUint32))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(linenft.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.DeletedAt(); ok {
		_spec.SetField(linenft.FieldDeletedAt, field.TypeTime, value)
	}
	if lu.mutation.DeletedAtCleared() {
		_spec.ClearField(linenft.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := lu.mutation.LineNftID(); ok {
		_spec.SetField(linenft.FieldLineNftID, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedLineNftID(); ok {
		_spec.AddField(linenft.FieldLineNftID, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.ContractID(); ok {
		_spec.SetField(linenft.FieldContractID, field.TypeString, value)
	}
	if value, ok := lu.mutation.TokenType(); ok {
		_spec.SetField(linenft.FieldTokenType, field.TypeString, value)
	}
	if value, ok := lu.mutation.TokenIndex(); ok {
		_spec.SetField(linenft.FieldTokenIndex, field.TypeString, value)
	}
	if value, ok := lu.mutation.TokenName(); ok {
		_spec.SetField(linenft.FieldTokenName, field.TypeString, value)
	}
	if value, ok := lu.mutation.TokenDescription(); ok {
		_spec.SetField(linenft.FieldTokenDescription, field.TypeString, value)
	}
	if value, ok := lu.mutation.TokenContentURL(); ok {
		_spec.SetField(linenft.FieldTokenContentURL, field.TypeString, value)
	}
	if lu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linenft.ActivitiesTable,
			Columns: []string{linenft.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !lu.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linenft.ActivitiesTable,
			Columns: []string{linenft.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linenft.ActivitiesTable,
			Columns: []string{linenft.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.MillionArthursPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   linenft.MillionArthursPropertiesTable,
			Columns: []string{linenft.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.MillionArthursPropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   linenft.MillionArthursPropertiesTable,
			Columns: []string{linenft.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linenft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LINENFTUpdateOne is the builder for updating a single LINENFT entity.
type LINENFTUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LINENFTMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LINENFTUpdateOne) SetUpdatedAt(t time.Time) *LINENFTUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetDeletedAt sets the "deleted_at" field.
func (luo *LINENFTUpdateOne) SetDeletedAt(t time.Time) *LINENFTUpdateOne {
	luo.mutation.SetDeletedAt(t)
	return luo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableDeletedAt(t *time.Time) *LINENFTUpdateOne {
	if t != nil {
		luo.SetDeletedAt(*t)
	}
	return luo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (luo *LINENFTUpdateOne) ClearDeletedAt() *LINENFTUpdateOne {
	luo.mutation.ClearDeletedAt()
	return luo
}

// SetLineNftID sets the "line_nft_id" field.
func (luo *LINENFTUpdateOne) SetLineNftID(u uint32) *LINENFTUpdateOne {
	luo.mutation.ResetLineNftID()
	luo.mutation.SetLineNftID(u)
	return luo
}

// SetNillableLineNftID sets the "line_nft_id" field if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableLineNftID(u *uint32) *LINENFTUpdateOne {
	if u != nil {
		luo.SetLineNftID(*u)
	}
	return luo
}

// AddLineNftID adds u to the "line_nft_id" field.
func (luo *LINENFTUpdateOne) AddLineNftID(u int32) *LINENFTUpdateOne {
	luo.mutation.AddLineNftID(u)
	return luo
}

// SetContractID sets the "contract_id" field.
func (luo *LINENFTUpdateOne) SetContractID(s string) *LINENFTUpdateOne {
	luo.mutation.SetContractID(s)
	return luo
}

// SetNillableContractID sets the "contract_id" field if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableContractID(s *string) *LINENFTUpdateOne {
	if s != nil {
		luo.SetContractID(*s)
	}
	return luo
}

// SetTokenType sets the "token_type" field.
func (luo *LINENFTUpdateOne) SetTokenType(s string) *LINENFTUpdateOne {
	luo.mutation.SetTokenType(s)
	return luo
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableTokenType(s *string) *LINENFTUpdateOne {
	if s != nil {
		luo.SetTokenType(*s)
	}
	return luo
}

// SetTokenIndex sets the "token_index" field.
func (luo *LINENFTUpdateOne) SetTokenIndex(s string) *LINENFTUpdateOne {
	luo.mutation.SetTokenIndex(s)
	return luo
}

// SetNillableTokenIndex sets the "token_index" field if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableTokenIndex(s *string) *LINENFTUpdateOne {
	if s != nil {
		luo.SetTokenIndex(*s)
	}
	return luo
}

// SetTokenName sets the "token_name" field.
func (luo *LINENFTUpdateOne) SetTokenName(s string) *LINENFTUpdateOne {
	luo.mutation.SetTokenName(s)
	return luo
}

// SetNillableTokenName sets the "token_name" field if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableTokenName(s *string) *LINENFTUpdateOne {
	if s != nil {
		luo.SetTokenName(*s)
	}
	return luo
}

// SetTokenDescription sets the "token_description" field.
func (luo *LINENFTUpdateOne) SetTokenDescription(s string) *LINENFTUpdateOne {
	luo.mutation.SetTokenDescription(s)
	return luo
}

// SetNillableTokenDescription sets the "token_description" field if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableTokenDescription(s *string) *LINENFTUpdateOne {
	if s != nil {
		luo.SetTokenDescription(*s)
	}
	return luo
}

// SetTokenContentURL sets the "token_content_url" field.
func (luo *LINENFTUpdateOne) SetTokenContentURL(s string) *LINENFTUpdateOne {
	luo.mutation.SetTokenContentURL(s)
	return luo
}

// SetNillableTokenContentURL sets the "token_content_url" field if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableTokenContentURL(s *string) *LINENFTUpdateOne {
	if s != nil {
		luo.SetTokenContentURL(*s)
	}
	return luo
}

// AddActivityIDs adds the "activities" edge to the LINENFTActivity entity by IDs.
func (luo *LINENFTUpdateOne) AddActivityIDs(ids ...uint32) *LINENFTUpdateOne {
	luo.mutation.AddActivityIDs(ids...)
	return luo
}

// AddActivities adds the "activities" edges to the LINENFTActivity entity.
func (luo *LINENFTUpdateOne) AddActivities(l ...*LINENFTActivity) *LINENFTUpdateOne {
	ids := make([]uint32, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddActivityIDs(ids...)
}

// SetMillionArthursPropertiesID sets the "million_arthurs_properties" edge to the LINENFTMillionArthursProperty entity by ID.
func (luo *LINENFTUpdateOne) SetMillionArthursPropertiesID(id uint32) *LINENFTUpdateOne {
	luo.mutation.SetMillionArthursPropertiesID(id)
	return luo
}

// SetNillableMillionArthursPropertiesID sets the "million_arthurs_properties" edge to the LINENFTMillionArthursProperty entity by ID if the given value is not nil.
func (luo *LINENFTUpdateOne) SetNillableMillionArthursPropertiesID(id *uint32) *LINENFTUpdateOne {
	if id != nil {
		luo = luo.SetMillionArthursPropertiesID(*id)
	}
	return luo
}

// SetMillionArthursProperties sets the "million_arthurs_properties" edge to the LINENFTMillionArthursProperty entity.
func (luo *LINENFTUpdateOne) SetMillionArthursProperties(l *LINENFTMillionArthursProperty) *LINENFTUpdateOne {
	return luo.SetMillionArthursPropertiesID(l.ID)
}

// Mutation returns the LINENFTMutation object of the builder.
func (luo *LINENFTUpdateOne) Mutation() *LINENFTMutation {
	return luo.mutation
}

// ClearActivities clears all "activities" edges to the LINENFTActivity entity.
func (luo *LINENFTUpdateOne) ClearActivities() *LINENFTUpdateOne {
	luo.mutation.ClearActivities()
	return luo
}

// RemoveActivityIDs removes the "activities" edge to LINENFTActivity entities by IDs.
func (luo *LINENFTUpdateOne) RemoveActivityIDs(ids ...uint32) *LINENFTUpdateOne {
	luo.mutation.RemoveActivityIDs(ids...)
	return luo
}

// RemoveActivities removes "activities" edges to LINENFTActivity entities.
func (luo *LINENFTUpdateOne) RemoveActivities(l ...*LINENFTActivity) *LINENFTUpdateOne {
	ids := make([]uint32, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveActivityIDs(ids...)
}

// ClearMillionArthursProperties clears the "million_arthurs_properties" edge to the LINENFTMillionArthursProperty entity.
func (luo *LINENFTUpdateOne) ClearMillionArthursProperties() *LINENFTUpdateOne {
	luo.mutation.ClearMillionArthursProperties()
	return luo
}

// Where appends a list predicates to the LINENFTUpdate builder.
func (luo *LINENFTUpdateOne) Where(ps ...predicate.LINENFT) *LINENFTUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LINENFTUpdateOne) Select(field string, fields ...string) *LINENFTUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated LINENFT entity.
func (luo *LINENFTUpdateOne) Save(ctx context.Context) (*LINENFT, error) {
	if err := luo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LINENFTUpdateOne) SaveX(ctx context.Context) *LINENFT {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LINENFTUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LINENFTUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LINENFTUpdateOne) defaults() error {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		if linenft.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized linenft.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := linenft.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (luo *LINENFTUpdateOne) sqlSave(ctx context.Context) (_node *LINENFT, err error) {
	_spec := sqlgraph.NewUpdateSpec(linenft.Table, linenft.Columns, sqlgraph.NewFieldSpec(linenft.FieldID, field.TypeUint32))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LINENFT.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linenft.FieldID)
		for _, f := range fields {
			if !linenft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != linenft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(linenft.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.DeletedAt(); ok {
		_spec.SetField(linenft.FieldDeletedAt, field.TypeTime, value)
	}
	if luo.mutation.DeletedAtCleared() {
		_spec.ClearField(linenft.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := luo.mutation.LineNftID(); ok {
		_spec.SetField(linenft.FieldLineNftID, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedLineNftID(); ok {
		_spec.AddField(linenft.FieldLineNftID, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.ContractID(); ok {
		_spec.SetField(linenft.FieldContractID, field.TypeString, value)
	}
	if value, ok := luo.mutation.TokenType(); ok {
		_spec.SetField(linenft.FieldTokenType, field.TypeString, value)
	}
	if value, ok := luo.mutation.TokenIndex(); ok {
		_spec.SetField(linenft.FieldTokenIndex, field.TypeString, value)
	}
	if value, ok := luo.mutation.TokenName(); ok {
		_spec.SetField(linenft.FieldTokenName, field.TypeString, value)
	}
	if value, ok := luo.mutation.TokenDescription(); ok {
		_spec.SetField(linenft.FieldTokenDescription, field.TypeString, value)
	}
	if value, ok := luo.mutation.TokenContentURL(); ok {
		_spec.SetField(linenft.FieldTokenContentURL, field.TypeString, value)
	}
	if luo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linenft.ActivitiesTable,
			Columns: []string{linenft.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !luo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linenft.ActivitiesTable,
			Columns: []string{linenft.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linenft.ActivitiesTable,
			Columns: []string{linenft.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.MillionArthursPropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   linenft.MillionArthursPropertiesTable,
			Columns: []string{linenft.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.MillionArthursPropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   linenft.MillionArthursPropertiesTable,
			Columns: []string{linenft.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenftmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LINENFT{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linenft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
