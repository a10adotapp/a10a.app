// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtoken"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenactivity"
)

// FinschiaItemTokenActivityCreate is the builder for creating a FinschiaItemTokenActivity entity.
type FinschiaItemTokenActivityCreate struct {
	config
	mutation *FinschiaItemTokenActivityMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fitac *FinschiaItemTokenActivityCreate) SetCreatedAt(t time.Time) *FinschiaItemTokenActivityCreate {
	fitac.mutation.SetCreatedAt(t)
	return fitac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fitac *FinschiaItemTokenActivityCreate) SetNillableCreatedAt(t *time.Time) *FinschiaItemTokenActivityCreate {
	if t != nil {
		fitac.SetCreatedAt(*t)
	}
	return fitac
}

// SetUpdatedAt sets the "updated_at" field.
func (fitac *FinschiaItemTokenActivityCreate) SetUpdatedAt(t time.Time) *FinschiaItemTokenActivityCreate {
	fitac.mutation.SetUpdatedAt(t)
	return fitac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fitac *FinschiaItemTokenActivityCreate) SetNillableUpdatedAt(t *time.Time) *FinschiaItemTokenActivityCreate {
	if t != nil {
		fitac.SetUpdatedAt(*t)
	}
	return fitac
}

// SetDeletedAt sets the "deleted_at" field.
func (fitac *FinschiaItemTokenActivityCreate) SetDeletedAt(t time.Time) *FinschiaItemTokenActivityCreate {
	fitac.mutation.SetDeletedAt(t)
	return fitac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fitac *FinschiaItemTokenActivityCreate) SetNillableDeletedAt(t *time.Time) *FinschiaItemTokenActivityCreate {
	if t != nil {
		fitac.SetDeletedAt(*t)
	}
	return fitac
}

// SetTransactionHash sets the "transaction_hash" field.
func (fitac *FinschiaItemTokenActivityCreate) SetTransactionHash(s string) *FinschiaItemTokenActivityCreate {
	fitac.mutation.SetTransactionHash(s)
	return fitac
}

// SetFinschiaItemTokenID sets the "finschia_item_token_id" field.
func (fitac *FinschiaItemTokenActivityCreate) SetFinschiaItemTokenID(u uint32) *FinschiaItemTokenActivityCreate {
	fitac.mutation.SetFinschiaItemTokenID(u)
	return fitac
}

// SetActivityType sets the "activity_type" field.
func (fitac *FinschiaItemTokenActivityCreate) SetActivityType(s string) *FinschiaItemTokenActivityCreate {
	fitac.mutation.SetActivityType(s)
	return fitac
}

// SetActivatedAt sets the "activated_at" field.
func (fitac *FinschiaItemTokenActivityCreate) SetActivatedAt(t time.Time) *FinschiaItemTokenActivityCreate {
	fitac.mutation.SetActivatedAt(t)
	return fitac
}

// SetID sets the "id" field.
func (fitac *FinschiaItemTokenActivityCreate) SetID(u uint32) *FinschiaItemTokenActivityCreate {
	fitac.mutation.SetID(u)
	return fitac
}

// SetFinschiaItemToken sets the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitac *FinschiaItemTokenActivityCreate) SetFinschiaItemToken(f *FinschiaItemToken) *FinschiaItemTokenActivityCreate {
	return fitac.SetFinschiaItemTokenID(f.ID)
}

// Mutation returns the FinschiaItemTokenActivityMutation object of the builder.
func (fitac *FinschiaItemTokenActivityCreate) Mutation() *FinschiaItemTokenActivityMutation {
	return fitac.mutation
}

// Save creates the FinschiaItemTokenActivity in the database.
func (fitac *FinschiaItemTokenActivityCreate) Save(ctx context.Context) (*FinschiaItemTokenActivity, error) {
	if err := fitac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fitac.sqlSave, fitac.mutation, fitac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fitac *FinschiaItemTokenActivityCreate) SaveX(ctx context.Context) *FinschiaItemTokenActivity {
	v, err := fitac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fitac *FinschiaItemTokenActivityCreate) Exec(ctx context.Context) error {
	_, err := fitac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitac *FinschiaItemTokenActivityCreate) ExecX(ctx context.Context) {
	if err := fitac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitac *FinschiaItemTokenActivityCreate) defaults() error {
	if _, ok := fitac.mutation.CreatedAt(); !ok {
		if finschiaitemtokenactivity.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtokenactivity.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtokenactivity.DefaultCreatedAt()
		fitac.mutation.SetCreatedAt(v)
	}
	if _, ok := fitac.mutation.UpdatedAt(); !ok {
		if finschiaitemtokenactivity.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtokenactivity.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtokenactivity.DefaultUpdatedAt()
		fitac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fitac *FinschiaItemTokenActivityCreate) check() error {
	if _, ok := fitac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FinschiaItemTokenActivity.created_at"`)}
	}
	if _, ok := fitac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FinschiaItemTokenActivity.updated_at"`)}
	}
	if _, ok := fitac.mutation.TransactionHash(); !ok {
		return &ValidationError{Name: "transaction_hash", err: errors.New(`ent: missing required field "FinschiaItemTokenActivity.transaction_hash"`)}
	}
	if _, ok := fitac.mutation.FinschiaItemTokenID(); !ok {
		return &ValidationError{Name: "finschia_item_token_id", err: errors.New(`ent: missing required field "FinschiaItemTokenActivity.finschia_item_token_id"`)}
	}
	if _, ok := fitac.mutation.ActivityType(); !ok {
		return &ValidationError{Name: "activity_type", err: errors.New(`ent: missing required field "FinschiaItemTokenActivity.activity_type"`)}
	}
	if _, ok := fitac.mutation.ActivatedAt(); !ok {
		return &ValidationError{Name: "activated_at", err: errors.New(`ent: missing required field "FinschiaItemTokenActivity.activated_at"`)}
	}
	if _, ok := fitac.mutation.FinschiaItemTokenID(); !ok {
		return &ValidationError{Name: "finschia_item_token", err: errors.New(`ent: missing required edge "FinschiaItemTokenActivity.finschia_item_token"`)}
	}
	return nil
}

func (fitac *FinschiaItemTokenActivityCreate) sqlSave(ctx context.Context) (*FinschiaItemTokenActivity, error) {
	if err := fitac.check(); err != nil {
		return nil, err
	}
	_node, _spec := fitac.createSpec()
	if err := sqlgraph.CreateNode(ctx, fitac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	fitac.mutation.id = &_node.ID
	fitac.mutation.done = true
	return _node, nil
}

func (fitac *FinschiaItemTokenActivityCreate) createSpec() (*FinschiaItemTokenActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &FinschiaItemTokenActivity{config: fitac.config}
		_spec = sqlgraph.NewCreateSpec(finschiaitemtokenactivity.Table, sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32))
	)
	if id, ok := fitac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fitac.mutation.CreatedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fitac.mutation.UpdatedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fitac.mutation.DeletedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := fitac.mutation.TransactionHash(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldTransactionHash, field.TypeString, value)
		_node.TransactionHash = value
	}
	if value, ok := fitac.mutation.ActivityType(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldActivityType, field.TypeString, value)
		_node.ActivityType = value
	}
	if value, ok := fitac.mutation.ActivatedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldActivatedAt, field.TypeTime, value)
		_node.ActivatedAt = value
	}
	if nodes := fitac.mutation.FinschiaItemTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenactivity.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenactivity.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FinschiaItemTokenID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FinschiaItemTokenActivityCreateBulk is the builder for creating many FinschiaItemTokenActivity entities in bulk.
type FinschiaItemTokenActivityCreateBulk struct {
	config
	err      error
	builders []*FinschiaItemTokenActivityCreate
}

// Save creates the FinschiaItemTokenActivity entities in the database.
func (fitacb *FinschiaItemTokenActivityCreateBulk) Save(ctx context.Context) ([]*FinschiaItemTokenActivity, error) {
	if fitacb.err != nil {
		return nil, fitacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fitacb.builders))
	nodes := make([]*FinschiaItemTokenActivity, len(fitacb.builders))
	mutators := make([]Mutator, len(fitacb.builders))
	for i := range fitacb.builders {
		func(i int, root context.Context) {
			builder := fitacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FinschiaItemTokenActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fitacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fitacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fitacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fitacb *FinschiaItemTokenActivityCreateBulk) SaveX(ctx context.Context) []*FinschiaItemTokenActivity {
	v, err := fitacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fitacb *FinschiaItemTokenActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := fitacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitacb *FinschiaItemTokenActivityCreateBulk) ExecX(ctx context.Context) {
	if err := fitacb.Exec(ctx); err != nil {
		panic(err)
	}
}
