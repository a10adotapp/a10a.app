// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenft"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenftchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// KusogeeeeeeNFTQuery is the builder for querying KusogeeeeeeNFT entities.
type KusogeeeeeeNFTQuery struct {
	config
	ctx            *QueryContext
	order          []kusogeeeeeenft.OrderOption
	inters         []Interceptor
	predicates     []predicate.KusogeeeeeeNFT
	withChangeLogs *KusogeeeeeeNFTChangeLogQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KusogeeeeeeNFTQuery builder.
func (knq *KusogeeeeeeNFTQuery) Where(ps ...predicate.KusogeeeeeeNFT) *KusogeeeeeeNFTQuery {
	knq.predicates = append(knq.predicates, ps...)
	return knq
}

// Limit the number of records to be returned by this query.
func (knq *KusogeeeeeeNFTQuery) Limit(limit int) *KusogeeeeeeNFTQuery {
	knq.ctx.Limit = &limit
	return knq
}

// Offset to start from.
func (knq *KusogeeeeeeNFTQuery) Offset(offset int) *KusogeeeeeeNFTQuery {
	knq.ctx.Offset = &offset
	return knq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (knq *KusogeeeeeeNFTQuery) Unique(unique bool) *KusogeeeeeeNFTQuery {
	knq.ctx.Unique = &unique
	return knq
}

// Order specifies how the records should be ordered.
func (knq *KusogeeeeeeNFTQuery) Order(o ...kusogeeeeeenft.OrderOption) *KusogeeeeeeNFTQuery {
	knq.order = append(knq.order, o...)
	return knq
}

// QueryChangeLogs chains the current query on the "change_logs" edge.
func (knq *KusogeeeeeeNFTQuery) QueryChangeLogs() *KusogeeeeeeNFTChangeLogQuery {
	query := (&KusogeeeeeeNFTChangeLogClient{config: knq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := knq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := knq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kusogeeeeeenft.Table, kusogeeeeeenft.FieldID, selector),
			sqlgraph.To(kusogeeeeeenftchangelog.Table, kusogeeeeeenftchangelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kusogeeeeeenft.ChangeLogsTable, kusogeeeeeenft.ChangeLogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(knq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KusogeeeeeeNFT entity from the query.
// Returns a *NotFoundError when no KusogeeeeeeNFT was found.
func (knq *KusogeeeeeeNFTQuery) First(ctx context.Context) (*KusogeeeeeeNFT, error) {
	nodes, err := knq.Limit(1).All(setContextOp(ctx, knq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kusogeeeeeenft.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (knq *KusogeeeeeeNFTQuery) FirstX(ctx context.Context) *KusogeeeeeeNFT {
	node, err := knq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KusogeeeeeeNFT ID from the query.
// Returns a *NotFoundError when no KusogeeeeeeNFT ID was found.
func (knq *KusogeeeeeeNFTQuery) FirstID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = knq.Limit(1).IDs(setContextOp(ctx, knq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kusogeeeeeenft.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (knq *KusogeeeeeeNFTQuery) FirstIDX(ctx context.Context) uint32 {
	id, err := knq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KusogeeeeeeNFT entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KusogeeeeeeNFT entity is found.
// Returns a *NotFoundError when no KusogeeeeeeNFT entities are found.
func (knq *KusogeeeeeeNFTQuery) Only(ctx context.Context) (*KusogeeeeeeNFT, error) {
	nodes, err := knq.Limit(2).All(setContextOp(ctx, knq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kusogeeeeeenft.Label}
	default:
		return nil, &NotSingularError{kusogeeeeeenft.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (knq *KusogeeeeeeNFTQuery) OnlyX(ctx context.Context) *KusogeeeeeeNFT {
	node, err := knq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KusogeeeeeeNFT ID in the query.
// Returns a *NotSingularError when more than one KusogeeeeeeNFT ID is found.
// Returns a *NotFoundError when no entities are found.
func (knq *KusogeeeeeeNFTQuery) OnlyID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = knq.Limit(2).IDs(setContextOp(ctx, knq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kusogeeeeeenft.Label}
	default:
		err = &NotSingularError{kusogeeeeeenft.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (knq *KusogeeeeeeNFTQuery) OnlyIDX(ctx context.Context) uint32 {
	id, err := knq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KusogeeeeeeNFTs.
func (knq *KusogeeeeeeNFTQuery) All(ctx context.Context) ([]*KusogeeeeeeNFT, error) {
	ctx = setContextOp(ctx, knq.ctx, "All")
	if err := knq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*KusogeeeeeeNFT, *KusogeeeeeeNFTQuery]()
	return withInterceptors[[]*KusogeeeeeeNFT](ctx, knq, qr, knq.inters)
}

// AllX is like All, but panics if an error occurs.
func (knq *KusogeeeeeeNFTQuery) AllX(ctx context.Context) []*KusogeeeeeeNFT {
	nodes, err := knq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KusogeeeeeeNFT IDs.
func (knq *KusogeeeeeeNFTQuery) IDs(ctx context.Context) (ids []uint32, err error) {
	if knq.ctx.Unique == nil && knq.path != nil {
		knq.Unique(true)
	}
	ctx = setContextOp(ctx, knq.ctx, "IDs")
	if err = knq.Select(kusogeeeeeenft.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (knq *KusogeeeeeeNFTQuery) IDsX(ctx context.Context) []uint32 {
	ids, err := knq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (knq *KusogeeeeeeNFTQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, knq.ctx, "Count")
	if err := knq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, knq, querierCount[*KusogeeeeeeNFTQuery](), knq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (knq *KusogeeeeeeNFTQuery) CountX(ctx context.Context) int {
	count, err := knq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (knq *KusogeeeeeeNFTQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, knq.ctx, "Exist")
	switch _, err := knq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (knq *KusogeeeeeeNFTQuery) ExistX(ctx context.Context) bool {
	exist, err := knq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KusogeeeeeeNFTQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (knq *KusogeeeeeeNFTQuery) Clone() *KusogeeeeeeNFTQuery {
	if knq == nil {
		return nil
	}
	return &KusogeeeeeeNFTQuery{
		config:         knq.config,
		ctx:            knq.ctx.Clone(),
		order:          append([]kusogeeeeeenft.OrderOption{}, knq.order...),
		inters:         append([]Interceptor{}, knq.inters...),
		predicates:     append([]predicate.KusogeeeeeeNFT{}, knq.predicates...),
		withChangeLogs: knq.withChangeLogs.Clone(),
		// clone intermediate query.
		sql:  knq.sql.Clone(),
		path: knq.path,
	}
}

// WithChangeLogs tells the query-builder to eager-load the nodes that are connected to
// the "change_logs" edge. The optional arguments are used to configure the query builder of the edge.
func (knq *KusogeeeeeeNFTQuery) WithChangeLogs(opts ...func(*KusogeeeeeeNFTChangeLogQuery)) *KusogeeeeeeNFTQuery {
	query := (&KusogeeeeeeNFTChangeLogClient{config: knq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	knq.withChangeLogs = query
	return knq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KusogeeeeeeNFT.Query().
//		GroupBy(kusogeeeeeenft.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (knq *KusogeeeeeeNFTQuery) GroupBy(field string, fields ...string) *KusogeeeeeeNFTGroupBy {
	knq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &KusogeeeeeeNFTGroupBy{build: knq}
	grbuild.flds = &knq.ctx.Fields
	grbuild.label = kusogeeeeeenft.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//	}
//
//	client.KusogeeeeeeNFT.Query().
//		Select(kusogeeeeeenft.FieldCreatedAt).
//		Scan(ctx, &v)
func (knq *KusogeeeeeeNFTQuery) Select(fields ...string) *KusogeeeeeeNFTSelect {
	knq.ctx.Fields = append(knq.ctx.Fields, fields...)
	sbuild := &KusogeeeeeeNFTSelect{KusogeeeeeeNFTQuery: knq}
	sbuild.label = kusogeeeeeenft.Label
	sbuild.flds, sbuild.scan = &knq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a KusogeeeeeeNFTSelect configured with the given aggregations.
func (knq *KusogeeeeeeNFTQuery) Aggregate(fns ...AggregateFunc) *KusogeeeeeeNFTSelect {
	return knq.Select().Aggregate(fns...)
}

func (knq *KusogeeeeeeNFTQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range knq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, knq); err != nil {
				return err
			}
		}
	}
	for _, f := range knq.ctx.Fields {
		if !kusogeeeeeenft.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if knq.path != nil {
		prev, err := knq.path(ctx)
		if err != nil {
			return err
		}
		knq.sql = prev
	}
	return nil
}

func (knq *KusogeeeeeeNFTQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KusogeeeeeeNFT, error) {
	var (
		nodes       = []*KusogeeeeeeNFT{}
		_spec       = knq.querySpec()
		loadedTypes = [1]bool{
			knq.withChangeLogs != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KusogeeeeeeNFT).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KusogeeeeeeNFT{config: knq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, knq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := knq.withChangeLogs; query != nil {
		if err := knq.loadChangeLogs(ctx, query, nodes,
			func(n *KusogeeeeeeNFT) { n.Edges.ChangeLogs = []*KusogeeeeeeNFTChangeLog{} },
			func(n *KusogeeeeeeNFT, e *KusogeeeeeeNFTChangeLog) {
				n.Edges.ChangeLogs = append(n.Edges.ChangeLogs, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (knq *KusogeeeeeeNFTQuery) loadChangeLogs(ctx context.Context, query *KusogeeeeeeNFTChangeLogQuery, nodes []*KusogeeeeeeNFT, init func(*KusogeeeeeeNFT), assign func(*KusogeeeeeeNFT, *KusogeeeeeeNFTChangeLog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint32]*KusogeeeeeeNFT)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(kusogeeeeeenftchangelog.FieldKusogeeeeeeNftID)
	}
	query.Where(predicate.KusogeeeeeeNFTChangeLog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(kusogeeeeeenft.ChangeLogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.KusogeeeeeeNftID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kusogeeeeee_nft_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (knq *KusogeeeeeeNFTQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := knq.querySpec()
	_spec.Node.Columns = knq.ctx.Fields
	if len(knq.ctx.Fields) > 0 {
		_spec.Unique = knq.ctx.Unique != nil && *knq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, knq.driver, _spec)
}

func (knq *KusogeeeeeeNFTQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(kusogeeeeeenft.Table, kusogeeeeeenft.Columns, sqlgraph.NewFieldSpec(kusogeeeeeenft.FieldID, field.TypeUint32))
	_spec.From = knq.sql
	if unique := knq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if knq.path != nil {
		_spec.Unique = true
	}
	if fields := knq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kusogeeeeeenft.FieldID)
		for i := range fields {
			if fields[i] != kusogeeeeeenft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := knq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := knq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := knq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := knq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (knq *KusogeeeeeeNFTQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(knq.driver.Dialect())
	t1 := builder.Table(kusogeeeeeenft.Table)
	columns := knq.ctx.Fields
	if len(columns) == 0 {
		columns = kusogeeeeeenft.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if knq.sql != nil {
		selector = knq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if knq.ctx.Unique != nil && *knq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range knq.predicates {
		p(selector)
	}
	for _, p := range knq.order {
		p(selector)
	}
	if offset := knq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := knq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KusogeeeeeeNFTGroupBy is the group-by builder for KusogeeeeeeNFT entities.
type KusogeeeeeeNFTGroupBy struct {
	selector
	build *KusogeeeeeeNFTQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kngb *KusogeeeeeeNFTGroupBy) Aggregate(fns ...AggregateFunc) *KusogeeeeeeNFTGroupBy {
	kngb.fns = append(kngb.fns, fns...)
	return kngb
}

// Scan applies the selector query and scans the result into the given value.
func (kngb *KusogeeeeeeNFTGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kngb.build.ctx, "GroupBy")
	if err := kngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KusogeeeeeeNFTQuery, *KusogeeeeeeNFTGroupBy](ctx, kngb.build, kngb, kngb.build.inters, v)
}

func (kngb *KusogeeeeeeNFTGroupBy) sqlScan(ctx context.Context, root *KusogeeeeeeNFTQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(kngb.fns))
	for _, fn := range kngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*kngb.flds)+len(kngb.fns))
		for _, f := range *kngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*kngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// KusogeeeeeeNFTSelect is the builder for selecting fields of KusogeeeeeeNFT entities.
type KusogeeeeeeNFTSelect struct {
	*KusogeeeeeeNFTQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (kns *KusogeeeeeeNFTSelect) Aggregate(fns ...AggregateFunc) *KusogeeeeeeNFTSelect {
	kns.fns = append(kns.fns, fns...)
	return kns
}

// Scan applies the selector query and scans the result into the given value.
func (kns *KusogeeeeeeNFTSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kns.ctx, "Select")
	if err := kns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KusogeeeeeeNFTQuery, *KusogeeeeeeNFTSelect](ctx, kns.KusogeeeeeeNFTQuery, kns, kns.inters, v)
}

func (kns *KusogeeeeeeNFTSelect) sqlScan(ctx context.Context, root *KusogeeeeeeNFTQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(kns.fns))
	for _, fn := range kns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*kns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
