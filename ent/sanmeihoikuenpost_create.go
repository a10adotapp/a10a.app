// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/sanmeihoikuenpost"
)

// SanmeiHoikuenPostCreate is the builder for creating a SanmeiHoikuenPost entity.
type SanmeiHoikuenPostCreate struct {
	config
	mutation *SanmeiHoikuenPostMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (shpc *SanmeiHoikuenPostCreate) SetCreatedAt(t time.Time) *SanmeiHoikuenPostCreate {
	shpc.mutation.SetCreatedAt(t)
	return shpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shpc *SanmeiHoikuenPostCreate) SetNillableCreatedAt(t *time.Time) *SanmeiHoikuenPostCreate {
	if t != nil {
		shpc.SetCreatedAt(*t)
	}
	return shpc
}

// SetUpdatedAt sets the "updated_at" field.
func (shpc *SanmeiHoikuenPostCreate) SetUpdatedAt(t time.Time) *SanmeiHoikuenPostCreate {
	shpc.mutation.SetUpdatedAt(t)
	return shpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shpc *SanmeiHoikuenPostCreate) SetNillableUpdatedAt(t *time.Time) *SanmeiHoikuenPostCreate {
	if t != nil {
		shpc.SetUpdatedAt(*t)
	}
	return shpc
}

// SetDeletedAt sets the "deleted_at" field.
func (shpc *SanmeiHoikuenPostCreate) SetDeletedAt(t time.Time) *SanmeiHoikuenPostCreate {
	shpc.mutation.SetDeletedAt(t)
	return shpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shpc *SanmeiHoikuenPostCreate) SetNillableDeletedAt(t *time.Time) *SanmeiHoikuenPostCreate {
	if t != nil {
		shpc.SetDeletedAt(*t)
	}
	return shpc
}

// SetURL sets the "url" field.
func (shpc *SanmeiHoikuenPostCreate) SetURL(s string) *SanmeiHoikuenPostCreate {
	shpc.mutation.SetURL(s)
	return shpc
}

// SetTitle sets the "title" field.
func (shpc *SanmeiHoikuenPostCreate) SetTitle(s string) *SanmeiHoikuenPostCreate {
	shpc.mutation.SetTitle(s)
	return shpc
}

// SetDate sets the "date" field.
func (shpc *SanmeiHoikuenPostCreate) SetDate(s string) *SanmeiHoikuenPostCreate {
	shpc.mutation.SetDate(s)
	return shpc
}

// SetID sets the "id" field.
func (shpc *SanmeiHoikuenPostCreate) SetID(u uint32) *SanmeiHoikuenPostCreate {
	shpc.mutation.SetID(u)
	return shpc
}

// Mutation returns the SanmeiHoikuenPostMutation object of the builder.
func (shpc *SanmeiHoikuenPostCreate) Mutation() *SanmeiHoikuenPostMutation {
	return shpc.mutation
}

// Save creates the SanmeiHoikuenPost in the database.
func (shpc *SanmeiHoikuenPostCreate) Save(ctx context.Context) (*SanmeiHoikuenPost, error) {
	if err := shpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, shpc.sqlSave, shpc.mutation, shpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shpc *SanmeiHoikuenPostCreate) SaveX(ctx context.Context) *SanmeiHoikuenPost {
	v, err := shpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shpc *SanmeiHoikuenPostCreate) Exec(ctx context.Context) error {
	_, err := shpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shpc *SanmeiHoikuenPostCreate) ExecX(ctx context.Context) {
	if err := shpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shpc *SanmeiHoikuenPostCreate) defaults() error {
	if _, ok := shpc.mutation.CreatedAt(); !ok {
		if sanmeihoikuenpost.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized sanmeihoikuenpost.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := sanmeihoikuenpost.DefaultCreatedAt()
		shpc.mutation.SetCreatedAt(v)
	}
	if _, ok := shpc.mutation.UpdatedAt(); !ok {
		if sanmeihoikuenpost.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sanmeihoikuenpost.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sanmeihoikuenpost.DefaultUpdatedAt()
		shpc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (shpc *SanmeiHoikuenPostCreate) check() error {
	if _, ok := shpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SanmeiHoikuenPost.created_at"`)}
	}
	if _, ok := shpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SanmeiHoikuenPost.updated_at"`)}
	}
	if _, ok := shpc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "SanmeiHoikuenPost.url"`)}
	}
	if _, ok := shpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SanmeiHoikuenPost.title"`)}
	}
	if _, ok := shpc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "SanmeiHoikuenPost.date"`)}
	}
	return nil
}

func (shpc *SanmeiHoikuenPostCreate) sqlSave(ctx context.Context) (*SanmeiHoikuenPost, error) {
	if err := shpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	shpc.mutation.id = &_node.ID
	shpc.mutation.done = true
	return _node, nil
}

func (shpc *SanmeiHoikuenPostCreate) createSpec() (*SanmeiHoikuenPost, *sqlgraph.CreateSpec) {
	var (
		_node = &SanmeiHoikuenPost{config: shpc.config}
		_spec = sqlgraph.NewCreateSpec(sanmeihoikuenpost.Table, sqlgraph.NewFieldSpec(sanmeihoikuenpost.FieldID, field.TypeUint32))
	)
	if id, ok := shpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := shpc.mutation.CreatedAt(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shpc.mutation.UpdatedAt(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := shpc.mutation.DeletedAt(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := shpc.mutation.URL(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := shpc.mutation.Title(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := shpc.mutation.Date(); ok {
		_spec.SetField(sanmeihoikuenpost.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	return _node, _spec
}

// SanmeiHoikuenPostCreateBulk is the builder for creating many SanmeiHoikuenPost entities in bulk.
type SanmeiHoikuenPostCreateBulk struct {
	config
	err      error
	builders []*SanmeiHoikuenPostCreate
}

// Save creates the SanmeiHoikuenPost entities in the database.
func (shpcb *SanmeiHoikuenPostCreateBulk) Save(ctx context.Context) ([]*SanmeiHoikuenPost, error) {
	if shpcb.err != nil {
		return nil, shpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(shpcb.builders))
	nodes := make([]*SanmeiHoikuenPost, len(shpcb.builders))
	mutators := make([]Mutator, len(shpcb.builders))
	for i := range shpcb.builders {
		func(i int, root context.Context) {
			builder := shpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SanmeiHoikuenPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shpcb *SanmeiHoikuenPostCreateBulk) SaveX(ctx context.Context) []*SanmeiHoikuenPost {
	v, err := shpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shpcb *SanmeiHoikuenPostCreateBulk) Exec(ctx context.Context) error {
	_, err := shpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shpcb *SanmeiHoikuenPostCreateBulk) ExecX(ctx context.Context) {
	if err := shpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
