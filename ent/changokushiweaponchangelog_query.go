// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/changokushiweapon"
	"github.com/a10adotapp/a10a.app/ent/changokushiweaponchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ChangokushiWeaponChangeLogQuery is the builder for querying ChangokushiWeaponChangeLog entities.
type ChangokushiWeaponChangeLogQuery struct {
	config
	ctx                   *QueryContext
	order                 []changokushiweaponchangelog.OrderOption
	inters                []Interceptor
	predicates            []predicate.ChangokushiWeaponChangeLog
	withChangokushiWeapon *ChangokushiWeaponQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChangokushiWeaponChangeLogQuery builder.
func (cwclq *ChangokushiWeaponChangeLogQuery) Where(ps ...predicate.ChangokushiWeaponChangeLog) *ChangokushiWeaponChangeLogQuery {
	cwclq.predicates = append(cwclq.predicates, ps...)
	return cwclq
}

// Limit the number of records to be returned by this query.
func (cwclq *ChangokushiWeaponChangeLogQuery) Limit(limit int) *ChangokushiWeaponChangeLogQuery {
	cwclq.ctx.Limit = &limit
	return cwclq
}

// Offset to start from.
func (cwclq *ChangokushiWeaponChangeLogQuery) Offset(offset int) *ChangokushiWeaponChangeLogQuery {
	cwclq.ctx.Offset = &offset
	return cwclq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cwclq *ChangokushiWeaponChangeLogQuery) Unique(unique bool) *ChangokushiWeaponChangeLogQuery {
	cwclq.ctx.Unique = &unique
	return cwclq
}

// Order specifies how the records should be ordered.
func (cwclq *ChangokushiWeaponChangeLogQuery) Order(o ...changokushiweaponchangelog.OrderOption) *ChangokushiWeaponChangeLogQuery {
	cwclq.order = append(cwclq.order, o...)
	return cwclq
}

// QueryChangokushiWeapon chains the current query on the "changokushi_weapon" edge.
func (cwclq *ChangokushiWeaponChangeLogQuery) QueryChangokushiWeapon() *ChangokushiWeaponQuery {
	query := (&ChangokushiWeaponClient{config: cwclq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cwclq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cwclq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(changokushiweaponchangelog.Table, changokushiweaponchangelog.FieldID, selector),
			sqlgraph.To(changokushiweapon.Table, changokushiweapon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, changokushiweaponchangelog.ChangokushiWeaponTable, changokushiweaponchangelog.ChangokushiWeaponColumn),
		)
		fromU = sqlgraph.SetNeighbors(cwclq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChangokushiWeaponChangeLog entity from the query.
// Returns a *NotFoundError when no ChangokushiWeaponChangeLog was found.
func (cwclq *ChangokushiWeaponChangeLogQuery) First(ctx context.Context) (*ChangokushiWeaponChangeLog, error) {
	nodes, err := cwclq.Limit(1).All(setContextOp(ctx, cwclq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{changokushiweaponchangelog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cwclq *ChangokushiWeaponChangeLogQuery) FirstX(ctx context.Context) *ChangokushiWeaponChangeLog {
	node, err := cwclq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChangokushiWeaponChangeLog ID from the query.
// Returns a *NotFoundError when no ChangokushiWeaponChangeLog ID was found.
func (cwclq *ChangokushiWeaponChangeLogQuery) FirstID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = cwclq.Limit(1).IDs(setContextOp(ctx, cwclq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{changokushiweaponchangelog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cwclq *ChangokushiWeaponChangeLogQuery) FirstIDX(ctx context.Context) uint32 {
	id, err := cwclq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChangokushiWeaponChangeLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChangokushiWeaponChangeLog entity is found.
// Returns a *NotFoundError when no ChangokushiWeaponChangeLog entities are found.
func (cwclq *ChangokushiWeaponChangeLogQuery) Only(ctx context.Context) (*ChangokushiWeaponChangeLog, error) {
	nodes, err := cwclq.Limit(2).All(setContextOp(ctx, cwclq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{changokushiweaponchangelog.Label}
	default:
		return nil, &NotSingularError{changokushiweaponchangelog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cwclq *ChangokushiWeaponChangeLogQuery) OnlyX(ctx context.Context) *ChangokushiWeaponChangeLog {
	node, err := cwclq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChangokushiWeaponChangeLog ID in the query.
// Returns a *NotSingularError when more than one ChangokushiWeaponChangeLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (cwclq *ChangokushiWeaponChangeLogQuery) OnlyID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = cwclq.Limit(2).IDs(setContextOp(ctx, cwclq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{changokushiweaponchangelog.Label}
	default:
		err = &NotSingularError{changokushiweaponchangelog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cwclq *ChangokushiWeaponChangeLogQuery) OnlyIDX(ctx context.Context) uint32 {
	id, err := cwclq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChangokushiWeaponChangeLogs.
func (cwclq *ChangokushiWeaponChangeLogQuery) All(ctx context.Context) ([]*ChangokushiWeaponChangeLog, error) {
	ctx = setContextOp(ctx, cwclq.ctx, "All")
	if err := cwclq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ChangokushiWeaponChangeLog, *ChangokushiWeaponChangeLogQuery]()
	return withInterceptors[[]*ChangokushiWeaponChangeLog](ctx, cwclq, qr, cwclq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cwclq *ChangokushiWeaponChangeLogQuery) AllX(ctx context.Context) []*ChangokushiWeaponChangeLog {
	nodes, err := cwclq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChangokushiWeaponChangeLog IDs.
func (cwclq *ChangokushiWeaponChangeLogQuery) IDs(ctx context.Context) (ids []uint32, err error) {
	if cwclq.ctx.Unique == nil && cwclq.path != nil {
		cwclq.Unique(true)
	}
	ctx = setContextOp(ctx, cwclq.ctx, "IDs")
	if err = cwclq.Select(changokushiweaponchangelog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cwclq *ChangokushiWeaponChangeLogQuery) IDsX(ctx context.Context) []uint32 {
	ids, err := cwclq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cwclq *ChangokushiWeaponChangeLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cwclq.ctx, "Count")
	if err := cwclq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cwclq, querierCount[*ChangokushiWeaponChangeLogQuery](), cwclq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cwclq *ChangokushiWeaponChangeLogQuery) CountX(ctx context.Context) int {
	count, err := cwclq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cwclq *ChangokushiWeaponChangeLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cwclq.ctx, "Exist")
	switch _, err := cwclq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cwclq *ChangokushiWeaponChangeLogQuery) ExistX(ctx context.Context) bool {
	exist, err := cwclq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChangokushiWeaponChangeLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cwclq *ChangokushiWeaponChangeLogQuery) Clone() *ChangokushiWeaponChangeLogQuery {
	if cwclq == nil {
		return nil
	}
	return &ChangokushiWeaponChangeLogQuery{
		config:                cwclq.config,
		ctx:                   cwclq.ctx.Clone(),
		order:                 append([]changokushiweaponchangelog.OrderOption{}, cwclq.order...),
		inters:                append([]Interceptor{}, cwclq.inters...),
		predicates:            append([]predicate.ChangokushiWeaponChangeLog{}, cwclq.predicates...),
		withChangokushiWeapon: cwclq.withChangokushiWeapon.Clone(),
		// clone intermediate query.
		sql:  cwclq.sql.Clone(),
		path: cwclq.path,
	}
}

// WithChangokushiWeapon tells the query-builder to eager-load the nodes that are connected to
// the "changokushi_weapon" edge. The optional arguments are used to configure the query builder of the edge.
func (cwclq *ChangokushiWeaponChangeLogQuery) WithChangokushiWeapon(opts ...func(*ChangokushiWeaponQuery)) *ChangokushiWeaponChangeLogQuery {
	query := (&ChangokushiWeaponClient{config: cwclq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cwclq.withChangokushiWeapon = query
	return cwclq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChangokushiWeaponChangeLog.Query().
//		GroupBy(changokushiweaponchangelog.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cwclq *ChangokushiWeaponChangeLogQuery) GroupBy(field string, fields ...string) *ChangokushiWeaponChangeLogGroupBy {
	cwclq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ChangokushiWeaponChangeLogGroupBy{build: cwclq}
	grbuild.flds = &cwclq.ctx.Fields
	grbuild.label = changokushiweaponchangelog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//	}
//
//	client.ChangokushiWeaponChangeLog.Query().
//		Select(changokushiweaponchangelog.FieldCreatedAt).
//		Scan(ctx, &v)
func (cwclq *ChangokushiWeaponChangeLogQuery) Select(fields ...string) *ChangokushiWeaponChangeLogSelect {
	cwclq.ctx.Fields = append(cwclq.ctx.Fields, fields...)
	sbuild := &ChangokushiWeaponChangeLogSelect{ChangokushiWeaponChangeLogQuery: cwclq}
	sbuild.label = changokushiweaponchangelog.Label
	sbuild.flds, sbuild.scan = &cwclq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ChangokushiWeaponChangeLogSelect configured with the given aggregations.
func (cwclq *ChangokushiWeaponChangeLogQuery) Aggregate(fns ...AggregateFunc) *ChangokushiWeaponChangeLogSelect {
	return cwclq.Select().Aggregate(fns...)
}

func (cwclq *ChangokushiWeaponChangeLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cwclq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cwclq); err != nil {
				return err
			}
		}
	}
	for _, f := range cwclq.ctx.Fields {
		if !changokushiweaponchangelog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cwclq.path != nil {
		prev, err := cwclq.path(ctx)
		if err != nil {
			return err
		}
		cwclq.sql = prev
	}
	return nil
}

func (cwclq *ChangokushiWeaponChangeLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChangokushiWeaponChangeLog, error) {
	var (
		nodes       = []*ChangokushiWeaponChangeLog{}
		_spec       = cwclq.querySpec()
		loadedTypes = [1]bool{
			cwclq.withChangokushiWeapon != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ChangokushiWeaponChangeLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ChangokushiWeaponChangeLog{config: cwclq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cwclq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cwclq.withChangokushiWeapon; query != nil {
		if err := cwclq.loadChangokushiWeapon(ctx, query, nodes, nil,
			func(n *ChangokushiWeaponChangeLog, e *ChangokushiWeapon) { n.Edges.ChangokushiWeapon = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cwclq *ChangokushiWeaponChangeLogQuery) loadChangokushiWeapon(ctx context.Context, query *ChangokushiWeaponQuery, nodes []*ChangokushiWeaponChangeLog, init func(*ChangokushiWeaponChangeLog), assign func(*ChangokushiWeaponChangeLog, *ChangokushiWeapon)) error {
	ids := make([]uint32, 0, len(nodes))
	nodeids := make(map[uint32][]*ChangokushiWeaponChangeLog)
	for i := range nodes {
		fk := nodes[i].ChangokushiWeaponID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(changokushiweapon.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "changokushi_weapon_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cwclq *ChangokushiWeaponChangeLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cwclq.querySpec()
	_spec.Node.Columns = cwclq.ctx.Fields
	if len(cwclq.ctx.Fields) > 0 {
		_spec.Unique = cwclq.ctx.Unique != nil && *cwclq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cwclq.driver, _spec)
}

func (cwclq *ChangokushiWeaponChangeLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(changokushiweaponchangelog.Table, changokushiweaponchangelog.Columns, sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32))
	_spec.From = cwclq.sql
	if unique := cwclq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cwclq.path != nil {
		_spec.Unique = true
	}
	if fields := cwclq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, changokushiweaponchangelog.FieldID)
		for i := range fields {
			if fields[i] != changokushiweaponchangelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cwclq.withChangokushiWeapon != nil {
			_spec.Node.AddColumnOnce(changokushiweaponchangelog.FieldChangokushiWeaponID)
		}
	}
	if ps := cwclq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cwclq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cwclq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cwclq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cwclq *ChangokushiWeaponChangeLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cwclq.driver.Dialect())
	t1 := builder.Table(changokushiweaponchangelog.Table)
	columns := cwclq.ctx.Fields
	if len(columns) == 0 {
		columns = changokushiweaponchangelog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cwclq.sql != nil {
		selector = cwclq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cwclq.ctx.Unique != nil && *cwclq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cwclq.predicates {
		p(selector)
	}
	for _, p := range cwclq.order {
		p(selector)
	}
	if offset := cwclq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cwclq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ChangokushiWeaponChangeLogGroupBy is the group-by builder for ChangokushiWeaponChangeLog entities.
type ChangokushiWeaponChangeLogGroupBy struct {
	selector
	build *ChangokushiWeaponChangeLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cwclgb *ChangokushiWeaponChangeLogGroupBy) Aggregate(fns ...AggregateFunc) *ChangokushiWeaponChangeLogGroupBy {
	cwclgb.fns = append(cwclgb.fns, fns...)
	return cwclgb
}

// Scan applies the selector query and scans the result into the given value.
func (cwclgb *ChangokushiWeaponChangeLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cwclgb.build.ctx, "GroupBy")
	if err := cwclgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChangokushiWeaponChangeLogQuery, *ChangokushiWeaponChangeLogGroupBy](ctx, cwclgb.build, cwclgb, cwclgb.build.inters, v)
}

func (cwclgb *ChangokushiWeaponChangeLogGroupBy) sqlScan(ctx context.Context, root *ChangokushiWeaponChangeLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cwclgb.fns))
	for _, fn := range cwclgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cwclgb.flds)+len(cwclgb.fns))
		for _, f := range *cwclgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cwclgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cwclgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ChangokushiWeaponChangeLogSelect is the builder for selecting fields of ChangokushiWeaponChangeLog entities.
type ChangokushiWeaponChangeLogSelect struct {
	*ChangokushiWeaponChangeLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cwcls *ChangokushiWeaponChangeLogSelect) Aggregate(fns ...AggregateFunc) *ChangokushiWeaponChangeLogSelect {
	cwcls.fns = append(cwcls.fns, fns...)
	return cwcls
}

// Scan applies the selector query and scans the result into the given value.
func (cwcls *ChangokushiWeaponChangeLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cwcls.ctx, "Select")
	if err := cwcls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChangokushiWeaponChangeLogQuery, *ChangokushiWeaponChangeLogSelect](ctx, cwcls.ChangokushiWeaponChangeLogQuery, cwcls, cwcls.inters, v)
}

func (cwcls *ChangokushiWeaponChangeLogSelect) sqlScan(ctx context.Context, root *ChangokushiWeaponChangeLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cwcls.fns))
	for _, fn := range cwcls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cwcls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cwcls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
