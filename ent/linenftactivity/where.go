// Code generated by ent, DO NOT EDIT.

package linenftactivity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldDeletedAt, v))
}

// ActivityType applies equality check predicate on the "activity_type" field. It's identical to ActivityTypeEQ.
func ActivityType(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldActivityType, v))
}

// SaleID applies equality check predicate on the "sale_id" field. It's identical to SaleIDEQ.
func SaleID(v uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldSaleID, v))
}

// SaleType applies equality check predicate on the "sale_type" field. It's identical to SaleTypeEQ.
func SaleType(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldSaleType, v))
}

// CurrencyType applies equality check predicate on the "currency_type" field. It's identical to CurrencyTypeEQ.
func CurrencyType(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldCurrencyType, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldPrice, v))
}

// ActivatedAt applies equality check predicate on the "activated_at" field. It's identical to ActivatedAtEQ.
func ActivatedAt(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldActivatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotNull(FieldDeletedAt))
}

// ActivityTypeEQ applies the EQ predicate on the "activity_type" field.
func ActivityTypeEQ(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldActivityType, v))
}

// ActivityTypeNEQ applies the NEQ predicate on the "activity_type" field.
func ActivityTypeNEQ(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldActivityType, v))
}

// ActivityTypeIn applies the In predicate on the "activity_type" field.
func ActivityTypeIn(vs ...string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldActivityType, vs...))
}

// ActivityTypeNotIn applies the NotIn predicate on the "activity_type" field.
func ActivityTypeNotIn(vs ...string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldActivityType, vs...))
}

// ActivityTypeGT applies the GT predicate on the "activity_type" field.
func ActivityTypeGT(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldActivityType, v))
}

// ActivityTypeGTE applies the GTE predicate on the "activity_type" field.
func ActivityTypeGTE(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldActivityType, v))
}

// ActivityTypeLT applies the LT predicate on the "activity_type" field.
func ActivityTypeLT(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldActivityType, v))
}

// ActivityTypeLTE applies the LTE predicate on the "activity_type" field.
func ActivityTypeLTE(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldActivityType, v))
}

// ActivityTypeContains applies the Contains predicate on the "activity_type" field.
func ActivityTypeContains(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldContains(FieldActivityType, v))
}

// ActivityTypeHasPrefix applies the HasPrefix predicate on the "activity_type" field.
func ActivityTypeHasPrefix(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldHasPrefix(FieldActivityType, v))
}

// ActivityTypeHasSuffix applies the HasSuffix predicate on the "activity_type" field.
func ActivityTypeHasSuffix(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldHasSuffix(FieldActivityType, v))
}

// ActivityTypeEqualFold applies the EqualFold predicate on the "activity_type" field.
func ActivityTypeEqualFold(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEqualFold(FieldActivityType, v))
}

// ActivityTypeContainsFold applies the ContainsFold predicate on the "activity_type" field.
func ActivityTypeContainsFold(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldContainsFold(FieldActivityType, v))
}

// SaleIDEQ applies the EQ predicate on the "sale_id" field.
func SaleIDEQ(v uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldSaleID, v))
}

// SaleIDNEQ applies the NEQ predicate on the "sale_id" field.
func SaleIDNEQ(v uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldSaleID, v))
}

// SaleIDIn applies the In predicate on the "sale_id" field.
func SaleIDIn(vs ...uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldSaleID, vs...))
}

// SaleIDNotIn applies the NotIn predicate on the "sale_id" field.
func SaleIDNotIn(vs ...uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldSaleID, vs...))
}

// SaleIDGT applies the GT predicate on the "sale_id" field.
func SaleIDGT(v uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldSaleID, v))
}

// SaleIDGTE applies the GTE predicate on the "sale_id" field.
func SaleIDGTE(v uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldSaleID, v))
}

// SaleIDLT applies the LT predicate on the "sale_id" field.
func SaleIDLT(v uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldSaleID, v))
}

// SaleIDLTE applies the LTE predicate on the "sale_id" field.
func SaleIDLTE(v uint32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldSaleID, v))
}

// SaleTypeEQ applies the EQ predicate on the "sale_type" field.
func SaleTypeEQ(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldSaleType, v))
}

// SaleTypeNEQ applies the NEQ predicate on the "sale_type" field.
func SaleTypeNEQ(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldSaleType, v))
}

// SaleTypeIn applies the In predicate on the "sale_type" field.
func SaleTypeIn(vs ...string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldSaleType, vs...))
}

// SaleTypeNotIn applies the NotIn predicate on the "sale_type" field.
func SaleTypeNotIn(vs ...string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldSaleType, vs...))
}

// SaleTypeGT applies the GT predicate on the "sale_type" field.
func SaleTypeGT(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldSaleType, v))
}

// SaleTypeGTE applies the GTE predicate on the "sale_type" field.
func SaleTypeGTE(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldSaleType, v))
}

// SaleTypeLT applies the LT predicate on the "sale_type" field.
func SaleTypeLT(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldSaleType, v))
}

// SaleTypeLTE applies the LTE predicate on the "sale_type" field.
func SaleTypeLTE(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldSaleType, v))
}

// SaleTypeContains applies the Contains predicate on the "sale_type" field.
func SaleTypeContains(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldContains(FieldSaleType, v))
}

// SaleTypeHasPrefix applies the HasPrefix predicate on the "sale_type" field.
func SaleTypeHasPrefix(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldHasPrefix(FieldSaleType, v))
}

// SaleTypeHasSuffix applies the HasSuffix predicate on the "sale_type" field.
func SaleTypeHasSuffix(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldHasSuffix(FieldSaleType, v))
}

// SaleTypeEqualFold applies the EqualFold predicate on the "sale_type" field.
func SaleTypeEqualFold(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEqualFold(FieldSaleType, v))
}

// SaleTypeContainsFold applies the ContainsFold predicate on the "sale_type" field.
func SaleTypeContainsFold(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldContainsFold(FieldSaleType, v))
}

// CurrencyTypeEQ applies the EQ predicate on the "currency_type" field.
func CurrencyTypeEQ(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldCurrencyType, v))
}

// CurrencyTypeNEQ applies the NEQ predicate on the "currency_type" field.
func CurrencyTypeNEQ(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldCurrencyType, v))
}

// CurrencyTypeIn applies the In predicate on the "currency_type" field.
func CurrencyTypeIn(vs ...string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldCurrencyType, vs...))
}

// CurrencyTypeNotIn applies the NotIn predicate on the "currency_type" field.
func CurrencyTypeNotIn(vs ...string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldCurrencyType, vs...))
}

// CurrencyTypeGT applies the GT predicate on the "currency_type" field.
func CurrencyTypeGT(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldCurrencyType, v))
}

// CurrencyTypeGTE applies the GTE predicate on the "currency_type" field.
func CurrencyTypeGTE(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldCurrencyType, v))
}

// CurrencyTypeLT applies the LT predicate on the "currency_type" field.
func CurrencyTypeLT(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldCurrencyType, v))
}

// CurrencyTypeLTE applies the LTE predicate on the "currency_type" field.
func CurrencyTypeLTE(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldCurrencyType, v))
}

// CurrencyTypeContains applies the Contains predicate on the "currency_type" field.
func CurrencyTypeContains(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldContains(FieldCurrencyType, v))
}

// CurrencyTypeHasPrefix applies the HasPrefix predicate on the "currency_type" field.
func CurrencyTypeHasPrefix(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldHasPrefix(FieldCurrencyType, v))
}

// CurrencyTypeHasSuffix applies the HasSuffix predicate on the "currency_type" field.
func CurrencyTypeHasSuffix(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldHasSuffix(FieldCurrencyType, v))
}

// CurrencyTypeEqualFold applies the EqualFold predicate on the "currency_type" field.
func CurrencyTypeEqualFold(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEqualFold(FieldCurrencyType, v))
}

// CurrencyTypeContainsFold applies the ContainsFold predicate on the "currency_type" field.
func CurrencyTypeContainsFold(v string) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldContainsFold(FieldCurrencyType, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float32) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldPrice, v))
}

// ActivatedAtEQ applies the EQ predicate on the "activated_at" field.
func ActivatedAtEQ(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldEQ(FieldActivatedAt, v))
}

// ActivatedAtNEQ applies the NEQ predicate on the "activated_at" field.
func ActivatedAtNEQ(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNEQ(FieldActivatedAt, v))
}

// ActivatedAtIn applies the In predicate on the "activated_at" field.
func ActivatedAtIn(vs ...time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldIn(FieldActivatedAt, vs...))
}

// ActivatedAtNotIn applies the NotIn predicate on the "activated_at" field.
func ActivatedAtNotIn(vs ...time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldNotIn(FieldActivatedAt, vs...))
}

// ActivatedAtGT applies the GT predicate on the "activated_at" field.
func ActivatedAtGT(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGT(FieldActivatedAt, v))
}

// ActivatedAtGTE applies the GTE predicate on the "activated_at" field.
func ActivatedAtGTE(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldGTE(FieldActivatedAt, v))
}

// ActivatedAtLT applies the LT predicate on the "activated_at" field.
func ActivatedAtLT(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLT(FieldActivatedAt, v))
}

// ActivatedAtLTE applies the LTE predicate on the "activated_at" field.
func ActivatedAtLTE(v time.Time) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.FieldLTE(FieldActivatedAt, v))
}

// HasLineNft applies the HasEdge predicate on the "line_nft" edge.
func HasLineNft() predicate.LINENFTActivity {
	return predicate.LINENFTActivity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LineNftTable, LineNftColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLineNftWith applies the HasEdge predicate on the "line_nft" edge with a given conditions (other predicates).
func HasLineNftWith(preds ...predicate.LINENFT) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(func(s *sql.Selector) {
		step := newLineNftStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LINENFTActivity) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LINENFTActivity) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LINENFTActivity) predicate.LINENFTActivity {
	return predicate.LINENFTActivity(sql.NotPredicates(p))
}
