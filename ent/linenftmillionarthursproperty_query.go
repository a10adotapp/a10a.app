// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/linenft"
	"github.com/a10adotapp/a10a.app/ent/linenftmillionarthursproperty"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// LINENFTMillionArthursPropertyQuery is the builder for querying LINENFTMillionArthursProperty entities.
type LINENFTMillionArthursPropertyQuery struct {
	config
	ctx         *QueryContext
	order       []linenftmillionarthursproperty.OrderOption
	inters      []Interceptor
	predicates  []predicate.LINENFTMillionArthursProperty
	withLineNft *LINENFTQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LINENFTMillionArthursPropertyQuery builder.
func (lmapq *LINENFTMillionArthursPropertyQuery) Where(ps ...predicate.LINENFTMillionArthursProperty) *LINENFTMillionArthursPropertyQuery {
	lmapq.predicates = append(lmapq.predicates, ps...)
	return lmapq
}

// Limit the number of records to be returned by this query.
func (lmapq *LINENFTMillionArthursPropertyQuery) Limit(limit int) *LINENFTMillionArthursPropertyQuery {
	lmapq.ctx.Limit = &limit
	return lmapq
}

// Offset to start from.
func (lmapq *LINENFTMillionArthursPropertyQuery) Offset(offset int) *LINENFTMillionArthursPropertyQuery {
	lmapq.ctx.Offset = &offset
	return lmapq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lmapq *LINENFTMillionArthursPropertyQuery) Unique(unique bool) *LINENFTMillionArthursPropertyQuery {
	lmapq.ctx.Unique = &unique
	return lmapq
}

// Order specifies how the records should be ordered.
func (lmapq *LINENFTMillionArthursPropertyQuery) Order(o ...linenftmillionarthursproperty.OrderOption) *LINENFTMillionArthursPropertyQuery {
	lmapq.order = append(lmapq.order, o...)
	return lmapq
}

// QueryLineNft chains the current query on the "line_nft" edge.
func (lmapq *LINENFTMillionArthursPropertyQuery) QueryLineNft() *LINENFTQuery {
	query := (&LINENFTClient{config: lmapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lmapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lmapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(linenftmillionarthursproperty.Table, linenftmillionarthursproperty.FieldID, selector),
			sqlgraph.To(linenft.Table, linenft.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, linenftmillionarthursproperty.LineNftTable, linenftmillionarthursproperty.LineNftColumn),
		)
		fromU = sqlgraph.SetNeighbors(lmapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LINENFTMillionArthursProperty entity from the query.
// Returns a *NotFoundError when no LINENFTMillionArthursProperty was found.
func (lmapq *LINENFTMillionArthursPropertyQuery) First(ctx context.Context) (*LINENFTMillionArthursProperty, error) {
	nodes, err := lmapq.Limit(1).All(setContextOp(ctx, lmapq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{linenftmillionarthursproperty.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lmapq *LINENFTMillionArthursPropertyQuery) FirstX(ctx context.Context) *LINENFTMillionArthursProperty {
	node, err := lmapq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LINENFTMillionArthursProperty ID from the query.
// Returns a *NotFoundError when no LINENFTMillionArthursProperty ID was found.
func (lmapq *LINENFTMillionArthursPropertyQuery) FirstID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = lmapq.Limit(1).IDs(setContextOp(ctx, lmapq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{linenftmillionarthursproperty.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lmapq *LINENFTMillionArthursPropertyQuery) FirstIDX(ctx context.Context) uint32 {
	id, err := lmapq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LINENFTMillionArthursProperty entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LINENFTMillionArthursProperty entity is found.
// Returns a *NotFoundError when no LINENFTMillionArthursProperty entities are found.
func (lmapq *LINENFTMillionArthursPropertyQuery) Only(ctx context.Context) (*LINENFTMillionArthursProperty, error) {
	nodes, err := lmapq.Limit(2).All(setContextOp(ctx, lmapq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{linenftmillionarthursproperty.Label}
	default:
		return nil, &NotSingularError{linenftmillionarthursproperty.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lmapq *LINENFTMillionArthursPropertyQuery) OnlyX(ctx context.Context) *LINENFTMillionArthursProperty {
	node, err := lmapq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LINENFTMillionArthursProperty ID in the query.
// Returns a *NotSingularError when more than one LINENFTMillionArthursProperty ID is found.
// Returns a *NotFoundError when no entities are found.
func (lmapq *LINENFTMillionArthursPropertyQuery) OnlyID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = lmapq.Limit(2).IDs(setContextOp(ctx, lmapq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{linenftmillionarthursproperty.Label}
	default:
		err = &NotSingularError{linenftmillionarthursproperty.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lmapq *LINENFTMillionArthursPropertyQuery) OnlyIDX(ctx context.Context) uint32 {
	id, err := lmapq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LINENFTMillionArthursProperties.
func (lmapq *LINENFTMillionArthursPropertyQuery) All(ctx context.Context) ([]*LINENFTMillionArthursProperty, error) {
	ctx = setContextOp(ctx, lmapq.ctx, "All")
	if err := lmapq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LINENFTMillionArthursProperty, *LINENFTMillionArthursPropertyQuery]()
	return withInterceptors[[]*LINENFTMillionArthursProperty](ctx, lmapq, qr, lmapq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lmapq *LINENFTMillionArthursPropertyQuery) AllX(ctx context.Context) []*LINENFTMillionArthursProperty {
	nodes, err := lmapq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LINENFTMillionArthursProperty IDs.
func (lmapq *LINENFTMillionArthursPropertyQuery) IDs(ctx context.Context) (ids []uint32, err error) {
	if lmapq.ctx.Unique == nil && lmapq.path != nil {
		lmapq.Unique(true)
	}
	ctx = setContextOp(ctx, lmapq.ctx, "IDs")
	if err = lmapq.Select(linenftmillionarthursproperty.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lmapq *LINENFTMillionArthursPropertyQuery) IDsX(ctx context.Context) []uint32 {
	ids, err := lmapq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lmapq *LINENFTMillionArthursPropertyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lmapq.ctx, "Count")
	if err := lmapq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lmapq, querierCount[*LINENFTMillionArthursPropertyQuery](), lmapq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lmapq *LINENFTMillionArthursPropertyQuery) CountX(ctx context.Context) int {
	count, err := lmapq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lmapq *LINENFTMillionArthursPropertyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lmapq.ctx, "Exist")
	switch _, err := lmapq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lmapq *LINENFTMillionArthursPropertyQuery) ExistX(ctx context.Context) bool {
	exist, err := lmapq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LINENFTMillionArthursPropertyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lmapq *LINENFTMillionArthursPropertyQuery) Clone() *LINENFTMillionArthursPropertyQuery {
	if lmapq == nil {
		return nil
	}
	return &LINENFTMillionArthursPropertyQuery{
		config:      lmapq.config,
		ctx:         lmapq.ctx.Clone(),
		order:       append([]linenftmillionarthursproperty.OrderOption{}, lmapq.order...),
		inters:      append([]Interceptor{}, lmapq.inters...),
		predicates:  append([]predicate.LINENFTMillionArthursProperty{}, lmapq.predicates...),
		withLineNft: lmapq.withLineNft.Clone(),
		// clone intermediate query.
		sql:  lmapq.sql.Clone(),
		path: lmapq.path,
	}
}

// WithLineNft tells the query-builder to eager-load the nodes that are connected to
// the "line_nft" edge. The optional arguments are used to configure the query builder of the edge.
func (lmapq *LINENFTMillionArthursPropertyQuery) WithLineNft(opts ...func(*LINENFTQuery)) *LINENFTMillionArthursPropertyQuery {
	query := (&LINENFTClient{config: lmapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lmapq.withLineNft = query
	return lmapq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LINENFTMillionArthursProperty.Query().
//		GroupBy(linenftmillionarthursproperty.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lmapq *LINENFTMillionArthursPropertyQuery) GroupBy(field string, fields ...string) *LINENFTMillionArthursPropertyGroupBy {
	lmapq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LINENFTMillionArthursPropertyGroupBy{build: lmapq}
	grbuild.flds = &lmapq.ctx.Fields
	grbuild.label = linenftmillionarthursproperty.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//	}
//
//	client.LINENFTMillionArthursProperty.Query().
//		Select(linenftmillionarthursproperty.FieldCreatedAt).
//		Scan(ctx, &v)
func (lmapq *LINENFTMillionArthursPropertyQuery) Select(fields ...string) *LINENFTMillionArthursPropertySelect {
	lmapq.ctx.Fields = append(lmapq.ctx.Fields, fields...)
	sbuild := &LINENFTMillionArthursPropertySelect{LINENFTMillionArthursPropertyQuery: lmapq}
	sbuild.label = linenftmillionarthursproperty.Label
	sbuild.flds, sbuild.scan = &lmapq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LINENFTMillionArthursPropertySelect configured with the given aggregations.
func (lmapq *LINENFTMillionArthursPropertyQuery) Aggregate(fns ...AggregateFunc) *LINENFTMillionArthursPropertySelect {
	return lmapq.Select().Aggregate(fns...)
}

func (lmapq *LINENFTMillionArthursPropertyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lmapq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lmapq); err != nil {
				return err
			}
		}
	}
	for _, f := range lmapq.ctx.Fields {
		if !linenftmillionarthursproperty.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lmapq.path != nil {
		prev, err := lmapq.path(ctx)
		if err != nil {
			return err
		}
		lmapq.sql = prev
	}
	return nil
}

func (lmapq *LINENFTMillionArthursPropertyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LINENFTMillionArthursProperty, error) {
	var (
		nodes       = []*LINENFTMillionArthursProperty{}
		withFKs     = lmapq.withFKs
		_spec       = lmapq.querySpec()
		loadedTypes = [1]bool{
			lmapq.withLineNft != nil,
		}
	)
	if lmapq.withLineNft != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, linenftmillionarthursproperty.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LINENFTMillionArthursProperty).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LINENFTMillionArthursProperty{config: lmapq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lmapq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lmapq.withLineNft; query != nil {
		if err := lmapq.loadLineNft(ctx, query, nodes, nil,
			func(n *LINENFTMillionArthursProperty, e *LINENFT) { n.Edges.LineNft = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lmapq *LINENFTMillionArthursPropertyQuery) loadLineNft(ctx context.Context, query *LINENFTQuery, nodes []*LINENFTMillionArthursProperty, init func(*LINENFTMillionArthursProperty), assign func(*LINENFTMillionArthursProperty, *LINENFT)) error {
	ids := make([]uint32, 0, len(nodes))
	nodeids := make(map[uint32][]*LINENFTMillionArthursProperty)
	for i := range nodes {
		if nodes[i].linenft_million_arthurs_property == nil {
			continue
		}
		fk := *nodes[i].linenft_million_arthurs_property
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(linenft.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "linenft_million_arthurs_property" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lmapq *LINENFTMillionArthursPropertyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lmapq.querySpec()
	_spec.Node.Columns = lmapq.ctx.Fields
	if len(lmapq.ctx.Fields) > 0 {
		_spec.Unique = lmapq.ctx.Unique != nil && *lmapq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lmapq.driver, _spec)
}

func (lmapq *LINENFTMillionArthursPropertyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(linenftmillionarthursproperty.Table, linenftmillionarthursproperty.Columns, sqlgraph.NewFieldSpec(linenftmillionarthursproperty.FieldID, field.TypeUint32))
	_spec.From = lmapq.sql
	if unique := lmapq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lmapq.path != nil {
		_spec.Unique = true
	}
	if fields := lmapq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linenftmillionarthursproperty.FieldID)
		for i := range fields {
			if fields[i] != linenftmillionarthursproperty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lmapq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lmapq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lmapq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lmapq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lmapq *LINENFTMillionArthursPropertyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lmapq.driver.Dialect())
	t1 := builder.Table(linenftmillionarthursproperty.Table)
	columns := lmapq.ctx.Fields
	if len(columns) == 0 {
		columns = linenftmillionarthursproperty.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lmapq.sql != nil {
		selector = lmapq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lmapq.ctx.Unique != nil && *lmapq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lmapq.predicates {
		p(selector)
	}
	for _, p := range lmapq.order {
		p(selector)
	}
	if offset := lmapq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lmapq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LINENFTMillionArthursPropertyGroupBy is the group-by builder for LINENFTMillionArthursProperty entities.
type LINENFTMillionArthursPropertyGroupBy struct {
	selector
	build *LINENFTMillionArthursPropertyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lmapgb *LINENFTMillionArthursPropertyGroupBy) Aggregate(fns ...AggregateFunc) *LINENFTMillionArthursPropertyGroupBy {
	lmapgb.fns = append(lmapgb.fns, fns...)
	return lmapgb
}

// Scan applies the selector query and scans the result into the given value.
func (lmapgb *LINENFTMillionArthursPropertyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lmapgb.build.ctx, "GroupBy")
	if err := lmapgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LINENFTMillionArthursPropertyQuery, *LINENFTMillionArthursPropertyGroupBy](ctx, lmapgb.build, lmapgb, lmapgb.build.inters, v)
}

func (lmapgb *LINENFTMillionArthursPropertyGroupBy) sqlScan(ctx context.Context, root *LINENFTMillionArthursPropertyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lmapgb.fns))
	for _, fn := range lmapgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lmapgb.flds)+len(lmapgb.fns))
		for _, f := range *lmapgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lmapgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lmapgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LINENFTMillionArthursPropertySelect is the builder for selecting fields of LINENFTMillionArthursProperty entities.
type LINENFTMillionArthursPropertySelect struct {
	*LINENFTMillionArthursPropertyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lmaps *LINENFTMillionArthursPropertySelect) Aggregate(fns ...AggregateFunc) *LINENFTMillionArthursPropertySelect {
	lmaps.fns = append(lmaps.fns, fns...)
	return lmaps
}

// Scan applies the selector query and scans the result into the given value.
func (lmaps *LINENFTMillionArthursPropertySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lmaps.ctx, "Select")
	if err := lmaps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LINENFTMillionArthursPropertyQuery, *LINENFTMillionArthursPropertySelect](ctx, lmaps.LINENFTMillionArthursPropertyQuery, lmaps, lmaps.inters, v)
}

func (lmaps *LINENFTMillionArthursPropertySelect) sqlScan(ctx context.Context, root *LINENFTMillionArthursPropertyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lmaps.fns))
	for _, fn := range lmaps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lmaps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lmaps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
