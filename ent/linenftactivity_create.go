// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/linenft"
	"github.com/a10adotapp/a10a.app/ent/linenftactivity"
)

// LINENFTActivityCreate is the builder for creating a LINENFTActivity entity.
type LINENFTActivityCreate struct {
	config
	mutation *LINENFTActivityMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lac *LINENFTActivityCreate) SetCreatedAt(t time.Time) *LINENFTActivityCreate {
	lac.mutation.SetCreatedAt(t)
	return lac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lac *LINENFTActivityCreate) SetNillableCreatedAt(t *time.Time) *LINENFTActivityCreate {
	if t != nil {
		lac.SetCreatedAt(*t)
	}
	return lac
}

// SetUpdatedAt sets the "updated_at" field.
func (lac *LINENFTActivityCreate) SetUpdatedAt(t time.Time) *LINENFTActivityCreate {
	lac.mutation.SetUpdatedAt(t)
	return lac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lac *LINENFTActivityCreate) SetNillableUpdatedAt(t *time.Time) *LINENFTActivityCreate {
	if t != nil {
		lac.SetUpdatedAt(*t)
	}
	return lac
}

// SetDeletedAt sets the "deleted_at" field.
func (lac *LINENFTActivityCreate) SetDeletedAt(t time.Time) *LINENFTActivityCreate {
	lac.mutation.SetDeletedAt(t)
	return lac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lac *LINENFTActivityCreate) SetNillableDeletedAt(t *time.Time) *LINENFTActivityCreate {
	if t != nil {
		lac.SetDeletedAt(*t)
	}
	return lac
}

// SetActivityType sets the "activity_type" field.
func (lac *LINENFTActivityCreate) SetActivityType(s string) *LINENFTActivityCreate {
	lac.mutation.SetActivityType(s)
	return lac
}

// SetSaleID sets the "sale_id" field.
func (lac *LINENFTActivityCreate) SetSaleID(u uint32) *LINENFTActivityCreate {
	lac.mutation.SetSaleID(u)
	return lac
}

// SetSaleType sets the "sale_type" field.
func (lac *LINENFTActivityCreate) SetSaleType(s string) *LINENFTActivityCreate {
	lac.mutation.SetSaleType(s)
	return lac
}

// SetCurrencyType sets the "currency_type" field.
func (lac *LINENFTActivityCreate) SetCurrencyType(s string) *LINENFTActivityCreate {
	lac.mutation.SetCurrencyType(s)
	return lac
}

// SetPrice sets the "price" field.
func (lac *LINENFTActivityCreate) SetPrice(f float32) *LINENFTActivityCreate {
	lac.mutation.SetPrice(f)
	return lac
}

// SetActivatedAt sets the "activated_at" field.
func (lac *LINENFTActivityCreate) SetActivatedAt(t time.Time) *LINENFTActivityCreate {
	lac.mutation.SetActivatedAt(t)
	return lac
}

// SetID sets the "id" field.
func (lac *LINENFTActivityCreate) SetID(u uint32) *LINENFTActivityCreate {
	lac.mutation.SetID(u)
	return lac
}

// SetLineNftID sets the "line_nft" edge to the LINENFT entity by ID.
func (lac *LINENFTActivityCreate) SetLineNftID(id uint32) *LINENFTActivityCreate {
	lac.mutation.SetLineNftID(id)
	return lac
}

// SetLineNft sets the "line_nft" edge to the LINENFT entity.
func (lac *LINENFTActivityCreate) SetLineNft(l *LINENFT) *LINENFTActivityCreate {
	return lac.SetLineNftID(l.ID)
}

// Mutation returns the LINENFTActivityMutation object of the builder.
func (lac *LINENFTActivityCreate) Mutation() *LINENFTActivityMutation {
	return lac.mutation
}

// Save creates the LINENFTActivity in the database.
func (lac *LINENFTActivityCreate) Save(ctx context.Context) (*LINENFTActivity, error) {
	if err := lac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, lac.sqlSave, lac.mutation, lac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lac *LINENFTActivityCreate) SaveX(ctx context.Context) *LINENFTActivity {
	v, err := lac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lac *LINENFTActivityCreate) Exec(ctx context.Context) error {
	_, err := lac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lac *LINENFTActivityCreate) ExecX(ctx context.Context) {
	if err := lac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lac *LINENFTActivityCreate) defaults() error {
	if _, ok := lac.mutation.CreatedAt(); !ok {
		if linenftactivity.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized linenftactivity.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := linenftactivity.DefaultCreatedAt()
		lac.mutation.SetCreatedAt(v)
	}
	if _, ok := lac.mutation.UpdatedAt(); !ok {
		if linenftactivity.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized linenftactivity.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := linenftactivity.DefaultUpdatedAt()
		lac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lac *LINENFTActivityCreate) check() error {
	if _, ok := lac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LINENFTActivity.created_at"`)}
	}
	if _, ok := lac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LINENFTActivity.updated_at"`)}
	}
	if _, ok := lac.mutation.ActivityType(); !ok {
		return &ValidationError{Name: "activity_type", err: errors.New(`ent: missing required field "LINENFTActivity.activity_type"`)}
	}
	if _, ok := lac.mutation.SaleID(); !ok {
		return &ValidationError{Name: "sale_id", err: errors.New(`ent: missing required field "LINENFTActivity.sale_id"`)}
	}
	if _, ok := lac.mutation.SaleType(); !ok {
		return &ValidationError{Name: "sale_type", err: errors.New(`ent: missing required field "LINENFTActivity.sale_type"`)}
	}
	if _, ok := lac.mutation.CurrencyType(); !ok {
		return &ValidationError{Name: "currency_type", err: errors.New(`ent: missing required field "LINENFTActivity.currency_type"`)}
	}
	if _, ok := lac.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "LINENFTActivity.price"`)}
	}
	if _, ok := lac.mutation.ActivatedAt(); !ok {
		return &ValidationError{Name: "activated_at", err: errors.New(`ent: missing required field "LINENFTActivity.activated_at"`)}
	}
	if _, ok := lac.mutation.LineNftID(); !ok {
		return &ValidationError{Name: "line_nft", err: errors.New(`ent: missing required edge "LINENFTActivity.line_nft"`)}
	}
	return nil
}

func (lac *LINENFTActivityCreate) sqlSave(ctx context.Context) (*LINENFTActivity, error) {
	if err := lac.check(); err != nil {
		return nil, err
	}
	_node, _spec := lac.createSpec()
	if err := sqlgraph.CreateNode(ctx, lac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	lac.mutation.id = &_node.ID
	lac.mutation.done = true
	return _node, nil
}

func (lac *LINENFTActivityCreate) createSpec() (*LINENFTActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &LINENFTActivity{config: lac.config}
		_spec = sqlgraph.NewCreateSpec(linenftactivity.Table, sqlgraph.NewFieldSpec(linenftactivity.FieldID, field.TypeUint32))
	)
	if id, ok := lac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lac.mutation.CreatedAt(); ok {
		_spec.SetField(linenftactivity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lac.mutation.UpdatedAt(); ok {
		_spec.SetField(linenftactivity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lac.mutation.DeletedAt(); ok {
		_spec.SetField(linenftactivity.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := lac.mutation.ActivityType(); ok {
		_spec.SetField(linenftactivity.FieldActivityType, field.TypeString, value)
		_node.ActivityType = value
	}
	if value, ok := lac.mutation.SaleID(); ok {
		_spec.SetField(linenftactivity.FieldSaleID, field.TypeUint32, value)
		_node.SaleID = value
	}
	if value, ok := lac.mutation.SaleType(); ok {
		_spec.SetField(linenftactivity.FieldSaleType, field.TypeString, value)
		_node.SaleType = value
	}
	if value, ok := lac.mutation.CurrencyType(); ok {
		_spec.SetField(linenftactivity.FieldCurrencyType, field.TypeString, value)
		_node.CurrencyType = value
	}
	if value, ok := lac.mutation.Price(); ok {
		_spec.SetField(linenftactivity.FieldPrice, field.TypeFloat32, value)
		_node.Price = value
	}
	if value, ok := lac.mutation.ActivatedAt(); ok {
		_spec.SetField(linenftactivity.FieldActivatedAt, field.TypeTime, value)
		_node.ActivatedAt = value
	}
	if nodes := lac.mutation.LineNftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   linenftactivity.LineNftTable,
			Columns: []string{linenftactivity.LineNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenft.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.linenft_activities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LINENFTActivityCreateBulk is the builder for creating many LINENFTActivity entities in bulk.
type LINENFTActivityCreateBulk struct {
	config
	err      error
	builders []*LINENFTActivityCreate
}

// Save creates the LINENFTActivity entities in the database.
func (lacb *LINENFTActivityCreateBulk) Save(ctx context.Context) ([]*LINENFTActivity, error) {
	if lacb.err != nil {
		return nil, lacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lacb.builders))
	nodes := make([]*LINENFTActivity, len(lacb.builders))
	mutators := make([]Mutator, len(lacb.builders))
	for i := range lacb.builders {
		func(i int, root context.Context) {
			builder := lacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LINENFTActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lacb *LINENFTActivityCreateBulk) SaveX(ctx context.Context) []*LINENFTActivity {
	v, err := lacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lacb *LINENFTActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := lacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lacb *LINENFTActivityCreateBulk) ExecX(ctx context.Context) {
	if err := lacb.Exec(ctx); err != nil {
		panic(err)
	}
}
