// Code generated by ent, DO NOT EDIT.

package kusogeeeeeenftchangelog

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the kusogeeeeeenftchangelog type in the database.
	Label = "kusogeeeeee_nft_change_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldKusogeeeeeeNftID holds the string denoting the kusogeeeeee_nft_id field in the database.
	FieldKusogeeeeeeNftID = "kusogeeeeee_nft_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeKusogeeeeeeNft holds the string denoting the kusogeeeeee_nft edge name in mutations.
	EdgeKusogeeeeeeNft = "kusogeeeeee_nft"
	// Table holds the table name of the kusogeeeeeenftchangelog in the database.
	Table = "kusogeeeeee_nft_change_logs"
	// KusogeeeeeeNftTable is the table that holds the kusogeeeeee_nft relation/edge.
	KusogeeeeeeNftTable = "kusogeeeeee_nft_change_logs"
	// KusogeeeeeeNftInverseTable is the table name for the KusogeeeeeeNFT entity.
	// It exists in this package in order to avoid circular dependency with the "kusogeeeeeenft" package.
	KusogeeeeeeNftInverseTable = "kusogeeeeee_nfts"
	// KusogeeeeeeNftColumn is the table column denoting the kusogeeeeee_nft relation/edge.
	KusogeeeeeeNftColumn = "kusogeeeeee_nft_id"
)

// Columns holds all SQL columns for kusogeeeeeenftchangelog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldKusogeeeeeeNftID,
	FieldStatus,
	FieldPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/a10adotapp/a10a.app/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the KusogeeeeeeNFTChangeLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByKusogeeeeeeNftID orders the results by the kusogeeeeee_nft_id field.
func ByKusogeeeeeeNftID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKusogeeeeeeNftID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByKusogeeeeeeNftField orders the results by kusogeeeeee_nft field.
func ByKusogeeeeeeNftField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKusogeeeeeeNftStep(), sql.OrderByField(field, opts...))
	}
}
func newKusogeeeeeeNftStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KusogeeeeeeNftInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, KusogeeeeeeNftTable, KusogeeeeeeNftColumn),
	)
}
