// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/changokushiweaponchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ChangokushiWeaponChangeLogDelete is the builder for deleting a ChangokushiWeaponChangeLog entity.
type ChangokushiWeaponChangeLogDelete struct {
	config
	hooks    []Hook
	mutation *ChangokushiWeaponChangeLogMutation
}

// Where appends a list predicates to the ChangokushiWeaponChangeLogDelete builder.
func (cwcld *ChangokushiWeaponChangeLogDelete) Where(ps ...predicate.ChangokushiWeaponChangeLog) *ChangokushiWeaponChangeLogDelete {
	cwcld.mutation.Where(ps...)
	return cwcld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cwcld *ChangokushiWeaponChangeLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cwcld.sqlExec, cwcld.mutation, cwcld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cwcld *ChangokushiWeaponChangeLogDelete) ExecX(ctx context.Context) int {
	n, err := cwcld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cwcld *ChangokushiWeaponChangeLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(changokushiweaponchangelog.Table, sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32))
	if ps := cwcld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cwcld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cwcld.mutation.done = true
	return affected, err
}

// ChangokushiWeaponChangeLogDeleteOne is the builder for deleting a single ChangokushiWeaponChangeLog entity.
type ChangokushiWeaponChangeLogDeleteOne struct {
	cwcld *ChangokushiWeaponChangeLogDelete
}

// Where appends a list predicates to the ChangokushiWeaponChangeLogDelete builder.
func (cwcldo *ChangokushiWeaponChangeLogDeleteOne) Where(ps ...predicate.ChangokushiWeaponChangeLog) *ChangokushiWeaponChangeLogDeleteOne {
	cwcldo.cwcld.mutation.Where(ps...)
	return cwcldo
}

// Exec executes the deletion query.
func (cwcldo *ChangokushiWeaponChangeLogDeleteOne) Exec(ctx context.Context) error {
	n, err := cwcldo.cwcld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{changokushiweaponchangelog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cwcldo *ChangokushiWeaponChangeLogDeleteOne) ExecX(ctx context.Context) {
	if err := cwcldo.Exec(ctx); err != nil {
		panic(err)
	}
}
