// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtoken"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// FinschiaItemTokenDelete is the builder for deleting a FinschiaItemToken entity.
type FinschiaItemTokenDelete struct {
	config
	hooks    []Hook
	mutation *FinschiaItemTokenMutation
}

// Where appends a list predicates to the FinschiaItemTokenDelete builder.
func (fitd *FinschiaItemTokenDelete) Where(ps ...predicate.FinschiaItemToken) *FinschiaItemTokenDelete {
	fitd.mutation.Where(ps...)
	return fitd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fitd *FinschiaItemTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fitd.sqlExec, fitd.mutation, fitd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fitd *FinschiaItemTokenDelete) ExecX(ctx context.Context) int {
	n, err := fitd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fitd *FinschiaItemTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(finschiaitemtoken.Table, sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32))
	if ps := fitd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fitd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fitd.mutation.done = true
	return affected, err
}

// FinschiaItemTokenDeleteOne is the builder for deleting a single FinschiaItemToken entity.
type FinschiaItemTokenDeleteOne struct {
	fitd *FinschiaItemTokenDelete
}

// Where appends a list predicates to the FinschiaItemTokenDelete builder.
func (fitdo *FinschiaItemTokenDeleteOne) Where(ps ...predicate.FinschiaItemToken) *FinschiaItemTokenDeleteOne {
	fitdo.fitd.mutation.Where(ps...)
	return fitdo
}

// Exec executes the deletion query.
func (fitdo *FinschiaItemTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := fitdo.fitd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{finschiaitemtoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fitdo *FinschiaItemTokenDeleteOne) ExecX(ctx context.Context) {
	if err := fitdo.Exec(ctx); err != nil {
		panic(err)
	}
}
