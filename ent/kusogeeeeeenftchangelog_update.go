// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenft"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenftchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// KusogeeeeeeNFTChangeLogUpdate is the builder for updating KusogeeeeeeNFTChangeLog entities.
type KusogeeeeeeNFTChangeLogUpdate struct {
	config
	hooks    []Hook
	mutation *KusogeeeeeeNFTChangeLogMutation
}

// Where appends a list predicates to the KusogeeeeeeNFTChangeLogUpdate builder.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) Where(ps ...predicate.KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.Where(ps...)
	return knclu
}

// SetUpdatedAt sets the "updated_at" field.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetUpdatedAt(t time.Time) *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.SetUpdatedAt(t)
	return knclu
}

// SetDeletedAt sets the "deleted_at" field.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetDeletedAt(t time.Time) *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.SetDeletedAt(t)
	return knclu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetNillableDeletedAt(t *time.Time) *KusogeeeeeeNFTChangeLogUpdate {
	if t != nil {
		knclu.SetDeletedAt(*t)
	}
	return knclu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) ClearDeletedAt() *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.ClearDeletedAt()
	return knclu
}

// SetKusogeeeeeeNftID sets the "kusogeeeeee_nft_id" field.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetKusogeeeeeeNftID(u uint32) *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.SetKusogeeeeeeNftID(u)
	return knclu
}

// SetNillableKusogeeeeeeNftID sets the "kusogeeeeee_nft_id" field if the given value is not nil.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetNillableKusogeeeeeeNftID(u *uint32) *KusogeeeeeeNFTChangeLogUpdate {
	if u != nil {
		knclu.SetKusogeeeeeeNftID(*u)
	}
	return knclu
}

// SetStatus sets the "status" field.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetStatus(s string) *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.SetStatus(s)
	return knclu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetNillableStatus(s *string) *KusogeeeeeeNFTChangeLogUpdate {
	if s != nil {
		knclu.SetStatus(*s)
	}
	return knclu
}

// SetPrice sets the "price" field.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetPrice(i int) *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.ResetPrice()
	knclu.mutation.SetPrice(i)
	return knclu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetNillablePrice(i *int) *KusogeeeeeeNFTChangeLogUpdate {
	if i != nil {
		knclu.SetPrice(*i)
	}
	return knclu
}

// AddPrice adds i to the "price" field.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) AddPrice(i int) *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.AddPrice(i)
	return knclu
}

// SetKusogeeeeeeNft sets the "kusogeeeeee_nft" edge to the KusogeeeeeeNFT entity.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SetKusogeeeeeeNft(k *KusogeeeeeeNFT) *KusogeeeeeeNFTChangeLogUpdate {
	return knclu.SetKusogeeeeeeNftID(k.ID)
}

// Mutation returns the KusogeeeeeeNFTChangeLogMutation object of the builder.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) Mutation() *KusogeeeeeeNFTChangeLogMutation {
	return knclu.mutation
}

// ClearKusogeeeeeeNft clears the "kusogeeeeee_nft" edge to the KusogeeeeeeNFT entity.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) ClearKusogeeeeeeNft() *KusogeeeeeeNFTChangeLogUpdate {
	knclu.mutation.ClearKusogeeeeeeNft()
	return knclu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) Save(ctx context.Context) (int, error) {
	if err := knclu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, knclu.sqlSave, knclu.mutation, knclu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) SaveX(ctx context.Context) int {
	affected, err := knclu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) Exec(ctx context.Context) error {
	_, err := knclu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) ExecX(ctx context.Context) {
	if err := knclu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) defaults() error {
	if _, ok := knclu.mutation.UpdatedAt(); !ok {
		if kusogeeeeeenftchangelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kusogeeeeeenftchangelog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kusogeeeeeenftchangelog.UpdateDefaultUpdatedAt()
		knclu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (knclu *KusogeeeeeeNFTChangeLogUpdate) check() error {
	if _, ok := knclu.mutation.KusogeeeeeeNftID(); knclu.mutation.KusogeeeeeeNftCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "KusogeeeeeeNFTChangeLog.kusogeeeeee_nft"`)
	}
	return nil
}

func (knclu *KusogeeeeeeNFTChangeLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := knclu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(kusogeeeeeenftchangelog.Table, kusogeeeeeenftchangelog.Columns, sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32))
	if ps := knclu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := knclu.mutation.UpdatedAt(); ok {
		_spec.SetField(kusogeeeeeenftchangelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := knclu.mutation.DeletedAt(); ok {
		_spec.SetField(kusogeeeeeenftchangelog.FieldDeletedAt, field.TypeTime, value)
	}
	if knclu.mutation.DeletedAtCleared() {
		_spec.ClearField(kusogeeeeeenftchangelog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := knclu.mutation.Status(); ok {
		_spec.SetField(kusogeeeeeenftchangelog.FieldStatus, field.TypeString, value)
	}
	if value, ok := knclu.mutation.Price(); ok {
		_spec.SetField(kusogeeeeeenftchangelog.FieldPrice, field.TypeInt, value)
	}
	if value, ok := knclu.mutation.AddedPrice(); ok {
		_spec.AddField(kusogeeeeeenftchangelog.FieldPrice, field.TypeInt, value)
	}
	if knclu.mutation.KusogeeeeeeNftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kusogeeeeeenftchangelog.KusogeeeeeeNftTable,
			Columns: []string{kusogeeeeeenftchangelog.KusogeeeeeeNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenft.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := knclu.mutation.KusogeeeeeeNftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kusogeeeeeenftchangelog.KusogeeeeeeNftTable,
			Columns: []string{kusogeeeeeenftchangelog.KusogeeeeeeNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenft.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, knclu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kusogeeeeeenftchangelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	knclu.mutation.done = true
	return n, nil
}

// KusogeeeeeeNFTChangeLogUpdateOne is the builder for updating a single KusogeeeeeeNFTChangeLog entity.
type KusogeeeeeeNFTChangeLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KusogeeeeeeNFTChangeLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetUpdatedAt(t time.Time) *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.SetUpdatedAt(t)
	return kncluo
}

// SetDeletedAt sets the "deleted_at" field.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetDeletedAt(t time.Time) *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.SetDeletedAt(t)
	return kncluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetNillableDeletedAt(t *time.Time) *KusogeeeeeeNFTChangeLogUpdateOne {
	if t != nil {
		kncluo.SetDeletedAt(*t)
	}
	return kncluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) ClearDeletedAt() *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.ClearDeletedAt()
	return kncluo
}

// SetKusogeeeeeeNftID sets the "kusogeeeeee_nft_id" field.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetKusogeeeeeeNftID(u uint32) *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.SetKusogeeeeeeNftID(u)
	return kncluo
}

// SetNillableKusogeeeeeeNftID sets the "kusogeeeeee_nft_id" field if the given value is not nil.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetNillableKusogeeeeeeNftID(u *uint32) *KusogeeeeeeNFTChangeLogUpdateOne {
	if u != nil {
		kncluo.SetKusogeeeeeeNftID(*u)
	}
	return kncluo
}

// SetStatus sets the "status" field.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetStatus(s string) *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.SetStatus(s)
	return kncluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetNillableStatus(s *string) *KusogeeeeeeNFTChangeLogUpdateOne {
	if s != nil {
		kncluo.SetStatus(*s)
	}
	return kncluo
}

// SetPrice sets the "price" field.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetPrice(i int) *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.ResetPrice()
	kncluo.mutation.SetPrice(i)
	return kncluo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetNillablePrice(i *int) *KusogeeeeeeNFTChangeLogUpdateOne {
	if i != nil {
		kncluo.SetPrice(*i)
	}
	return kncluo
}

// AddPrice adds i to the "price" field.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) AddPrice(i int) *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.AddPrice(i)
	return kncluo
}

// SetKusogeeeeeeNft sets the "kusogeeeeee_nft" edge to the KusogeeeeeeNFT entity.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SetKusogeeeeeeNft(k *KusogeeeeeeNFT) *KusogeeeeeeNFTChangeLogUpdateOne {
	return kncluo.SetKusogeeeeeeNftID(k.ID)
}

// Mutation returns the KusogeeeeeeNFTChangeLogMutation object of the builder.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) Mutation() *KusogeeeeeeNFTChangeLogMutation {
	return kncluo.mutation
}

// ClearKusogeeeeeeNft clears the "kusogeeeeee_nft" edge to the KusogeeeeeeNFT entity.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) ClearKusogeeeeeeNft() *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.ClearKusogeeeeeeNft()
	return kncluo
}

// Where appends a list predicates to the KusogeeeeeeNFTChangeLogUpdate builder.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) Where(ps ...predicate.KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.mutation.Where(ps...)
	return kncluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) Select(field string, fields ...string) *KusogeeeeeeNFTChangeLogUpdateOne {
	kncluo.fields = append([]string{field}, fields...)
	return kncluo
}

// Save executes the query and returns the updated KusogeeeeeeNFTChangeLog entity.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) Save(ctx context.Context) (*KusogeeeeeeNFTChangeLog, error) {
	if err := kncluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, kncluo.sqlSave, kncluo.mutation, kncluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) SaveX(ctx context.Context) *KusogeeeeeeNFTChangeLog {
	node, err := kncluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) Exec(ctx context.Context) error {
	_, err := kncluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) ExecX(ctx context.Context) {
	if err := kncluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) defaults() error {
	if _, ok := kncluo.mutation.UpdatedAt(); !ok {
		if kusogeeeeeenftchangelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kusogeeeeeenftchangelog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kusogeeeeeenftchangelog.UpdateDefaultUpdatedAt()
		kncluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) check() error {
	if _, ok := kncluo.mutation.KusogeeeeeeNftID(); kncluo.mutation.KusogeeeeeeNftCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "KusogeeeeeeNFTChangeLog.kusogeeeeee_nft"`)
	}
	return nil
}

func (kncluo *KusogeeeeeeNFTChangeLogUpdateOne) sqlSave(ctx context.Context) (_node *KusogeeeeeeNFTChangeLog, err error) {
	if err := kncluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(kusogeeeeeenftchangelog.Table, kusogeeeeeenftchangelog.Columns, sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32))
	id, ok := kncluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KusogeeeeeeNFTChangeLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kncluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kusogeeeeeenftchangelog.FieldID)
		for _, f := range fields {
			if !kusogeeeeeenftchangelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kusogeeeeeenftchangelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kncluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kncluo.mutation.UpdatedAt(); ok {
		_spec.SetField(kusogeeeeeenftchangelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := kncluo.mutation.DeletedAt(); ok {
		_spec.SetField(kusogeeeeeenftchangelog.FieldDeletedAt, field.TypeTime, value)
	}
	if kncluo.mutation.DeletedAtCleared() {
		_spec.ClearField(kusogeeeeeenftchangelog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := kncluo.mutation.Status(); ok {
		_spec.SetField(kusogeeeeeenftchangelog.FieldStatus, field.TypeString, value)
	}
	if value, ok := kncluo.mutation.Price(); ok {
		_spec.SetField(kusogeeeeeenftchangelog.FieldPrice, field.TypeInt, value)
	}
	if value, ok := kncluo.mutation.AddedPrice(); ok {
		_spec.AddField(kusogeeeeeenftchangelog.FieldPrice, field.TypeInt, value)
	}
	if kncluo.mutation.KusogeeeeeeNftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kusogeeeeeenftchangelog.KusogeeeeeeNftTable,
			Columns: []string{kusogeeeeeenftchangelog.KusogeeeeeeNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenft.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kncluo.mutation.KusogeeeeeeNftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kusogeeeeeenftchangelog.KusogeeeeeeNftTable,
			Columns: []string{kusogeeeeeenftchangelog.KusogeeeeeeNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenft.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KusogeeeeeeNFTChangeLog{config: kncluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kncluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kusogeeeeeenftchangelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kncluo.mutation.done = true
	return _node, nil
}
