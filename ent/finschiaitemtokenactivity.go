// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtoken"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenactivity"
)

// Activity Records for Finschia Item Tokens
type FinschiaItemTokenActivity struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// TransactionHash holds the value of the "transaction_hash" field.
	TransactionHash string `json:"transaction_hash"`
	// FinschiaItemTokenID holds the value of the "finschia_item_token_id" field.
	FinschiaItemTokenID uint32 `json:"finschia_item_token_id"`
	// ActivityType holds the value of the "activity_type" field.
	ActivityType string `json:"activity_type"`
	// ActivatedAt holds the value of the "activated_at" field.
	ActivatedAt time.Time `json:"activated_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FinschiaItemTokenActivityQuery when eager-loading is set.
	Edges        FinschiaItemTokenActivityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FinschiaItemTokenActivityEdges holds the relations/edges for other nodes in the graph.
type FinschiaItemTokenActivityEdges struct {
	// FinschiaItemToken holds the value of the finschia_item_token edge.
	FinschiaItemToken *FinschiaItemToken `json:"finschia_item_token,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FinschiaItemTokenOrErr returns the FinschiaItemToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FinschiaItemTokenActivityEdges) FinschiaItemTokenOrErr() (*FinschiaItemToken, error) {
	if e.loadedTypes[0] {
		if e.FinschiaItemToken == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: finschiaitemtoken.Label}
		}
		return e.FinschiaItemToken, nil
	}
	return nil, &NotLoadedError{edge: "finschia_item_token"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FinschiaItemTokenActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case finschiaitemtokenactivity.FieldID, finschiaitemtokenactivity.FieldFinschiaItemTokenID:
			values[i] = new(sql.NullInt64)
		case finschiaitemtokenactivity.FieldTransactionHash, finschiaitemtokenactivity.FieldActivityType:
			values[i] = new(sql.NullString)
		case finschiaitemtokenactivity.FieldCreatedAt, finschiaitemtokenactivity.FieldUpdatedAt, finschiaitemtokenactivity.FieldDeletedAt, finschiaitemtokenactivity.FieldActivatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FinschiaItemTokenActivity fields.
func (fita *FinschiaItemTokenActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case finschiaitemtokenactivity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fita.ID = uint32(value.Int64)
		case finschiaitemtokenactivity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fita.CreatedAt = value.Time
			}
		case finschiaitemtokenactivity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fita.UpdatedAt = value.Time
			}
		case finschiaitemtokenactivity.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fita.DeletedAt = new(time.Time)
				*fita.DeletedAt = value.Time
			}
		case finschiaitemtokenactivity.FieldTransactionHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_hash", values[i])
			} else if value.Valid {
				fita.TransactionHash = value.String
			}
		case finschiaitemtokenactivity.FieldFinschiaItemTokenID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field finschia_item_token_id", values[i])
			} else if value.Valid {
				fita.FinschiaItemTokenID = uint32(value.Int64)
			}
		case finschiaitemtokenactivity.FieldActivityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type", values[i])
			} else if value.Valid {
				fita.ActivityType = value.String
			}
		case finschiaitemtokenactivity.FieldActivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activated_at", values[i])
			} else if value.Valid {
				fita.ActivatedAt = value.Time
			}
		default:
			fita.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FinschiaItemTokenActivity.
// This includes values selected through modifiers, order, etc.
func (fita *FinschiaItemTokenActivity) Value(name string) (ent.Value, error) {
	return fita.selectValues.Get(name)
}

// QueryFinschiaItemToken queries the "finschia_item_token" edge of the FinschiaItemTokenActivity entity.
func (fita *FinschiaItemTokenActivity) QueryFinschiaItemToken() *FinschiaItemTokenQuery {
	return NewFinschiaItemTokenActivityClient(fita.config).QueryFinschiaItemToken(fita)
}

// Update returns a builder for updating this FinschiaItemTokenActivity.
// Note that you need to call FinschiaItemTokenActivity.Unwrap() before calling this method if this FinschiaItemTokenActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (fita *FinschiaItemTokenActivity) Update() *FinschiaItemTokenActivityUpdateOne {
	return NewFinschiaItemTokenActivityClient(fita.config).UpdateOne(fita)
}

// Unwrap unwraps the FinschiaItemTokenActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fita *FinschiaItemTokenActivity) Unwrap() *FinschiaItemTokenActivity {
	_tx, ok := fita.config.driver.(*txDriver)
	if !ok {
		panic("ent: FinschiaItemTokenActivity is not a transactional entity")
	}
	fita.config.driver = _tx.drv
	return fita
}

// String implements the fmt.Stringer.
func (fita *FinschiaItemTokenActivity) String() string {
	var builder strings.Builder
	builder.WriteString("FinschiaItemTokenActivity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fita.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fita.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fita.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := fita.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("transaction_hash=")
	builder.WriteString(fita.TransactionHash)
	builder.WriteString(", ")
	builder.WriteString("finschia_item_token_id=")
	builder.WriteString(fmt.Sprintf("%v", fita.FinschiaItemTokenID))
	builder.WriteString(", ")
	builder.WriteString("activity_type=")
	builder.WriteString(fita.ActivityType)
	builder.WriteString(", ")
	builder.WriteString("activated_at=")
	builder.WriteString(fita.ActivatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FinschiaItemTokenActivities is a parsable slice of FinschiaItemTokenActivity.
type FinschiaItemTokenActivities []*FinschiaItemTokenActivity
