// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtoken"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenmillionarthursproperty"
)

// Million Arthurs' Properties for Finschia Item Tokens
type FinschiaItemTokenMillionArthursProperty struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// FinschiaItemTokenID holds the value of the "finschia_item_token_id" field.
	FinschiaItemTokenID uint32 `json:"finschia_item_token_id"`
	// Series holds the value of the "series" field.
	Series *string `json:"series"`
	// GearCategory holds the value of the "gear_category" field.
	GearCategory *string `json:"gear_category"`
	// GearRarity holds the value of the "gear_rarity" field.
	GearRarity *string `json:"gear_rarity"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FinschiaItemTokenMillionArthursPropertyQuery when eager-loading is set.
	Edges        FinschiaItemTokenMillionArthursPropertyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FinschiaItemTokenMillionArthursPropertyEdges holds the relations/edges for other nodes in the graph.
type FinschiaItemTokenMillionArthursPropertyEdges struct {
	// FinschiaItemToken holds the value of the finschia_item_token edge.
	FinschiaItemToken *FinschiaItemToken `json:"finschia_item_token,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FinschiaItemTokenOrErr returns the FinschiaItemToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FinschiaItemTokenMillionArthursPropertyEdges) FinschiaItemTokenOrErr() (*FinschiaItemToken, error) {
	if e.loadedTypes[0] {
		if e.FinschiaItemToken == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: finschiaitemtoken.Label}
		}
		return e.FinschiaItemToken, nil
	}
	return nil, &NotLoadedError{edge: "finschia_item_token"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FinschiaItemTokenMillionArthursProperty) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case finschiaitemtokenmillionarthursproperty.FieldID, finschiaitemtokenmillionarthursproperty.FieldFinschiaItemTokenID:
			values[i] = new(sql.NullInt64)
		case finschiaitemtokenmillionarthursproperty.FieldSeries, finschiaitemtokenmillionarthursproperty.FieldGearCategory, finschiaitemtokenmillionarthursproperty.FieldGearRarity:
			values[i] = new(sql.NullString)
		case finschiaitemtokenmillionarthursproperty.FieldCreatedAt, finschiaitemtokenmillionarthursproperty.FieldUpdatedAt, finschiaitemtokenmillionarthursproperty.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FinschiaItemTokenMillionArthursProperty fields.
func (fitmap *FinschiaItemTokenMillionArthursProperty) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case finschiaitemtokenmillionarthursproperty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fitmap.ID = uint32(value.Int64)
		case finschiaitemtokenmillionarthursproperty.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fitmap.CreatedAt = value.Time
			}
		case finschiaitemtokenmillionarthursproperty.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fitmap.UpdatedAt = value.Time
			}
		case finschiaitemtokenmillionarthursproperty.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fitmap.DeletedAt = new(time.Time)
				*fitmap.DeletedAt = value.Time
			}
		case finschiaitemtokenmillionarthursproperty.FieldFinschiaItemTokenID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field finschia_item_token_id", values[i])
			} else if value.Valid {
				fitmap.FinschiaItemTokenID = uint32(value.Int64)
			}
		case finschiaitemtokenmillionarthursproperty.FieldSeries:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field series", values[i])
			} else if value.Valid {
				fitmap.Series = new(string)
				*fitmap.Series = value.String
			}
		case finschiaitemtokenmillionarthursproperty.FieldGearCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gear_category", values[i])
			} else if value.Valid {
				fitmap.GearCategory = new(string)
				*fitmap.GearCategory = value.String
			}
		case finschiaitemtokenmillionarthursproperty.FieldGearRarity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gear_rarity", values[i])
			} else if value.Valid {
				fitmap.GearRarity = new(string)
				*fitmap.GearRarity = value.String
			}
		default:
			fitmap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FinschiaItemTokenMillionArthursProperty.
// This includes values selected through modifiers, order, etc.
func (fitmap *FinschiaItemTokenMillionArthursProperty) Value(name string) (ent.Value, error) {
	return fitmap.selectValues.Get(name)
}

// QueryFinschiaItemToken queries the "finschia_item_token" edge of the FinschiaItemTokenMillionArthursProperty entity.
func (fitmap *FinschiaItemTokenMillionArthursProperty) QueryFinschiaItemToken() *FinschiaItemTokenQuery {
	return NewFinschiaItemTokenMillionArthursPropertyClient(fitmap.config).QueryFinschiaItemToken(fitmap)
}

// Update returns a builder for updating this FinschiaItemTokenMillionArthursProperty.
// Note that you need to call FinschiaItemTokenMillionArthursProperty.Unwrap() before calling this method if this FinschiaItemTokenMillionArthursProperty
// was returned from a transaction, and the transaction was committed or rolled back.
func (fitmap *FinschiaItemTokenMillionArthursProperty) Update() *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	return NewFinschiaItemTokenMillionArthursPropertyClient(fitmap.config).UpdateOne(fitmap)
}

// Unwrap unwraps the FinschiaItemTokenMillionArthursProperty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fitmap *FinschiaItemTokenMillionArthursProperty) Unwrap() *FinschiaItemTokenMillionArthursProperty {
	_tx, ok := fitmap.config.driver.(*txDriver)
	if !ok {
		panic("ent: FinschiaItemTokenMillionArthursProperty is not a transactional entity")
	}
	fitmap.config.driver = _tx.drv
	return fitmap
}

// String implements the fmt.Stringer.
func (fitmap *FinschiaItemTokenMillionArthursProperty) String() string {
	var builder strings.Builder
	builder.WriteString("FinschiaItemTokenMillionArthursProperty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fitmap.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fitmap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fitmap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := fitmap.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("finschia_item_token_id=")
	builder.WriteString(fmt.Sprintf("%v", fitmap.FinschiaItemTokenID))
	builder.WriteString(", ")
	if v := fitmap.Series; v != nil {
		builder.WriteString("series=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fitmap.GearCategory; v != nil {
		builder.WriteString("gear_category=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fitmap.GearRarity; v != nil {
		builder.WriteString("gear_rarity=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// FinschiaItemTokenMillionArthursProperties is a parsable slice of FinschiaItemTokenMillionArthursProperty.
type FinschiaItemTokenMillionArthursProperties []*FinschiaItemTokenMillionArthursProperty
