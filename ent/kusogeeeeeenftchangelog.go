// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenft"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenftchangelog"
)

// Kusogeeeeee NFT Change Log
type KusogeeeeeeNFTChangeLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// KusogeeeeeeNftID holds the value of the "kusogeeeeee_nft_id" field.
	KusogeeeeeeNftID uint32 `json:"kusogeeeeee_nft_id"`
	// Status holds the value of the "status" field.
	Status string `json:"status"`
	// Price holds the value of the "price" field.
	Price int `json:"price"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KusogeeeeeeNFTChangeLogQuery when eager-loading is set.
	Edges        KusogeeeeeeNFTChangeLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KusogeeeeeeNFTChangeLogEdges holds the relations/edges for other nodes in the graph.
type KusogeeeeeeNFTChangeLogEdges struct {
	// KusogeeeeeeNft holds the value of the kusogeeeeee_nft edge.
	KusogeeeeeeNft *KusogeeeeeeNFT `json:"kusogeeeeee_nft,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// KusogeeeeeeNftOrErr returns the KusogeeeeeeNft value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KusogeeeeeeNFTChangeLogEdges) KusogeeeeeeNftOrErr() (*KusogeeeeeeNFT, error) {
	if e.loadedTypes[0] {
		if e.KusogeeeeeeNft == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: kusogeeeeeenft.Label}
		}
		return e.KusogeeeeeeNft, nil
	}
	return nil, &NotLoadedError{edge: "kusogeeeeee_nft"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KusogeeeeeeNFTChangeLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kusogeeeeeenftchangelog.FieldID, kusogeeeeeenftchangelog.FieldKusogeeeeeeNftID, kusogeeeeeenftchangelog.FieldPrice:
			values[i] = new(sql.NullInt64)
		case kusogeeeeeenftchangelog.FieldStatus:
			values[i] = new(sql.NullString)
		case kusogeeeeeenftchangelog.FieldCreatedAt, kusogeeeeeenftchangelog.FieldUpdatedAt, kusogeeeeeenftchangelog.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KusogeeeeeeNFTChangeLog fields.
func (kncl *KusogeeeeeeNFTChangeLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kusogeeeeeenftchangelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kncl.ID = uint32(value.Int64)
		case kusogeeeeeenftchangelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kncl.CreatedAt = value.Time
			}
		case kusogeeeeeenftchangelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kncl.UpdatedAt = value.Time
			}
		case kusogeeeeeenftchangelog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				kncl.DeletedAt = new(time.Time)
				*kncl.DeletedAt = value.Time
			}
		case kusogeeeeeenftchangelog.FieldKusogeeeeeeNftID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field kusogeeeeee_nft_id", values[i])
			} else if value.Valid {
				kncl.KusogeeeeeeNftID = uint32(value.Int64)
			}
		case kusogeeeeeenftchangelog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				kncl.Status = value.String
			}
		case kusogeeeeeenftchangelog.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				kncl.Price = int(value.Int64)
			}
		default:
			kncl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KusogeeeeeeNFTChangeLog.
// This includes values selected through modifiers, order, etc.
func (kncl *KusogeeeeeeNFTChangeLog) Value(name string) (ent.Value, error) {
	return kncl.selectValues.Get(name)
}

// QueryKusogeeeeeeNft queries the "kusogeeeeee_nft" edge of the KusogeeeeeeNFTChangeLog entity.
func (kncl *KusogeeeeeeNFTChangeLog) QueryKusogeeeeeeNft() *KusogeeeeeeNFTQuery {
	return NewKusogeeeeeeNFTChangeLogClient(kncl.config).QueryKusogeeeeeeNft(kncl)
}

// Update returns a builder for updating this KusogeeeeeeNFTChangeLog.
// Note that you need to call KusogeeeeeeNFTChangeLog.Unwrap() before calling this method if this KusogeeeeeeNFTChangeLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (kncl *KusogeeeeeeNFTChangeLog) Update() *KusogeeeeeeNFTChangeLogUpdateOne {
	return NewKusogeeeeeeNFTChangeLogClient(kncl.config).UpdateOne(kncl)
}

// Unwrap unwraps the KusogeeeeeeNFTChangeLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kncl *KusogeeeeeeNFTChangeLog) Unwrap() *KusogeeeeeeNFTChangeLog {
	_tx, ok := kncl.config.driver.(*txDriver)
	if !ok {
		panic("ent: KusogeeeeeeNFTChangeLog is not a transactional entity")
	}
	kncl.config.driver = _tx.drv
	return kncl
}

// String implements the fmt.Stringer.
func (kncl *KusogeeeeeeNFTChangeLog) String() string {
	var builder strings.Builder
	builder.WriteString("KusogeeeeeeNFTChangeLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", kncl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(kncl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(kncl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := kncl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("kusogeeeeee_nft_id=")
	builder.WriteString(fmt.Sprintf("%v", kncl.KusogeeeeeeNftID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(kncl.Status)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", kncl.Price))
	builder.WriteByte(')')
	return builder.String()
}

// KusogeeeeeeNFTChangeLogs is a parsable slice of KusogeeeeeeNFTChangeLog.
type KusogeeeeeeNFTChangeLogs []*KusogeeeeeeNFTChangeLog
