// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/changokushiweapon"
	"github.com/a10adotapp/a10a.app/ent/changokushiweaponchangelog"
)

// ChangokushiWeaponCreate is the builder for creating a ChangokushiWeapon entity.
type ChangokushiWeaponCreate struct {
	config
	mutation *ChangokushiWeaponMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cwc *ChangokushiWeaponCreate) SetCreatedAt(t time.Time) *ChangokushiWeaponCreate {
	cwc.mutation.SetCreatedAt(t)
	return cwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cwc *ChangokushiWeaponCreate) SetNillableCreatedAt(t *time.Time) *ChangokushiWeaponCreate {
	if t != nil {
		cwc.SetCreatedAt(*t)
	}
	return cwc
}

// SetUpdatedAt sets the "updated_at" field.
func (cwc *ChangokushiWeaponCreate) SetUpdatedAt(t time.Time) *ChangokushiWeaponCreate {
	cwc.mutation.SetUpdatedAt(t)
	return cwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cwc *ChangokushiWeaponCreate) SetNillableUpdatedAt(t *time.Time) *ChangokushiWeaponCreate {
	if t != nil {
		cwc.SetUpdatedAt(*t)
	}
	return cwc
}

// SetDeletedAt sets the "deleted_at" field.
func (cwc *ChangokushiWeaponCreate) SetDeletedAt(t time.Time) *ChangokushiWeaponCreate {
	cwc.mutation.SetDeletedAt(t)
	return cwc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cwc *ChangokushiWeaponCreate) SetNillableDeletedAt(t *time.Time) *ChangokushiWeaponCreate {
	if t != nil {
		cwc.SetDeletedAt(*t)
	}
	return cwc
}

// SetURI sets the "uri" field.
func (cwc *ChangokushiWeaponCreate) SetURI(s string) *ChangokushiWeaponCreate {
	cwc.mutation.SetURI(s)
	return cwc
}

// SetName sets the "name" field.
func (cwc *ChangokushiWeaponCreate) SetName(s string) *ChangokushiWeaponCreate {
	cwc.mutation.SetName(s)
	return cwc
}

// SetRank sets the "rank" field.
func (cwc *ChangokushiWeaponCreate) SetRank(i int) *ChangokushiWeaponCreate {
	cwc.mutation.SetRank(i)
	return cwc
}

// SetType sets the "type" field.
func (cwc *ChangokushiWeaponCreate) SetType(s string) *ChangokushiWeaponCreate {
	cwc.mutation.SetType(s)
	return cwc
}

// SetSkill sets the "skill" field.
func (cwc *ChangokushiWeaponCreate) SetSkill(s string) *ChangokushiWeaponCreate {
	cwc.mutation.SetSkill(s)
	return cwc
}

// SetVitality sets the "vitality" field.
func (cwc *ChangokushiWeaponCreate) SetVitality(i int) *ChangokushiWeaponCreate {
	cwc.mutation.SetVitality(i)
	return cwc
}

// SetStrength sets the "strength" field.
func (cwc *ChangokushiWeaponCreate) SetStrength(i int) *ChangokushiWeaponCreate {
	cwc.mutation.SetStrength(i)
	return cwc
}

// SetPhysicalDefense sets the "physical_defense" field.
func (cwc *ChangokushiWeaponCreate) SetPhysicalDefense(i int) *ChangokushiWeaponCreate {
	cwc.mutation.SetPhysicalDefense(i)
	return cwc
}

// SetMagicalDefense sets the "magical_defense" field.
func (cwc *ChangokushiWeaponCreate) SetMagicalDefense(i int) *ChangokushiWeaponCreate {
	cwc.mutation.SetMagicalDefense(i)
	return cwc
}

// SetAgility sets the "agility" field.
func (cwc *ChangokushiWeaponCreate) SetAgility(i int) *ChangokushiWeaponCreate {
	cwc.mutation.SetAgility(i)
	return cwc
}

// SetID sets the "id" field.
func (cwc *ChangokushiWeaponCreate) SetID(u uint32) *ChangokushiWeaponCreate {
	cwc.mutation.SetID(u)
	return cwc
}

// AddChangeLogIDs adds the "change_logs" edge to the ChangokushiWeaponChangeLog entity by IDs.
func (cwc *ChangokushiWeaponCreate) AddChangeLogIDs(ids ...uint32) *ChangokushiWeaponCreate {
	cwc.mutation.AddChangeLogIDs(ids...)
	return cwc
}

// AddChangeLogs adds the "change_logs" edges to the ChangokushiWeaponChangeLog entity.
func (cwc *ChangokushiWeaponCreate) AddChangeLogs(c ...*ChangokushiWeaponChangeLog) *ChangokushiWeaponCreate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cwc.AddChangeLogIDs(ids...)
}

// Mutation returns the ChangokushiWeaponMutation object of the builder.
func (cwc *ChangokushiWeaponCreate) Mutation() *ChangokushiWeaponMutation {
	return cwc.mutation
}

// Save creates the ChangokushiWeapon in the database.
func (cwc *ChangokushiWeaponCreate) Save(ctx context.Context) (*ChangokushiWeapon, error) {
	if err := cwc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cwc.sqlSave, cwc.mutation, cwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cwc *ChangokushiWeaponCreate) SaveX(ctx context.Context) *ChangokushiWeapon {
	v, err := cwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cwc *ChangokushiWeaponCreate) Exec(ctx context.Context) error {
	_, err := cwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwc *ChangokushiWeaponCreate) ExecX(ctx context.Context) {
	if err := cwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwc *ChangokushiWeaponCreate) defaults() error {
	if _, ok := cwc.mutation.CreatedAt(); !ok {
		if changokushiweapon.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized changokushiweapon.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := changokushiweapon.DefaultCreatedAt()
		cwc.mutation.SetCreatedAt(v)
	}
	if _, ok := cwc.mutation.UpdatedAt(); !ok {
		if changokushiweapon.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized changokushiweapon.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := changokushiweapon.DefaultUpdatedAt()
		cwc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cwc *ChangokushiWeaponCreate) check() error {
	if _, ok := cwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ChangokushiWeapon.created_at"`)}
	}
	if _, ok := cwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ChangokushiWeapon.updated_at"`)}
	}
	if _, ok := cwc.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "ChangokushiWeapon.uri"`)}
	}
	if _, ok := cwc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ChangokushiWeapon.name"`)}
	}
	if _, ok := cwc.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "ChangokushiWeapon.rank"`)}
	}
	if _, ok := cwc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ChangokushiWeapon.type"`)}
	}
	if _, ok := cwc.mutation.Skill(); !ok {
		return &ValidationError{Name: "skill", err: errors.New(`ent: missing required field "ChangokushiWeapon.skill"`)}
	}
	if _, ok := cwc.mutation.Vitality(); !ok {
		return &ValidationError{Name: "vitality", err: errors.New(`ent: missing required field "ChangokushiWeapon.vitality"`)}
	}
	if _, ok := cwc.mutation.Strength(); !ok {
		return &ValidationError{Name: "strength", err: errors.New(`ent: missing required field "ChangokushiWeapon.strength"`)}
	}
	if _, ok := cwc.mutation.PhysicalDefense(); !ok {
		return &ValidationError{Name: "physical_defense", err: errors.New(`ent: missing required field "ChangokushiWeapon.physical_defense"`)}
	}
	if _, ok := cwc.mutation.MagicalDefense(); !ok {
		return &ValidationError{Name: "magical_defense", err: errors.New(`ent: missing required field "ChangokushiWeapon.magical_defense"`)}
	}
	if _, ok := cwc.mutation.Agility(); !ok {
		return &ValidationError{Name: "agility", err: errors.New(`ent: missing required field "ChangokushiWeapon.agility"`)}
	}
	return nil
}

func (cwc *ChangokushiWeaponCreate) sqlSave(ctx context.Context) (*ChangokushiWeapon, error) {
	if err := cwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	cwc.mutation.id = &_node.ID
	cwc.mutation.done = true
	return _node, nil
}

func (cwc *ChangokushiWeaponCreate) createSpec() (*ChangokushiWeapon, *sqlgraph.CreateSpec) {
	var (
		_node = &ChangokushiWeapon{config: cwc.config}
		_spec = sqlgraph.NewCreateSpec(changokushiweapon.Table, sqlgraph.NewFieldSpec(changokushiweapon.FieldID, field.TypeUint32))
	)
	if id, ok := cwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cwc.mutation.CreatedAt(); ok {
		_spec.SetField(changokushiweapon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cwc.mutation.UpdatedAt(); ok {
		_spec.SetField(changokushiweapon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cwc.mutation.DeletedAt(); ok {
		_spec.SetField(changokushiweapon.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cwc.mutation.URI(); ok {
		_spec.SetField(changokushiweapon.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := cwc.mutation.Name(); ok {
		_spec.SetField(changokushiweapon.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cwc.mutation.Rank(); ok {
		_spec.SetField(changokushiweapon.FieldRank, field.TypeInt, value)
		_node.Rank = value
	}
	if value, ok := cwc.mutation.GetType(); ok {
		_spec.SetField(changokushiweapon.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cwc.mutation.Skill(); ok {
		_spec.SetField(changokushiweapon.FieldSkill, field.TypeString, value)
		_node.Skill = value
	}
	if value, ok := cwc.mutation.Vitality(); ok {
		_spec.SetField(changokushiweapon.FieldVitality, field.TypeInt, value)
		_node.Vitality = value
	}
	if value, ok := cwc.mutation.Strength(); ok {
		_spec.SetField(changokushiweapon.FieldStrength, field.TypeInt, value)
		_node.Strength = value
	}
	if value, ok := cwc.mutation.PhysicalDefense(); ok {
		_spec.SetField(changokushiweapon.FieldPhysicalDefense, field.TypeInt, value)
		_node.PhysicalDefense = value
	}
	if value, ok := cwc.mutation.MagicalDefense(); ok {
		_spec.SetField(changokushiweapon.FieldMagicalDefense, field.TypeInt, value)
		_node.MagicalDefense = value
	}
	if value, ok := cwc.mutation.Agility(); ok {
		_spec.SetField(changokushiweapon.FieldAgility, field.TypeInt, value)
		_node.Agility = value
	}
	if nodes := cwc.mutation.ChangeLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changokushiweapon.ChangeLogsTable,
			Columns: []string{changokushiweapon.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChangokushiWeaponCreateBulk is the builder for creating many ChangokushiWeapon entities in bulk.
type ChangokushiWeaponCreateBulk struct {
	config
	err      error
	builders []*ChangokushiWeaponCreate
}

// Save creates the ChangokushiWeapon entities in the database.
func (cwcb *ChangokushiWeaponCreateBulk) Save(ctx context.Context) ([]*ChangokushiWeapon, error) {
	if cwcb.err != nil {
		return nil, cwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cwcb.builders))
	nodes := make([]*ChangokushiWeapon, len(cwcb.builders))
	mutators := make([]Mutator, len(cwcb.builders))
	for i := range cwcb.builders {
		func(i int, root context.Context) {
			builder := cwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChangokushiWeaponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cwcb *ChangokushiWeaponCreateBulk) SaveX(ctx context.Context) []*ChangokushiWeapon {
	v, err := cwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cwcb *ChangokushiWeaponCreateBulk) Exec(ctx context.Context) error {
	_, err := cwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwcb *ChangokushiWeaponCreateBulk) ExecX(ctx context.Context) {
	if err := cwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
