// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/sanmeihoikuenpost"
)

// SanmeiHoikuenPost is the model entity for the SanmeiHoikuenPost schema.
type SanmeiHoikuenPost struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// URL holds the value of the "url" field.
	URL string `json:"url"`
	// Title holds the value of the "title" field.
	Title string `json:"title"`
	// Date holds the value of the "date" field.
	Date         string `json:"date"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SanmeiHoikuenPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sanmeihoikuenpost.FieldID:
			values[i] = new(sql.NullInt64)
		case sanmeihoikuenpost.FieldURL, sanmeihoikuenpost.FieldTitle, sanmeihoikuenpost.FieldDate:
			values[i] = new(sql.NullString)
		case sanmeihoikuenpost.FieldCreatedAt, sanmeihoikuenpost.FieldUpdatedAt, sanmeihoikuenpost.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SanmeiHoikuenPost fields.
func (shp *SanmeiHoikuenPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sanmeihoikuenpost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			shp.ID = uint32(value.Int64)
		case sanmeihoikuenpost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				shp.CreatedAt = value.Time
			}
		case sanmeihoikuenpost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				shp.UpdatedAt = value.Time
			}
		case sanmeihoikuenpost.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				shp.DeletedAt = new(time.Time)
				*shp.DeletedAt = value.Time
			}
		case sanmeihoikuenpost.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				shp.URL = value.String
			}
		case sanmeihoikuenpost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				shp.Title = value.String
			}
		case sanmeihoikuenpost.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				shp.Date = value.String
			}
		default:
			shp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SanmeiHoikuenPost.
// This includes values selected through modifiers, order, etc.
func (shp *SanmeiHoikuenPost) Value(name string) (ent.Value, error) {
	return shp.selectValues.Get(name)
}

// Update returns a builder for updating this SanmeiHoikuenPost.
// Note that you need to call SanmeiHoikuenPost.Unwrap() before calling this method if this SanmeiHoikuenPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (shp *SanmeiHoikuenPost) Update() *SanmeiHoikuenPostUpdateOne {
	return NewSanmeiHoikuenPostClient(shp.config).UpdateOne(shp)
}

// Unwrap unwraps the SanmeiHoikuenPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (shp *SanmeiHoikuenPost) Unwrap() *SanmeiHoikuenPost {
	_tx, ok := shp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SanmeiHoikuenPost is not a transactional entity")
	}
	shp.config.driver = _tx.drv
	return shp
}

// String implements the fmt.Stringer.
func (shp *SanmeiHoikuenPost) String() string {
	var builder strings.Builder
	builder.WriteString("SanmeiHoikuenPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", shp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(shp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(shp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := shp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(shp.URL)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(shp.Title)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(shp.Date)
	builder.WriteByte(')')
	return builder.String()
}

// SanmeiHoikuenPosts is a parsable slice of SanmeiHoikuenPost.
type SanmeiHoikuenPosts []*SanmeiHoikuenPost
