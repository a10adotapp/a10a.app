// Code generated by ent, DO NOT EDIT.

package changokushiweaponchangelog

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the changokushiweaponchangelog type in the database.
	Label = "changokushi_weapon_change_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldChangokushiWeaponID holds the string denoting the changokushi_weapon_id field in the database.
	FieldChangokushiWeaponID = "changokushi_weapon_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// EdgeChangokushiWeapon holds the string denoting the changokushi_weapon edge name in mutations.
	EdgeChangokushiWeapon = "changokushi_weapon"
	// Table holds the table name of the changokushiweaponchangelog in the database.
	Table = "changokushi_weapon_change_logs"
	// ChangokushiWeaponTable is the table that holds the changokushi_weapon relation/edge.
	ChangokushiWeaponTable = "changokushi_weapon_change_logs"
	// ChangokushiWeaponInverseTable is the table name for the ChangokushiWeapon entity.
	// It exists in this package in order to avoid circular dependency with the "changokushiweapon" package.
	ChangokushiWeaponInverseTable = "changokushi_weapons"
	// ChangokushiWeaponColumn is the table column denoting the changokushi_weapon relation/edge.
	ChangokushiWeaponColumn = "changokushi_weapon_id"
)

// Columns holds all SQL columns for changokushiweaponchangelog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldChangokushiWeaponID,
	FieldStatus,
	FieldPrice,
	FieldPublishedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/a10adotapp/a10a.app/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ChangokushiWeaponChangeLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByChangokushiWeaponID orders the results by the changokushi_weapon_id field.
func ByChangokushiWeaponID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangokushiWeaponID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByChangokushiWeaponField orders the results by changokushi_weapon field.
func ByChangokushiWeaponField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChangokushiWeaponStep(), sql.OrderByField(field, opts...))
	}
}
func newChangokushiWeaponStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChangokushiWeaponInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChangokushiWeaponTable, ChangokushiWeaponColumn),
	)
}
