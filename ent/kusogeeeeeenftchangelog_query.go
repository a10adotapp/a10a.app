// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenft"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenftchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// KusogeeeeeeNFTChangeLogQuery is the builder for querying KusogeeeeeeNFTChangeLog entities.
type KusogeeeeeeNFTChangeLogQuery struct {
	config
	ctx                *QueryContext
	order              []kusogeeeeeenftchangelog.OrderOption
	inters             []Interceptor
	predicates         []predicate.KusogeeeeeeNFTChangeLog
	withKusogeeeeeeNft *KusogeeeeeeNFTQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KusogeeeeeeNFTChangeLogQuery builder.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Where(ps ...predicate.KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTChangeLogQuery {
	knclq.predicates = append(knclq.predicates, ps...)
	return knclq
}

// Limit the number of records to be returned by this query.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Limit(limit int) *KusogeeeeeeNFTChangeLogQuery {
	knclq.ctx.Limit = &limit
	return knclq
}

// Offset to start from.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Offset(offset int) *KusogeeeeeeNFTChangeLogQuery {
	knclq.ctx.Offset = &offset
	return knclq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Unique(unique bool) *KusogeeeeeeNFTChangeLogQuery {
	knclq.ctx.Unique = &unique
	return knclq
}

// Order specifies how the records should be ordered.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Order(o ...kusogeeeeeenftchangelog.OrderOption) *KusogeeeeeeNFTChangeLogQuery {
	knclq.order = append(knclq.order, o...)
	return knclq
}

// QueryKusogeeeeeeNft chains the current query on the "kusogeeeeee_nft" edge.
func (knclq *KusogeeeeeeNFTChangeLogQuery) QueryKusogeeeeeeNft() *KusogeeeeeeNFTQuery {
	query := (&KusogeeeeeeNFTClient{config: knclq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := knclq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := knclq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kusogeeeeeenftchangelog.Table, kusogeeeeeenftchangelog.FieldID, selector),
			sqlgraph.To(kusogeeeeeenft.Table, kusogeeeeeenft.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kusogeeeeeenftchangelog.KusogeeeeeeNftTable, kusogeeeeeenftchangelog.KusogeeeeeeNftColumn),
		)
		fromU = sqlgraph.SetNeighbors(knclq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KusogeeeeeeNFTChangeLog entity from the query.
// Returns a *NotFoundError when no KusogeeeeeeNFTChangeLog was found.
func (knclq *KusogeeeeeeNFTChangeLogQuery) First(ctx context.Context) (*KusogeeeeeeNFTChangeLog, error) {
	nodes, err := knclq.Limit(1).All(setContextOp(ctx, knclq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kusogeeeeeenftchangelog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) FirstX(ctx context.Context) *KusogeeeeeeNFTChangeLog {
	node, err := knclq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KusogeeeeeeNFTChangeLog ID from the query.
// Returns a *NotFoundError when no KusogeeeeeeNFTChangeLog ID was found.
func (knclq *KusogeeeeeeNFTChangeLogQuery) FirstID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = knclq.Limit(1).IDs(setContextOp(ctx, knclq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kusogeeeeeenftchangelog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) FirstIDX(ctx context.Context) uint32 {
	id, err := knclq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KusogeeeeeeNFTChangeLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KusogeeeeeeNFTChangeLog entity is found.
// Returns a *NotFoundError when no KusogeeeeeeNFTChangeLog entities are found.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Only(ctx context.Context) (*KusogeeeeeeNFTChangeLog, error) {
	nodes, err := knclq.Limit(2).All(setContextOp(ctx, knclq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kusogeeeeeenftchangelog.Label}
	default:
		return nil, &NotSingularError{kusogeeeeeenftchangelog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) OnlyX(ctx context.Context) *KusogeeeeeeNFTChangeLog {
	node, err := knclq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KusogeeeeeeNFTChangeLog ID in the query.
// Returns a *NotSingularError when more than one KusogeeeeeeNFTChangeLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (knclq *KusogeeeeeeNFTChangeLogQuery) OnlyID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = knclq.Limit(2).IDs(setContextOp(ctx, knclq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kusogeeeeeenftchangelog.Label}
	default:
		err = &NotSingularError{kusogeeeeeenftchangelog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) OnlyIDX(ctx context.Context) uint32 {
	id, err := knclq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KusogeeeeeeNFTChangeLogs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) All(ctx context.Context) ([]*KusogeeeeeeNFTChangeLog, error) {
	ctx = setContextOp(ctx, knclq.ctx, "All")
	if err := knclq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*KusogeeeeeeNFTChangeLog, *KusogeeeeeeNFTChangeLogQuery]()
	return withInterceptors[[]*KusogeeeeeeNFTChangeLog](ctx, knclq, qr, knclq.inters)
}

// AllX is like All, but panics if an error occurs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) AllX(ctx context.Context) []*KusogeeeeeeNFTChangeLog {
	nodes, err := knclq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KusogeeeeeeNFTChangeLog IDs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) IDs(ctx context.Context) (ids []uint32, err error) {
	if knclq.ctx.Unique == nil && knclq.path != nil {
		knclq.Unique(true)
	}
	ctx = setContextOp(ctx, knclq.ctx, "IDs")
	if err = knclq.Select(kusogeeeeeenftchangelog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) IDsX(ctx context.Context) []uint32 {
	ids, err := knclq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, knclq.ctx, "Count")
	if err := knclq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, knclq, querierCount[*KusogeeeeeeNFTChangeLogQuery](), knclq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) CountX(ctx context.Context) int {
	count, err := knclq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, knclq.ctx, "Exist")
	switch _, err := knclq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (knclq *KusogeeeeeeNFTChangeLogQuery) ExistX(ctx context.Context) bool {
	exist, err := knclq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KusogeeeeeeNFTChangeLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Clone() *KusogeeeeeeNFTChangeLogQuery {
	if knclq == nil {
		return nil
	}
	return &KusogeeeeeeNFTChangeLogQuery{
		config:             knclq.config,
		ctx:                knclq.ctx.Clone(),
		order:              append([]kusogeeeeeenftchangelog.OrderOption{}, knclq.order...),
		inters:             append([]Interceptor{}, knclq.inters...),
		predicates:         append([]predicate.KusogeeeeeeNFTChangeLog{}, knclq.predicates...),
		withKusogeeeeeeNft: knclq.withKusogeeeeeeNft.Clone(),
		// clone intermediate query.
		sql:  knclq.sql.Clone(),
		path: knclq.path,
	}
}

// WithKusogeeeeeeNft tells the query-builder to eager-load the nodes that are connected to
// the "kusogeeeeee_nft" edge. The optional arguments are used to configure the query builder of the edge.
func (knclq *KusogeeeeeeNFTChangeLogQuery) WithKusogeeeeeeNft(opts ...func(*KusogeeeeeeNFTQuery)) *KusogeeeeeeNFTChangeLogQuery {
	query := (&KusogeeeeeeNFTClient{config: knclq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	knclq.withKusogeeeeeeNft = query
	return knclq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KusogeeeeeeNFTChangeLog.Query().
//		GroupBy(kusogeeeeeenftchangelog.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (knclq *KusogeeeeeeNFTChangeLogQuery) GroupBy(field string, fields ...string) *KusogeeeeeeNFTChangeLogGroupBy {
	knclq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &KusogeeeeeeNFTChangeLogGroupBy{build: knclq}
	grbuild.flds = &knclq.ctx.Fields
	grbuild.label = kusogeeeeeenftchangelog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at"`
//	}
//
//	client.KusogeeeeeeNFTChangeLog.Query().
//		Select(kusogeeeeeenftchangelog.FieldCreatedAt).
//		Scan(ctx, &v)
func (knclq *KusogeeeeeeNFTChangeLogQuery) Select(fields ...string) *KusogeeeeeeNFTChangeLogSelect {
	knclq.ctx.Fields = append(knclq.ctx.Fields, fields...)
	sbuild := &KusogeeeeeeNFTChangeLogSelect{KusogeeeeeeNFTChangeLogQuery: knclq}
	sbuild.label = kusogeeeeeenftchangelog.Label
	sbuild.flds, sbuild.scan = &knclq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a KusogeeeeeeNFTChangeLogSelect configured with the given aggregations.
func (knclq *KusogeeeeeeNFTChangeLogQuery) Aggregate(fns ...AggregateFunc) *KusogeeeeeeNFTChangeLogSelect {
	return knclq.Select().Aggregate(fns...)
}

func (knclq *KusogeeeeeeNFTChangeLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range knclq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, knclq); err != nil {
				return err
			}
		}
	}
	for _, f := range knclq.ctx.Fields {
		if !kusogeeeeeenftchangelog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if knclq.path != nil {
		prev, err := knclq.path(ctx)
		if err != nil {
			return err
		}
		knclq.sql = prev
	}
	return nil
}

func (knclq *KusogeeeeeeNFTChangeLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KusogeeeeeeNFTChangeLog, error) {
	var (
		nodes       = []*KusogeeeeeeNFTChangeLog{}
		_spec       = knclq.querySpec()
		loadedTypes = [1]bool{
			knclq.withKusogeeeeeeNft != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KusogeeeeeeNFTChangeLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KusogeeeeeeNFTChangeLog{config: knclq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, knclq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := knclq.withKusogeeeeeeNft; query != nil {
		if err := knclq.loadKusogeeeeeeNft(ctx, query, nodes, nil,
			func(n *KusogeeeeeeNFTChangeLog, e *KusogeeeeeeNFT) { n.Edges.KusogeeeeeeNft = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (knclq *KusogeeeeeeNFTChangeLogQuery) loadKusogeeeeeeNft(ctx context.Context, query *KusogeeeeeeNFTQuery, nodes []*KusogeeeeeeNFTChangeLog, init func(*KusogeeeeeeNFTChangeLog), assign func(*KusogeeeeeeNFTChangeLog, *KusogeeeeeeNFT)) error {
	ids := make([]uint32, 0, len(nodes))
	nodeids := make(map[uint32][]*KusogeeeeeeNFTChangeLog)
	for i := range nodes {
		fk := nodes[i].KusogeeeeeeNftID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(kusogeeeeeenft.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "kusogeeeeee_nft_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (knclq *KusogeeeeeeNFTChangeLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := knclq.querySpec()
	_spec.Node.Columns = knclq.ctx.Fields
	if len(knclq.ctx.Fields) > 0 {
		_spec.Unique = knclq.ctx.Unique != nil && *knclq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, knclq.driver, _spec)
}

func (knclq *KusogeeeeeeNFTChangeLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(kusogeeeeeenftchangelog.Table, kusogeeeeeenftchangelog.Columns, sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32))
	_spec.From = knclq.sql
	if unique := knclq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if knclq.path != nil {
		_spec.Unique = true
	}
	if fields := knclq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kusogeeeeeenftchangelog.FieldID)
		for i := range fields {
			if fields[i] != kusogeeeeeenftchangelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if knclq.withKusogeeeeeeNft != nil {
			_spec.Node.AddColumnOnce(kusogeeeeeenftchangelog.FieldKusogeeeeeeNftID)
		}
	}
	if ps := knclq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := knclq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := knclq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := knclq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (knclq *KusogeeeeeeNFTChangeLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(knclq.driver.Dialect())
	t1 := builder.Table(kusogeeeeeenftchangelog.Table)
	columns := knclq.ctx.Fields
	if len(columns) == 0 {
		columns = kusogeeeeeenftchangelog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if knclq.sql != nil {
		selector = knclq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if knclq.ctx.Unique != nil && *knclq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range knclq.predicates {
		p(selector)
	}
	for _, p := range knclq.order {
		p(selector)
	}
	if offset := knclq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := knclq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KusogeeeeeeNFTChangeLogGroupBy is the group-by builder for KusogeeeeeeNFTChangeLog entities.
type KusogeeeeeeNFTChangeLogGroupBy struct {
	selector
	build *KusogeeeeeeNFTChangeLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (knclgb *KusogeeeeeeNFTChangeLogGroupBy) Aggregate(fns ...AggregateFunc) *KusogeeeeeeNFTChangeLogGroupBy {
	knclgb.fns = append(knclgb.fns, fns...)
	return knclgb
}

// Scan applies the selector query and scans the result into the given value.
func (knclgb *KusogeeeeeeNFTChangeLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, knclgb.build.ctx, "GroupBy")
	if err := knclgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KusogeeeeeeNFTChangeLogQuery, *KusogeeeeeeNFTChangeLogGroupBy](ctx, knclgb.build, knclgb, knclgb.build.inters, v)
}

func (knclgb *KusogeeeeeeNFTChangeLogGroupBy) sqlScan(ctx context.Context, root *KusogeeeeeeNFTChangeLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(knclgb.fns))
	for _, fn := range knclgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*knclgb.flds)+len(knclgb.fns))
		for _, f := range *knclgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*knclgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := knclgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// KusogeeeeeeNFTChangeLogSelect is the builder for selecting fields of KusogeeeeeeNFTChangeLog entities.
type KusogeeeeeeNFTChangeLogSelect struct {
	*KusogeeeeeeNFTChangeLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (kncls *KusogeeeeeeNFTChangeLogSelect) Aggregate(fns ...AggregateFunc) *KusogeeeeeeNFTChangeLogSelect {
	kncls.fns = append(kncls.fns, fns...)
	return kncls
}

// Scan applies the selector query and scans the result into the given value.
func (kncls *KusogeeeeeeNFTChangeLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kncls.ctx, "Select")
	if err := kncls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KusogeeeeeeNFTChangeLogQuery, *KusogeeeeeeNFTChangeLogSelect](ctx, kncls.KusogeeeeeeNFTChangeLogQuery, kncls, kncls.inters, v)
}

func (kncls *KusogeeeeeeNFTChangeLogSelect) sqlScan(ctx context.Context, root *KusogeeeeeeNFTChangeLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(kncls.fns))
	for _, fn := range kncls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*kncls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kncls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
