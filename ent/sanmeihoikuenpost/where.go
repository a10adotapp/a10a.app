// Code generated by ent, DO NOT EDIT.

package sanmeihoikuenpost

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldDeletedAt, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldURL, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldTitle, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNotNull(FieldDeletedAt))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldContainsFold(FieldURL, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldContainsFold(FieldTitle, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.FieldContainsFold(FieldDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SanmeiHoikuenPost) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SanmeiHoikuenPost) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SanmeiHoikuenPost) predicate.SanmeiHoikuenPost {
	return predicate.SanmeiHoikuenPost(sql.NotPredicates(p))
}
