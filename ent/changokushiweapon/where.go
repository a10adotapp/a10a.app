// Code generated by ent, DO NOT EDIT.

package changokushiweapon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldDeletedAt, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldURI, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldName, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldRank, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldType, v))
}

// Skill applies equality check predicate on the "skill" field. It's identical to SkillEQ.
func Skill(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldSkill, v))
}

// Vitality applies equality check predicate on the "vitality" field. It's identical to VitalityEQ.
func Vitality(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldVitality, v))
}

// Strength applies equality check predicate on the "strength" field. It's identical to StrengthEQ.
func Strength(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldStrength, v))
}

// PhysicalDefense applies equality check predicate on the "physical_defense" field. It's identical to PhysicalDefenseEQ.
func PhysicalDefense(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldPhysicalDefense, v))
}

// MagicalDefense applies equality check predicate on the "magical_defense" field. It's identical to MagicalDefenseEQ.
func MagicalDefense(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldMagicalDefense, v))
}

// Agility applies equality check predicate on the "agility" field. It's identical to AgilityEQ.
func Agility(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldAgility, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotNull(FieldDeletedAt))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldContainsFold(FieldURI, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldContainsFold(FieldName, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldRank, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldContainsFold(FieldType, v))
}

// SkillEQ applies the EQ predicate on the "skill" field.
func SkillEQ(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldSkill, v))
}

// SkillNEQ applies the NEQ predicate on the "skill" field.
func SkillNEQ(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldSkill, v))
}

// SkillIn applies the In predicate on the "skill" field.
func SkillIn(vs ...string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldSkill, vs...))
}

// SkillNotIn applies the NotIn predicate on the "skill" field.
func SkillNotIn(vs ...string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldSkill, vs...))
}

// SkillGT applies the GT predicate on the "skill" field.
func SkillGT(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldSkill, v))
}

// SkillGTE applies the GTE predicate on the "skill" field.
func SkillGTE(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldSkill, v))
}

// SkillLT applies the LT predicate on the "skill" field.
func SkillLT(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldSkill, v))
}

// SkillLTE applies the LTE predicate on the "skill" field.
func SkillLTE(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldSkill, v))
}

// SkillContains applies the Contains predicate on the "skill" field.
func SkillContains(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldContains(FieldSkill, v))
}

// SkillHasPrefix applies the HasPrefix predicate on the "skill" field.
func SkillHasPrefix(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldHasPrefix(FieldSkill, v))
}

// SkillHasSuffix applies the HasSuffix predicate on the "skill" field.
func SkillHasSuffix(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldHasSuffix(FieldSkill, v))
}

// SkillEqualFold applies the EqualFold predicate on the "skill" field.
func SkillEqualFold(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEqualFold(FieldSkill, v))
}

// SkillContainsFold applies the ContainsFold predicate on the "skill" field.
func SkillContainsFold(v string) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldContainsFold(FieldSkill, v))
}

// VitalityEQ applies the EQ predicate on the "vitality" field.
func VitalityEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldVitality, v))
}

// VitalityNEQ applies the NEQ predicate on the "vitality" field.
func VitalityNEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldVitality, v))
}

// VitalityIn applies the In predicate on the "vitality" field.
func VitalityIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldVitality, vs...))
}

// VitalityNotIn applies the NotIn predicate on the "vitality" field.
func VitalityNotIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldVitality, vs...))
}

// VitalityGT applies the GT predicate on the "vitality" field.
func VitalityGT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldVitality, v))
}

// VitalityGTE applies the GTE predicate on the "vitality" field.
func VitalityGTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldVitality, v))
}

// VitalityLT applies the LT predicate on the "vitality" field.
func VitalityLT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldVitality, v))
}

// VitalityLTE applies the LTE predicate on the "vitality" field.
func VitalityLTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldVitality, v))
}

// StrengthEQ applies the EQ predicate on the "strength" field.
func StrengthEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldStrength, v))
}

// StrengthNEQ applies the NEQ predicate on the "strength" field.
func StrengthNEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldStrength, v))
}

// StrengthIn applies the In predicate on the "strength" field.
func StrengthIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldStrength, vs...))
}

// StrengthNotIn applies the NotIn predicate on the "strength" field.
func StrengthNotIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldStrength, vs...))
}

// StrengthGT applies the GT predicate on the "strength" field.
func StrengthGT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldStrength, v))
}

// StrengthGTE applies the GTE predicate on the "strength" field.
func StrengthGTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldStrength, v))
}

// StrengthLT applies the LT predicate on the "strength" field.
func StrengthLT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldStrength, v))
}

// StrengthLTE applies the LTE predicate on the "strength" field.
func StrengthLTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldStrength, v))
}

// PhysicalDefenseEQ applies the EQ predicate on the "physical_defense" field.
func PhysicalDefenseEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldPhysicalDefense, v))
}

// PhysicalDefenseNEQ applies the NEQ predicate on the "physical_defense" field.
func PhysicalDefenseNEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldPhysicalDefense, v))
}

// PhysicalDefenseIn applies the In predicate on the "physical_defense" field.
func PhysicalDefenseIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldPhysicalDefense, vs...))
}

// PhysicalDefenseNotIn applies the NotIn predicate on the "physical_defense" field.
func PhysicalDefenseNotIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldPhysicalDefense, vs...))
}

// PhysicalDefenseGT applies the GT predicate on the "physical_defense" field.
func PhysicalDefenseGT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldPhysicalDefense, v))
}

// PhysicalDefenseGTE applies the GTE predicate on the "physical_defense" field.
func PhysicalDefenseGTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldPhysicalDefense, v))
}

// PhysicalDefenseLT applies the LT predicate on the "physical_defense" field.
func PhysicalDefenseLT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldPhysicalDefense, v))
}

// PhysicalDefenseLTE applies the LTE predicate on the "physical_defense" field.
func PhysicalDefenseLTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldPhysicalDefense, v))
}

// MagicalDefenseEQ applies the EQ predicate on the "magical_defense" field.
func MagicalDefenseEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldMagicalDefense, v))
}

// MagicalDefenseNEQ applies the NEQ predicate on the "magical_defense" field.
func MagicalDefenseNEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldMagicalDefense, v))
}

// MagicalDefenseIn applies the In predicate on the "magical_defense" field.
func MagicalDefenseIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldMagicalDefense, vs...))
}

// MagicalDefenseNotIn applies the NotIn predicate on the "magical_defense" field.
func MagicalDefenseNotIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldMagicalDefense, vs...))
}

// MagicalDefenseGT applies the GT predicate on the "magical_defense" field.
func MagicalDefenseGT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldMagicalDefense, v))
}

// MagicalDefenseGTE applies the GTE predicate on the "magical_defense" field.
func MagicalDefenseGTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldMagicalDefense, v))
}

// MagicalDefenseLT applies the LT predicate on the "magical_defense" field.
func MagicalDefenseLT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldMagicalDefense, v))
}

// MagicalDefenseLTE applies the LTE predicate on the "magical_defense" field.
func MagicalDefenseLTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldMagicalDefense, v))
}

// AgilityEQ applies the EQ predicate on the "agility" field.
func AgilityEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldEQ(FieldAgility, v))
}

// AgilityNEQ applies the NEQ predicate on the "agility" field.
func AgilityNEQ(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNEQ(FieldAgility, v))
}

// AgilityIn applies the In predicate on the "agility" field.
func AgilityIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldIn(FieldAgility, vs...))
}

// AgilityNotIn applies the NotIn predicate on the "agility" field.
func AgilityNotIn(vs ...int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldNotIn(FieldAgility, vs...))
}

// AgilityGT applies the GT predicate on the "agility" field.
func AgilityGT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGT(FieldAgility, v))
}

// AgilityGTE applies the GTE predicate on the "agility" field.
func AgilityGTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldGTE(FieldAgility, v))
}

// AgilityLT applies the LT predicate on the "agility" field.
func AgilityLT(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLT(FieldAgility, v))
}

// AgilityLTE applies the LTE predicate on the "agility" field.
func AgilityLTE(v int) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.FieldLTE(FieldAgility, v))
}

// HasChangeLogs applies the HasEdge predicate on the "change_logs" edge.
func HasChangeLogs() predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChangeLogsTable, ChangeLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChangeLogsWith applies the HasEdge predicate on the "change_logs" edge with a given conditions (other predicates).
func HasChangeLogsWith(preds ...predicate.ChangokushiWeaponChangeLog) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(func(s *sql.Selector) {
		step := newChangeLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChangokushiWeapon) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChangokushiWeapon) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChangokushiWeapon) predicate.ChangokushiWeapon {
	return predicate.ChangokushiWeapon(sql.NotPredicates(p))
}
