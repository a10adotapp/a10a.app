// Code generated by ent, DO NOT EDIT.

package changokushiweapon

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the changokushiweapon type in the database.
	Label = "changokushi_weapon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSkill holds the string denoting the skill field in the database.
	FieldSkill = "skill"
	// FieldVitality holds the string denoting the vitality field in the database.
	FieldVitality = "vitality"
	// FieldStrength holds the string denoting the strength field in the database.
	FieldStrength = "strength"
	// FieldPhysicalDefense holds the string denoting the physical_defense field in the database.
	FieldPhysicalDefense = "physical_defense"
	// FieldMagicalDefense holds the string denoting the magical_defense field in the database.
	FieldMagicalDefense = "magical_defense"
	// FieldAgility holds the string denoting the agility field in the database.
	FieldAgility = "agility"
	// EdgeChangeLogs holds the string denoting the change_logs edge name in mutations.
	EdgeChangeLogs = "change_logs"
	// Table holds the table name of the changokushiweapon in the database.
	Table = "changokushi_weapon"
	// ChangeLogsTable is the table that holds the change_logs relation/edge.
	ChangeLogsTable = "changokushi_weapon_change_logs"
	// ChangeLogsInverseTable is the table name for the ChangokushiWeaponChangeLog entity.
	// It exists in this package in order to avoid circular dependency with the "changokushiweaponchangelog" package.
	ChangeLogsInverseTable = "changokushi_weapon_change_logs"
	// ChangeLogsColumn is the table column denoting the change_logs relation/edge.
	ChangeLogsColumn = "changokushi_weapon_id"
)

// Columns holds all SQL columns for changokushiweapon fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldURI,
	FieldName,
	FieldRank,
	FieldType,
	FieldSkill,
	FieldVitality,
	FieldStrength,
	FieldPhysicalDefense,
	FieldMagicalDefense,
	FieldAgility,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/a10adotapp/a10a.app/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ChangokushiWeapon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByURI orders the results by the uri field.
func ByURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURI, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySkill orders the results by the skill field.
func BySkill(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkill, opts...).ToFunc()
}

// ByVitality orders the results by the vitality field.
func ByVitality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVitality, opts...).ToFunc()
}

// ByStrength orders the results by the strength field.
func ByStrength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrength, opts...).ToFunc()
}

// ByPhysicalDefense orders the results by the physical_defense field.
func ByPhysicalDefense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhysicalDefense, opts...).ToFunc()
}

// ByMagicalDefense orders the results by the magical_defense field.
func ByMagicalDefense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMagicalDefense, opts...).ToFunc()
}

// ByAgility orders the results by the agility field.
func ByAgility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgility, opts...).ToFunc()
}

// ByChangeLogsCount orders the results by change_logs count.
func ByChangeLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChangeLogsStep(), opts...)
	}
}

// ByChangeLogs orders the results by change_logs terms.
func ByChangeLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChangeLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChangeLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChangeLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChangeLogsTable, ChangeLogsColumn),
	)
}
