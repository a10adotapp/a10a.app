// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/changokushiweapon"
	"github.com/a10adotapp/a10a.app/ent/changokushiweaponchangelog"
)

// Changokushi weapon change log
type ChangokushiWeaponChangeLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// ChangokushiWeaponID holds the value of the "changokushi_weapon_id" field.
	ChangokushiWeaponID uint32 `json:"changokushi_weapon_id"`
	// Status holds the value of the "status" field.
	Status string `json:"status"`
	// Price holds the value of the "price" field.
	Price int `json:"price"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChangokushiWeaponChangeLogQuery when eager-loading is set.
	Edges        ChangokushiWeaponChangeLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChangokushiWeaponChangeLogEdges holds the relations/edges for other nodes in the graph.
type ChangokushiWeaponChangeLogEdges struct {
	// ChangokushiWeapon holds the value of the changokushi_weapon edge.
	ChangokushiWeapon *ChangokushiWeapon `json:"changokushi_weapon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChangokushiWeaponOrErr returns the ChangokushiWeapon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChangokushiWeaponChangeLogEdges) ChangokushiWeaponOrErr() (*ChangokushiWeapon, error) {
	if e.loadedTypes[0] {
		if e.ChangokushiWeapon == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: changokushiweapon.Label}
		}
		return e.ChangokushiWeapon, nil
	}
	return nil, &NotLoadedError{edge: "changokushi_weapon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChangokushiWeaponChangeLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case changokushiweaponchangelog.FieldID, changokushiweaponchangelog.FieldChangokushiWeaponID, changokushiweaponchangelog.FieldPrice:
			values[i] = new(sql.NullInt64)
		case changokushiweaponchangelog.FieldStatus:
			values[i] = new(sql.NullString)
		case changokushiweaponchangelog.FieldCreatedAt, changokushiweaponchangelog.FieldUpdatedAt, changokushiweaponchangelog.FieldDeletedAt, changokushiweaponchangelog.FieldPublishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChangokushiWeaponChangeLog fields.
func (cwcl *ChangokushiWeaponChangeLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case changokushiweaponchangelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cwcl.ID = uint32(value.Int64)
		case changokushiweaponchangelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cwcl.CreatedAt = value.Time
			}
		case changokushiweaponchangelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cwcl.UpdatedAt = value.Time
			}
		case changokushiweaponchangelog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cwcl.DeletedAt = new(time.Time)
				*cwcl.DeletedAt = value.Time
			}
		case changokushiweaponchangelog.FieldChangokushiWeaponID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field changokushi_weapon_id", values[i])
			} else if value.Valid {
				cwcl.ChangokushiWeaponID = uint32(value.Int64)
			}
		case changokushiweaponchangelog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cwcl.Status = value.String
			}
		case changokushiweaponchangelog.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				cwcl.Price = int(value.Int64)
			}
		case changokushiweaponchangelog.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				cwcl.PublishedAt = value.Time
			}
		default:
			cwcl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChangokushiWeaponChangeLog.
// This includes values selected through modifiers, order, etc.
func (cwcl *ChangokushiWeaponChangeLog) Value(name string) (ent.Value, error) {
	return cwcl.selectValues.Get(name)
}

// QueryChangokushiWeapon queries the "changokushi_weapon" edge of the ChangokushiWeaponChangeLog entity.
func (cwcl *ChangokushiWeaponChangeLog) QueryChangokushiWeapon() *ChangokushiWeaponQuery {
	return NewChangokushiWeaponChangeLogClient(cwcl.config).QueryChangokushiWeapon(cwcl)
}

// Update returns a builder for updating this ChangokushiWeaponChangeLog.
// Note that you need to call ChangokushiWeaponChangeLog.Unwrap() before calling this method if this ChangokushiWeaponChangeLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (cwcl *ChangokushiWeaponChangeLog) Update() *ChangokushiWeaponChangeLogUpdateOne {
	return NewChangokushiWeaponChangeLogClient(cwcl.config).UpdateOne(cwcl)
}

// Unwrap unwraps the ChangokushiWeaponChangeLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cwcl *ChangokushiWeaponChangeLog) Unwrap() *ChangokushiWeaponChangeLog {
	_tx, ok := cwcl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChangokushiWeaponChangeLog is not a transactional entity")
	}
	cwcl.config.driver = _tx.drv
	return cwcl
}

// String implements the fmt.Stringer.
func (cwcl *ChangokushiWeaponChangeLog) String() string {
	var builder strings.Builder
	builder.WriteString("ChangokushiWeaponChangeLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cwcl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cwcl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cwcl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cwcl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("changokushi_weapon_id=")
	builder.WriteString(fmt.Sprintf("%v", cwcl.ChangokushiWeaponID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(cwcl.Status)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", cwcl.Price))
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(cwcl.PublishedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChangokushiWeaponChangeLogs is a parsable slice of ChangokushiWeaponChangeLog.
type ChangokushiWeaponChangeLogs []*ChangokushiWeaponChangeLog
