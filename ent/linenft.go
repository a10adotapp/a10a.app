// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/linenft"
	"github.com/a10adotapp/a10a.app/ent/linenftmillionarthursproperty"
)

// LINE NFT
type LINENFT struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// LineNftID holds the value of the "line_nft_id" field.
	LineNftID uint32 `json:"line_nft_id"`
	// ContractID holds the value of the "contract_id" field.
	ContractID string `json:"contract_id"`
	// TokenType holds the value of the "token_type" field.
	TokenType string `json:"token_type"`
	// TokenIndex holds the value of the "token_index" field.
	TokenIndex string `json:"token_index"`
	// TokenName holds the value of the "token_name" field.
	TokenName string `json:"token_name"`
	// TokenDescription holds the value of the "token_description" field.
	TokenDescription string `json:"token_description"`
	// TokenContentURL holds the value of the "token_content_url" field.
	TokenContentURL string `json:"token_content_url"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LINENFTQuery when eager-loading is set.
	Edges        LINENFTEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LINENFTEdges holds the relations/edges for other nodes in the graph.
type LINENFTEdges struct {
	// Activities holds the value of the activities edge.
	Activities []*LINENFTActivity `json:"activities,omitempty"`
	// MillionArthursProperties holds the value of the million_arthurs_properties edge.
	MillionArthursProperties *LINENFTMillionArthursProperty `json:"million_arthurs_properties,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e LINENFTEdges) ActivitiesOrErr() ([]*LINENFTActivity, error) {
	if e.loadedTypes[0] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// MillionArthursPropertiesOrErr returns the MillionArthursProperties value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LINENFTEdges) MillionArthursPropertiesOrErr() (*LINENFTMillionArthursProperty, error) {
	if e.loadedTypes[1] {
		if e.MillionArthursProperties == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: linenftmillionarthursproperty.Label}
		}
		return e.MillionArthursProperties, nil
	}
	return nil, &NotLoadedError{edge: "million_arthurs_properties"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LINENFT) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case linenft.FieldID, linenft.FieldLineNftID:
			values[i] = new(sql.NullInt64)
		case linenft.FieldContractID, linenft.FieldTokenType, linenft.FieldTokenIndex, linenft.FieldTokenName, linenft.FieldTokenDescription, linenft.FieldTokenContentURL:
			values[i] = new(sql.NullString)
		case linenft.FieldCreatedAt, linenft.FieldUpdatedAt, linenft.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LINENFT fields.
func (l *LINENFT) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linenft.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = uint32(value.Int64)
		case linenft.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case linenft.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case linenft.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = new(time.Time)
				*l.DeletedAt = value.Time
			}
		case linenft.FieldLineNftID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field line_nft_id", values[i])
			} else if value.Valid {
				l.LineNftID = uint32(value.Int64)
			}
		case linenft.FieldContractID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_id", values[i])
			} else if value.Valid {
				l.ContractID = value.String
			}
		case linenft.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				l.TokenType = value.String
			}
		case linenft.FieldTokenIndex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_index", values[i])
			} else if value.Valid {
				l.TokenIndex = value.String
			}
		case linenft.FieldTokenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_name", values[i])
			} else if value.Valid {
				l.TokenName = value.String
			}
		case linenft.FieldTokenDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_description", values[i])
			} else if value.Valid {
				l.TokenDescription = value.String
			}
		case linenft.FieldTokenContentURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_content_url", values[i])
			} else if value.Valid {
				l.TokenContentURL = value.String
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LINENFT.
// This includes values selected through modifiers, order, etc.
func (l *LINENFT) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryActivities queries the "activities" edge of the LINENFT entity.
func (l *LINENFT) QueryActivities() *LINENFTActivityQuery {
	return NewLINENFTClient(l.config).QueryActivities(l)
}

// QueryMillionArthursProperties queries the "million_arthurs_properties" edge of the LINENFT entity.
func (l *LINENFT) QueryMillionArthursProperties() *LINENFTMillionArthursPropertyQuery {
	return NewLINENFTClient(l.config).QueryMillionArthursProperties(l)
}

// Update returns a builder for updating this LINENFT.
// Note that you need to call LINENFT.Unwrap() before calling this method if this LINENFT
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *LINENFT) Update() *LINENFTUpdateOne {
	return NewLINENFTClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the LINENFT entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *LINENFT) Unwrap() *LINENFT {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: LINENFT is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *LINENFT) String() string {
	var builder strings.Builder
	builder.WriteString("LINENFT(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := l.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("line_nft_id=")
	builder.WriteString(fmt.Sprintf("%v", l.LineNftID))
	builder.WriteString(", ")
	builder.WriteString("contract_id=")
	builder.WriteString(l.ContractID)
	builder.WriteString(", ")
	builder.WriteString("token_type=")
	builder.WriteString(l.TokenType)
	builder.WriteString(", ")
	builder.WriteString("token_index=")
	builder.WriteString(l.TokenIndex)
	builder.WriteString(", ")
	builder.WriteString("token_name=")
	builder.WriteString(l.TokenName)
	builder.WriteString(", ")
	builder.WriteString("token_description=")
	builder.WriteString(l.TokenDescription)
	builder.WriteString(", ")
	builder.WriteString("token_content_url=")
	builder.WriteString(l.TokenContentURL)
	builder.WriteByte(')')
	return builder.String()
}

// LINENFTs is a parsable slice of LINENFT.
type LINENFTs []*LINENFT
