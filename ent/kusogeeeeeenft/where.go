// Code generated by ent, DO NOT EDIT.

package kusogeeeeeenft

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldDeletedAt, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldURI, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldName, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldStatus, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldPrice, v))
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldPublishedAt, v))
}

// WeaponRank applies equality check predicate on the "weapon_rank" field. It's identical to WeaponRankEQ.
func WeaponRank(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponRank, v))
}

// WeaponType applies equality check predicate on the "weapon_type" field. It's identical to WeaponTypeEQ.
func WeaponType(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponType, v))
}

// WeaponVitality applies equality check predicate on the "weapon_vitality" field. It's identical to WeaponVitalityEQ.
func WeaponVitality(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponVitality, v))
}

// WeaponStrength applies equality check predicate on the "weapon_strength" field. It's identical to WeaponStrengthEQ.
func WeaponStrength(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponStrength, v))
}

// WeaponPhysicalDefense applies equality check predicate on the "weapon_physical_defense" field. It's identical to WeaponPhysicalDefenseEQ.
func WeaponPhysicalDefense(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponPhysicalDefense, v))
}

// WeaponMagicalDefense applies equality check predicate on the "weapon_magical_defense" field. It's identical to WeaponMagicalDefenseEQ.
func WeaponMagicalDefense(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponMagicalDefense, v))
}

// WeaponAgility applies equality check predicate on the "weapon_agility" field. It's identical to WeaponAgilityEQ.
func WeaponAgility(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponAgility, v))
}

// CharacterRank applies equality check predicate on the "character_rank" field. It's identical to CharacterRankEQ.
func CharacterRank(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldCharacterRank, v))
}

// CharacterTotalSupply applies equality check predicate on the "character_total_supply" field. It's identical to CharacterTotalSupplyEQ.
func CharacterTotalSupply(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldCharacterTotalSupply, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldDeletedAt))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContainsFold(FieldURI, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContainsFold(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContainsFold(FieldName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContainsFold(FieldStatus, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldPrice, v))
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldPublishedAt, v))
}

// WeaponRankEQ applies the EQ predicate on the "weapon_rank" field.
func WeaponRankEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponRank, v))
}

// WeaponRankNEQ applies the NEQ predicate on the "weapon_rank" field.
func WeaponRankNEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldWeaponRank, v))
}

// WeaponRankIn applies the In predicate on the "weapon_rank" field.
func WeaponRankIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldWeaponRank, vs...))
}

// WeaponRankNotIn applies the NotIn predicate on the "weapon_rank" field.
func WeaponRankNotIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldWeaponRank, vs...))
}

// WeaponRankGT applies the GT predicate on the "weapon_rank" field.
func WeaponRankGT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldWeaponRank, v))
}

// WeaponRankGTE applies the GTE predicate on the "weapon_rank" field.
func WeaponRankGTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldWeaponRank, v))
}

// WeaponRankLT applies the LT predicate on the "weapon_rank" field.
func WeaponRankLT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldWeaponRank, v))
}

// WeaponRankLTE applies the LTE predicate on the "weapon_rank" field.
func WeaponRankLTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldWeaponRank, v))
}

// WeaponRankIsNil applies the IsNil predicate on the "weapon_rank" field.
func WeaponRankIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldWeaponRank))
}

// WeaponRankNotNil applies the NotNil predicate on the "weapon_rank" field.
func WeaponRankNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldWeaponRank))
}

// WeaponTypeEQ applies the EQ predicate on the "weapon_type" field.
func WeaponTypeEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponType, v))
}

// WeaponTypeNEQ applies the NEQ predicate on the "weapon_type" field.
func WeaponTypeNEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldWeaponType, v))
}

// WeaponTypeIn applies the In predicate on the "weapon_type" field.
func WeaponTypeIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldWeaponType, vs...))
}

// WeaponTypeNotIn applies the NotIn predicate on the "weapon_type" field.
func WeaponTypeNotIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldWeaponType, vs...))
}

// WeaponTypeGT applies the GT predicate on the "weapon_type" field.
func WeaponTypeGT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldWeaponType, v))
}

// WeaponTypeGTE applies the GTE predicate on the "weapon_type" field.
func WeaponTypeGTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldWeaponType, v))
}

// WeaponTypeLT applies the LT predicate on the "weapon_type" field.
func WeaponTypeLT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldWeaponType, v))
}

// WeaponTypeLTE applies the LTE predicate on the "weapon_type" field.
func WeaponTypeLTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldWeaponType, v))
}

// WeaponTypeContains applies the Contains predicate on the "weapon_type" field.
func WeaponTypeContains(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContains(FieldWeaponType, v))
}

// WeaponTypeHasPrefix applies the HasPrefix predicate on the "weapon_type" field.
func WeaponTypeHasPrefix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasPrefix(FieldWeaponType, v))
}

// WeaponTypeHasSuffix applies the HasSuffix predicate on the "weapon_type" field.
func WeaponTypeHasSuffix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasSuffix(FieldWeaponType, v))
}

// WeaponTypeIsNil applies the IsNil predicate on the "weapon_type" field.
func WeaponTypeIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldWeaponType))
}

// WeaponTypeNotNil applies the NotNil predicate on the "weapon_type" field.
func WeaponTypeNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldWeaponType))
}

// WeaponTypeEqualFold applies the EqualFold predicate on the "weapon_type" field.
func WeaponTypeEqualFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEqualFold(FieldWeaponType, v))
}

// WeaponTypeContainsFold applies the ContainsFold predicate on the "weapon_type" field.
func WeaponTypeContainsFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContainsFold(FieldWeaponType, v))
}

// WeaponVitalityEQ applies the EQ predicate on the "weapon_vitality" field.
func WeaponVitalityEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponVitality, v))
}

// WeaponVitalityNEQ applies the NEQ predicate on the "weapon_vitality" field.
func WeaponVitalityNEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldWeaponVitality, v))
}

// WeaponVitalityIn applies the In predicate on the "weapon_vitality" field.
func WeaponVitalityIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldWeaponVitality, vs...))
}

// WeaponVitalityNotIn applies the NotIn predicate on the "weapon_vitality" field.
func WeaponVitalityNotIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldWeaponVitality, vs...))
}

// WeaponVitalityGT applies the GT predicate on the "weapon_vitality" field.
func WeaponVitalityGT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldWeaponVitality, v))
}

// WeaponVitalityGTE applies the GTE predicate on the "weapon_vitality" field.
func WeaponVitalityGTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldWeaponVitality, v))
}

// WeaponVitalityLT applies the LT predicate on the "weapon_vitality" field.
func WeaponVitalityLT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldWeaponVitality, v))
}

// WeaponVitalityLTE applies the LTE predicate on the "weapon_vitality" field.
func WeaponVitalityLTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldWeaponVitality, v))
}

// WeaponVitalityIsNil applies the IsNil predicate on the "weapon_vitality" field.
func WeaponVitalityIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldWeaponVitality))
}

// WeaponVitalityNotNil applies the NotNil predicate on the "weapon_vitality" field.
func WeaponVitalityNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldWeaponVitality))
}

// WeaponStrengthEQ applies the EQ predicate on the "weapon_strength" field.
func WeaponStrengthEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponStrength, v))
}

// WeaponStrengthNEQ applies the NEQ predicate on the "weapon_strength" field.
func WeaponStrengthNEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldWeaponStrength, v))
}

// WeaponStrengthIn applies the In predicate on the "weapon_strength" field.
func WeaponStrengthIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldWeaponStrength, vs...))
}

// WeaponStrengthNotIn applies the NotIn predicate on the "weapon_strength" field.
func WeaponStrengthNotIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldWeaponStrength, vs...))
}

// WeaponStrengthGT applies the GT predicate on the "weapon_strength" field.
func WeaponStrengthGT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldWeaponStrength, v))
}

// WeaponStrengthGTE applies the GTE predicate on the "weapon_strength" field.
func WeaponStrengthGTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldWeaponStrength, v))
}

// WeaponStrengthLT applies the LT predicate on the "weapon_strength" field.
func WeaponStrengthLT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldWeaponStrength, v))
}

// WeaponStrengthLTE applies the LTE predicate on the "weapon_strength" field.
func WeaponStrengthLTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldWeaponStrength, v))
}

// WeaponStrengthIsNil applies the IsNil predicate on the "weapon_strength" field.
func WeaponStrengthIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldWeaponStrength))
}

// WeaponStrengthNotNil applies the NotNil predicate on the "weapon_strength" field.
func WeaponStrengthNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldWeaponStrength))
}

// WeaponPhysicalDefenseEQ applies the EQ predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponPhysicalDefense, v))
}

// WeaponPhysicalDefenseNEQ applies the NEQ predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseNEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldWeaponPhysicalDefense, v))
}

// WeaponPhysicalDefenseIn applies the In predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldWeaponPhysicalDefense, vs...))
}

// WeaponPhysicalDefenseNotIn applies the NotIn predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseNotIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldWeaponPhysicalDefense, vs...))
}

// WeaponPhysicalDefenseGT applies the GT predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseGT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldWeaponPhysicalDefense, v))
}

// WeaponPhysicalDefenseGTE applies the GTE predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseGTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldWeaponPhysicalDefense, v))
}

// WeaponPhysicalDefenseLT applies the LT predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseLT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldWeaponPhysicalDefense, v))
}

// WeaponPhysicalDefenseLTE applies the LTE predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseLTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldWeaponPhysicalDefense, v))
}

// WeaponPhysicalDefenseIsNil applies the IsNil predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldWeaponPhysicalDefense))
}

// WeaponPhysicalDefenseNotNil applies the NotNil predicate on the "weapon_physical_defense" field.
func WeaponPhysicalDefenseNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldWeaponPhysicalDefense))
}

// WeaponMagicalDefenseEQ applies the EQ predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponMagicalDefense, v))
}

// WeaponMagicalDefenseNEQ applies the NEQ predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseNEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldWeaponMagicalDefense, v))
}

// WeaponMagicalDefenseIn applies the In predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldWeaponMagicalDefense, vs...))
}

// WeaponMagicalDefenseNotIn applies the NotIn predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseNotIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldWeaponMagicalDefense, vs...))
}

// WeaponMagicalDefenseGT applies the GT predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseGT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldWeaponMagicalDefense, v))
}

// WeaponMagicalDefenseGTE applies the GTE predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseGTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldWeaponMagicalDefense, v))
}

// WeaponMagicalDefenseLT applies the LT predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseLT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldWeaponMagicalDefense, v))
}

// WeaponMagicalDefenseLTE applies the LTE predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseLTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldWeaponMagicalDefense, v))
}

// WeaponMagicalDefenseIsNil applies the IsNil predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldWeaponMagicalDefense))
}

// WeaponMagicalDefenseNotNil applies the NotNil predicate on the "weapon_magical_defense" field.
func WeaponMagicalDefenseNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldWeaponMagicalDefense))
}

// WeaponAgilityEQ applies the EQ predicate on the "weapon_agility" field.
func WeaponAgilityEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldWeaponAgility, v))
}

// WeaponAgilityNEQ applies the NEQ predicate on the "weapon_agility" field.
func WeaponAgilityNEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldWeaponAgility, v))
}

// WeaponAgilityIn applies the In predicate on the "weapon_agility" field.
func WeaponAgilityIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldWeaponAgility, vs...))
}

// WeaponAgilityNotIn applies the NotIn predicate on the "weapon_agility" field.
func WeaponAgilityNotIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldWeaponAgility, vs...))
}

// WeaponAgilityGT applies the GT predicate on the "weapon_agility" field.
func WeaponAgilityGT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldWeaponAgility, v))
}

// WeaponAgilityGTE applies the GTE predicate on the "weapon_agility" field.
func WeaponAgilityGTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldWeaponAgility, v))
}

// WeaponAgilityLT applies the LT predicate on the "weapon_agility" field.
func WeaponAgilityLT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldWeaponAgility, v))
}

// WeaponAgilityLTE applies the LTE predicate on the "weapon_agility" field.
func WeaponAgilityLTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldWeaponAgility, v))
}

// WeaponAgilityIsNil applies the IsNil predicate on the "weapon_agility" field.
func WeaponAgilityIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldWeaponAgility))
}

// WeaponAgilityNotNil applies the NotNil predicate on the "weapon_agility" field.
func WeaponAgilityNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldWeaponAgility))
}

// CharacterRankEQ applies the EQ predicate on the "character_rank" field.
func CharacterRankEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldCharacterRank, v))
}

// CharacterRankNEQ applies the NEQ predicate on the "character_rank" field.
func CharacterRankNEQ(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldCharacterRank, v))
}

// CharacterRankIn applies the In predicate on the "character_rank" field.
func CharacterRankIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldCharacterRank, vs...))
}

// CharacterRankNotIn applies the NotIn predicate on the "character_rank" field.
func CharacterRankNotIn(vs ...string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldCharacterRank, vs...))
}

// CharacterRankGT applies the GT predicate on the "character_rank" field.
func CharacterRankGT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldCharacterRank, v))
}

// CharacterRankGTE applies the GTE predicate on the "character_rank" field.
func CharacterRankGTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldCharacterRank, v))
}

// CharacterRankLT applies the LT predicate on the "character_rank" field.
func CharacterRankLT(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldCharacterRank, v))
}

// CharacterRankLTE applies the LTE predicate on the "character_rank" field.
func CharacterRankLTE(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldCharacterRank, v))
}

// CharacterRankContains applies the Contains predicate on the "character_rank" field.
func CharacterRankContains(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContains(FieldCharacterRank, v))
}

// CharacterRankHasPrefix applies the HasPrefix predicate on the "character_rank" field.
func CharacterRankHasPrefix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasPrefix(FieldCharacterRank, v))
}

// CharacterRankHasSuffix applies the HasSuffix predicate on the "character_rank" field.
func CharacterRankHasSuffix(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldHasSuffix(FieldCharacterRank, v))
}

// CharacterRankIsNil applies the IsNil predicate on the "character_rank" field.
func CharacterRankIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldCharacterRank))
}

// CharacterRankNotNil applies the NotNil predicate on the "character_rank" field.
func CharacterRankNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldCharacterRank))
}

// CharacterRankEqualFold applies the EqualFold predicate on the "character_rank" field.
func CharacterRankEqualFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEqualFold(FieldCharacterRank, v))
}

// CharacterRankContainsFold applies the ContainsFold predicate on the "character_rank" field.
func CharacterRankContainsFold(v string) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldContainsFold(FieldCharacterRank, v))
}

// CharacterTotalSupplyEQ applies the EQ predicate on the "character_total_supply" field.
func CharacterTotalSupplyEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldEQ(FieldCharacterTotalSupply, v))
}

// CharacterTotalSupplyNEQ applies the NEQ predicate on the "character_total_supply" field.
func CharacterTotalSupplyNEQ(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNEQ(FieldCharacterTotalSupply, v))
}

// CharacterTotalSupplyIn applies the In predicate on the "character_total_supply" field.
func CharacterTotalSupplyIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIn(FieldCharacterTotalSupply, vs...))
}

// CharacterTotalSupplyNotIn applies the NotIn predicate on the "character_total_supply" field.
func CharacterTotalSupplyNotIn(vs ...int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotIn(FieldCharacterTotalSupply, vs...))
}

// CharacterTotalSupplyGT applies the GT predicate on the "character_total_supply" field.
func CharacterTotalSupplyGT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGT(FieldCharacterTotalSupply, v))
}

// CharacterTotalSupplyGTE applies the GTE predicate on the "character_total_supply" field.
func CharacterTotalSupplyGTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldGTE(FieldCharacterTotalSupply, v))
}

// CharacterTotalSupplyLT applies the LT predicate on the "character_total_supply" field.
func CharacterTotalSupplyLT(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLT(FieldCharacterTotalSupply, v))
}

// CharacterTotalSupplyLTE applies the LTE predicate on the "character_total_supply" field.
func CharacterTotalSupplyLTE(v int) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldLTE(FieldCharacterTotalSupply, v))
}

// CharacterTotalSupplyIsNil applies the IsNil predicate on the "character_total_supply" field.
func CharacterTotalSupplyIsNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldIsNull(FieldCharacterTotalSupply))
}

// CharacterTotalSupplyNotNil applies the NotNil predicate on the "character_total_supply" field.
func CharacterTotalSupplyNotNil() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.FieldNotNull(FieldCharacterTotalSupply))
}

// HasChangeLogs applies the HasEdge predicate on the "change_logs" edge.
func HasChangeLogs() predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChangeLogsTable, ChangeLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChangeLogsWith applies the HasEdge predicate on the "change_logs" edge with a given conditions (other predicates).
func HasChangeLogsWith(preds ...predicate.KusogeeeeeeNFTChangeLog) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(func(s *sql.Selector) {
		step := newChangeLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KusogeeeeeeNFT) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KusogeeeeeeNFT) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KusogeeeeeeNFT) predicate.KusogeeeeeeNFT {
	return predicate.KusogeeeeeeNFT(sql.NotPredicates(p))
}
