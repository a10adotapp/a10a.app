// Code generated by ent, DO NOT EDIT.

package kusogeeeeeenft

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the kusogeeeeeenft type in the database.
	Label = "kusogeeeeee_nft"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldWeaponRank holds the string denoting the weapon_rank field in the database.
	FieldWeaponRank = "weapon_rank"
	// FieldWeaponType holds the string denoting the weapon_type field in the database.
	FieldWeaponType = "weapon_type"
	// FieldWeaponVitality holds the string denoting the weapon_vitality field in the database.
	FieldWeaponVitality = "weapon_vitality"
	// FieldWeaponStrength holds the string denoting the weapon_strength field in the database.
	FieldWeaponStrength = "weapon_strength"
	// FieldWeaponPhysicalDefense holds the string denoting the weapon_physical_defense field in the database.
	FieldWeaponPhysicalDefense = "weapon_physical_defense"
	// FieldWeaponMagicalDefense holds the string denoting the weapon_magical_defense field in the database.
	FieldWeaponMagicalDefense = "weapon_magical_defense"
	// FieldWeaponAgility holds the string denoting the weapon_agility field in the database.
	FieldWeaponAgility = "weapon_agility"
	// FieldCharacterRank holds the string denoting the character_rank field in the database.
	FieldCharacterRank = "character_rank"
	// FieldCharacterTotalSupply holds the string denoting the character_total_supply field in the database.
	FieldCharacterTotalSupply = "character_total_supply"
	// EdgeChangeLogs holds the string denoting the change_logs edge name in mutations.
	EdgeChangeLogs = "change_logs"
	// Table holds the table name of the kusogeeeeeenft in the database.
	Table = "kusogeeeeee_nfts"
	// ChangeLogsTable is the table that holds the change_logs relation/edge.
	ChangeLogsTable = "kusogeeeeee_nft_change_logs"
	// ChangeLogsInverseTable is the table name for the KusogeeeeeeNFTChangeLog entity.
	// It exists in this package in order to avoid circular dependency with the "kusogeeeeeenftchangelog" package.
	ChangeLogsInverseTable = "kusogeeeeee_nft_change_logs"
	// ChangeLogsColumn is the table column denoting the change_logs relation/edge.
	ChangeLogsColumn = "kusogeeeeee_nft_id"
)

// Columns holds all SQL columns for kusogeeeeeenft fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldURI,
	FieldType,
	FieldName,
	FieldStatus,
	FieldPrice,
	FieldPublishedAt,
	FieldWeaponRank,
	FieldWeaponType,
	FieldWeaponVitality,
	FieldWeaponStrength,
	FieldWeaponPhysicalDefense,
	FieldWeaponMagicalDefense,
	FieldWeaponAgility,
	FieldCharacterRank,
	FieldCharacterTotalSupply,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/a10adotapp/a10a.app/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the KusogeeeeeeNFT queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByURI orders the results by the uri field.
func ByURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURI, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByWeaponRank orders the results by the weapon_rank field.
func ByWeaponRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeaponRank, opts...).ToFunc()
}

// ByWeaponType orders the results by the weapon_type field.
func ByWeaponType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeaponType, opts...).ToFunc()
}

// ByWeaponVitality orders the results by the weapon_vitality field.
func ByWeaponVitality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeaponVitality, opts...).ToFunc()
}

// ByWeaponStrength orders the results by the weapon_strength field.
func ByWeaponStrength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeaponStrength, opts...).ToFunc()
}

// ByWeaponPhysicalDefense orders the results by the weapon_physical_defense field.
func ByWeaponPhysicalDefense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeaponPhysicalDefense, opts...).ToFunc()
}

// ByWeaponMagicalDefense orders the results by the weapon_magical_defense field.
func ByWeaponMagicalDefense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeaponMagicalDefense, opts...).ToFunc()
}

// ByWeaponAgility orders the results by the weapon_agility field.
func ByWeaponAgility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeaponAgility, opts...).ToFunc()
}

// ByCharacterRank orders the results by the character_rank field.
func ByCharacterRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacterRank, opts...).ToFunc()
}

// ByCharacterTotalSupply orders the results by the character_total_supply field.
func ByCharacterTotalSupply(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacterTotalSupply, opts...).ToFunc()
}

// ByChangeLogsCount orders the results by change_logs count.
func ByChangeLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChangeLogsStep(), opts...)
	}
}

// ByChangeLogs orders the results by change_logs terms.
func ByChangeLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChangeLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChangeLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChangeLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChangeLogsTable, ChangeLogsColumn),
	)
}
