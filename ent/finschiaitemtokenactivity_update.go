// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtoken"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenactivity"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// FinschiaItemTokenActivityUpdate is the builder for updating FinschiaItemTokenActivity entities.
type FinschiaItemTokenActivityUpdate struct {
	config
	hooks    []Hook
	mutation *FinschiaItemTokenActivityMutation
}

// Where appends a list predicates to the FinschiaItemTokenActivityUpdate builder.
func (fitau *FinschiaItemTokenActivityUpdate) Where(ps ...predicate.FinschiaItemTokenActivity) *FinschiaItemTokenActivityUpdate {
	fitau.mutation.Where(ps...)
	return fitau
}

// SetUpdatedAt sets the "updated_at" field.
func (fitau *FinschiaItemTokenActivityUpdate) SetUpdatedAt(t time.Time) *FinschiaItemTokenActivityUpdate {
	fitau.mutation.SetUpdatedAt(t)
	return fitau
}

// SetDeletedAt sets the "deleted_at" field.
func (fitau *FinschiaItemTokenActivityUpdate) SetDeletedAt(t time.Time) *FinschiaItemTokenActivityUpdate {
	fitau.mutation.SetDeletedAt(t)
	return fitau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fitau *FinschiaItemTokenActivityUpdate) SetNillableDeletedAt(t *time.Time) *FinschiaItemTokenActivityUpdate {
	if t != nil {
		fitau.SetDeletedAt(*t)
	}
	return fitau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fitau *FinschiaItemTokenActivityUpdate) ClearDeletedAt() *FinschiaItemTokenActivityUpdate {
	fitau.mutation.ClearDeletedAt()
	return fitau
}

// SetTransactionHash sets the "transaction_hash" field.
func (fitau *FinschiaItemTokenActivityUpdate) SetTransactionHash(s string) *FinschiaItemTokenActivityUpdate {
	fitau.mutation.SetTransactionHash(s)
	return fitau
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (fitau *FinschiaItemTokenActivityUpdate) SetNillableTransactionHash(s *string) *FinschiaItemTokenActivityUpdate {
	if s != nil {
		fitau.SetTransactionHash(*s)
	}
	return fitau
}

// SetFinschiaItemTokenID sets the "finschia_item_token_id" field.
func (fitau *FinschiaItemTokenActivityUpdate) SetFinschiaItemTokenID(u uint32) *FinschiaItemTokenActivityUpdate {
	fitau.mutation.SetFinschiaItemTokenID(u)
	return fitau
}

// SetNillableFinschiaItemTokenID sets the "finschia_item_token_id" field if the given value is not nil.
func (fitau *FinschiaItemTokenActivityUpdate) SetNillableFinschiaItemTokenID(u *uint32) *FinschiaItemTokenActivityUpdate {
	if u != nil {
		fitau.SetFinschiaItemTokenID(*u)
	}
	return fitau
}

// SetActivityType sets the "activity_type" field.
func (fitau *FinschiaItemTokenActivityUpdate) SetActivityType(s string) *FinschiaItemTokenActivityUpdate {
	fitau.mutation.SetActivityType(s)
	return fitau
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (fitau *FinschiaItemTokenActivityUpdate) SetNillableActivityType(s *string) *FinschiaItemTokenActivityUpdate {
	if s != nil {
		fitau.SetActivityType(*s)
	}
	return fitau
}

// SetActivatedAt sets the "activated_at" field.
func (fitau *FinschiaItemTokenActivityUpdate) SetActivatedAt(t time.Time) *FinschiaItemTokenActivityUpdate {
	fitau.mutation.SetActivatedAt(t)
	return fitau
}

// SetNillableActivatedAt sets the "activated_at" field if the given value is not nil.
func (fitau *FinschiaItemTokenActivityUpdate) SetNillableActivatedAt(t *time.Time) *FinschiaItemTokenActivityUpdate {
	if t != nil {
		fitau.SetActivatedAt(*t)
	}
	return fitau
}

// SetFinschiaItemToken sets the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitau *FinschiaItemTokenActivityUpdate) SetFinschiaItemToken(f *FinschiaItemToken) *FinschiaItemTokenActivityUpdate {
	return fitau.SetFinschiaItemTokenID(f.ID)
}

// Mutation returns the FinschiaItemTokenActivityMutation object of the builder.
func (fitau *FinschiaItemTokenActivityUpdate) Mutation() *FinschiaItemTokenActivityMutation {
	return fitau.mutation
}

// ClearFinschiaItemToken clears the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitau *FinschiaItemTokenActivityUpdate) ClearFinschiaItemToken() *FinschiaItemTokenActivityUpdate {
	fitau.mutation.ClearFinschiaItemToken()
	return fitau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fitau *FinschiaItemTokenActivityUpdate) Save(ctx context.Context) (int, error) {
	if err := fitau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fitau.sqlSave, fitau.mutation, fitau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fitau *FinschiaItemTokenActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := fitau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fitau *FinschiaItemTokenActivityUpdate) Exec(ctx context.Context) error {
	_, err := fitau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitau *FinschiaItemTokenActivityUpdate) ExecX(ctx context.Context) {
	if err := fitau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitau *FinschiaItemTokenActivityUpdate) defaults() error {
	if _, ok := fitau.mutation.UpdatedAt(); !ok {
		if finschiaitemtokenactivity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtokenactivity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtokenactivity.UpdateDefaultUpdatedAt()
		fitau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fitau *FinschiaItemTokenActivityUpdate) check() error {
	if _, ok := fitau.mutation.FinschiaItemTokenID(); fitau.mutation.FinschiaItemTokenCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FinschiaItemTokenActivity.finschia_item_token"`)
	}
	return nil
}

func (fitau *FinschiaItemTokenActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fitau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(finschiaitemtokenactivity.Table, finschiaitemtokenactivity.Columns, sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32))
	if ps := fitau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fitau.mutation.UpdatedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fitau.mutation.DeletedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldDeletedAt, field.TypeTime, value)
	}
	if fitau.mutation.DeletedAtCleared() {
		_spec.ClearField(finschiaitemtokenactivity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fitau.mutation.TransactionHash(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldTransactionHash, field.TypeString, value)
	}
	if value, ok := fitau.mutation.ActivityType(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldActivityType, field.TypeString, value)
	}
	if value, ok := fitau.mutation.ActivatedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldActivatedAt, field.TypeTime, value)
	}
	if fitau.mutation.FinschiaItemTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenactivity.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenactivity.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitau.mutation.FinschiaItemTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenactivity.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenactivity.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fitau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finschiaitemtokenactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fitau.mutation.done = true
	return n, nil
}

// FinschiaItemTokenActivityUpdateOne is the builder for updating a single FinschiaItemTokenActivity entity.
type FinschiaItemTokenActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FinschiaItemTokenActivityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetUpdatedAt(t time.Time) *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.SetUpdatedAt(t)
	return fitauo
}

// SetDeletedAt sets the "deleted_at" field.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetDeletedAt(t time.Time) *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.SetDeletedAt(t)
	return fitauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetNillableDeletedAt(t *time.Time) *FinschiaItemTokenActivityUpdateOne {
	if t != nil {
		fitauo.SetDeletedAt(*t)
	}
	return fitauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fitauo *FinschiaItemTokenActivityUpdateOne) ClearDeletedAt() *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.ClearDeletedAt()
	return fitauo
}

// SetTransactionHash sets the "transaction_hash" field.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetTransactionHash(s string) *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.SetTransactionHash(s)
	return fitauo
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetNillableTransactionHash(s *string) *FinschiaItemTokenActivityUpdateOne {
	if s != nil {
		fitauo.SetTransactionHash(*s)
	}
	return fitauo
}

// SetFinschiaItemTokenID sets the "finschia_item_token_id" field.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetFinschiaItemTokenID(u uint32) *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.SetFinschiaItemTokenID(u)
	return fitauo
}

// SetNillableFinschiaItemTokenID sets the "finschia_item_token_id" field if the given value is not nil.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetNillableFinschiaItemTokenID(u *uint32) *FinschiaItemTokenActivityUpdateOne {
	if u != nil {
		fitauo.SetFinschiaItemTokenID(*u)
	}
	return fitauo
}

// SetActivityType sets the "activity_type" field.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetActivityType(s string) *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.SetActivityType(s)
	return fitauo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetNillableActivityType(s *string) *FinschiaItemTokenActivityUpdateOne {
	if s != nil {
		fitauo.SetActivityType(*s)
	}
	return fitauo
}

// SetActivatedAt sets the "activated_at" field.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetActivatedAt(t time.Time) *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.SetActivatedAt(t)
	return fitauo
}

// SetNillableActivatedAt sets the "activated_at" field if the given value is not nil.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetNillableActivatedAt(t *time.Time) *FinschiaItemTokenActivityUpdateOne {
	if t != nil {
		fitauo.SetActivatedAt(*t)
	}
	return fitauo
}

// SetFinschiaItemToken sets the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SetFinschiaItemToken(f *FinschiaItemToken) *FinschiaItemTokenActivityUpdateOne {
	return fitauo.SetFinschiaItemTokenID(f.ID)
}

// Mutation returns the FinschiaItemTokenActivityMutation object of the builder.
func (fitauo *FinschiaItemTokenActivityUpdateOne) Mutation() *FinschiaItemTokenActivityMutation {
	return fitauo.mutation
}

// ClearFinschiaItemToken clears the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitauo *FinschiaItemTokenActivityUpdateOne) ClearFinschiaItemToken() *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.ClearFinschiaItemToken()
	return fitauo
}

// Where appends a list predicates to the FinschiaItemTokenActivityUpdate builder.
func (fitauo *FinschiaItemTokenActivityUpdateOne) Where(ps ...predicate.FinschiaItemTokenActivity) *FinschiaItemTokenActivityUpdateOne {
	fitauo.mutation.Where(ps...)
	return fitauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fitauo *FinschiaItemTokenActivityUpdateOne) Select(field string, fields ...string) *FinschiaItemTokenActivityUpdateOne {
	fitauo.fields = append([]string{field}, fields...)
	return fitauo
}

// Save executes the query and returns the updated FinschiaItemTokenActivity entity.
func (fitauo *FinschiaItemTokenActivityUpdateOne) Save(ctx context.Context) (*FinschiaItemTokenActivity, error) {
	if err := fitauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fitauo.sqlSave, fitauo.mutation, fitauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fitauo *FinschiaItemTokenActivityUpdateOne) SaveX(ctx context.Context) *FinschiaItemTokenActivity {
	node, err := fitauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fitauo *FinschiaItemTokenActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := fitauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitauo *FinschiaItemTokenActivityUpdateOne) ExecX(ctx context.Context) {
	if err := fitauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitauo *FinschiaItemTokenActivityUpdateOne) defaults() error {
	if _, ok := fitauo.mutation.UpdatedAt(); !ok {
		if finschiaitemtokenactivity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtokenactivity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtokenactivity.UpdateDefaultUpdatedAt()
		fitauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fitauo *FinschiaItemTokenActivityUpdateOne) check() error {
	if _, ok := fitauo.mutation.FinschiaItemTokenID(); fitauo.mutation.FinschiaItemTokenCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FinschiaItemTokenActivity.finschia_item_token"`)
	}
	return nil
}

func (fitauo *FinschiaItemTokenActivityUpdateOne) sqlSave(ctx context.Context) (_node *FinschiaItemTokenActivity, err error) {
	if err := fitauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(finschiaitemtokenactivity.Table, finschiaitemtokenactivity.Columns, sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32))
	id, ok := fitauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FinschiaItemTokenActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fitauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, finschiaitemtokenactivity.FieldID)
		for _, f := range fields {
			if !finschiaitemtokenactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != finschiaitemtokenactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fitauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fitauo.mutation.UpdatedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fitauo.mutation.DeletedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldDeletedAt, field.TypeTime, value)
	}
	if fitauo.mutation.DeletedAtCleared() {
		_spec.ClearField(finschiaitemtokenactivity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fitauo.mutation.TransactionHash(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldTransactionHash, field.TypeString, value)
	}
	if value, ok := fitauo.mutation.ActivityType(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldActivityType, field.TypeString, value)
	}
	if value, ok := fitauo.mutation.ActivatedAt(); ok {
		_spec.SetField(finschiaitemtokenactivity.FieldActivatedAt, field.TypeTime, value)
	}
	if fitauo.mutation.FinschiaItemTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenactivity.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenactivity.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitauo.mutation.FinschiaItemTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenactivity.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenactivity.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FinschiaItemTokenActivity{config: fitauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fitauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finschiaitemtokenactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fitauo.mutation.done = true
	return _node, nil
}
