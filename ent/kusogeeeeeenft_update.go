// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenft"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenftchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// KusogeeeeeeNFTUpdate is the builder for updating KusogeeeeeeNFT entities.
type KusogeeeeeeNFTUpdate struct {
	config
	hooks    []Hook
	mutation *KusogeeeeeeNFTMutation
}

// Where appends a list predicates to the KusogeeeeeeNFTUpdate builder.
func (knu *KusogeeeeeeNFTUpdate) Where(ps ...predicate.KusogeeeeeeNFT) *KusogeeeeeeNFTUpdate {
	knu.mutation.Where(ps...)
	return knu
}

// SetUpdatedAt sets the "updated_at" field.
func (knu *KusogeeeeeeNFTUpdate) SetUpdatedAt(t time.Time) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetUpdatedAt(t)
	return knu
}

// SetDeletedAt sets the "deleted_at" field.
func (knu *KusogeeeeeeNFTUpdate) SetDeletedAt(t time.Time) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetDeletedAt(t)
	return knu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableDeletedAt(t *time.Time) *KusogeeeeeeNFTUpdate {
	if t != nil {
		knu.SetDeletedAt(*t)
	}
	return knu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (knu *KusogeeeeeeNFTUpdate) ClearDeletedAt() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearDeletedAt()
	return knu
}

// SetURI sets the "uri" field.
func (knu *KusogeeeeeeNFTUpdate) SetURI(s string) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetURI(s)
	return knu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableURI(s *string) *KusogeeeeeeNFTUpdate {
	if s != nil {
		knu.SetURI(*s)
	}
	return knu
}

// SetType sets the "type" field.
func (knu *KusogeeeeeeNFTUpdate) SetType(s string) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetType(s)
	return knu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableType(s *string) *KusogeeeeeeNFTUpdate {
	if s != nil {
		knu.SetType(*s)
	}
	return knu
}

// SetName sets the "name" field.
func (knu *KusogeeeeeeNFTUpdate) SetName(s string) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetName(s)
	return knu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableName(s *string) *KusogeeeeeeNFTUpdate {
	if s != nil {
		knu.SetName(*s)
	}
	return knu
}

// SetStatus sets the "status" field.
func (knu *KusogeeeeeeNFTUpdate) SetStatus(s string) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetStatus(s)
	return knu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableStatus(s *string) *KusogeeeeeeNFTUpdate {
	if s != nil {
		knu.SetStatus(*s)
	}
	return knu
}

// SetPrice sets the "price" field.
func (knu *KusogeeeeeeNFTUpdate) SetPrice(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.ResetPrice()
	knu.mutation.SetPrice(i)
	return knu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillablePrice(i *int) *KusogeeeeeeNFTUpdate {
	if i != nil {
		knu.SetPrice(*i)
	}
	return knu
}

// AddPrice adds i to the "price" field.
func (knu *KusogeeeeeeNFTUpdate) AddPrice(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddPrice(i)
	return knu
}

// SetPublishedAt sets the "published_at" field.
func (knu *KusogeeeeeeNFTUpdate) SetPublishedAt(t time.Time) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetPublishedAt(t)
	return knu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillablePublishedAt(t *time.Time) *KusogeeeeeeNFTUpdate {
	if t != nil {
		knu.SetPublishedAt(*t)
	}
	return knu
}

// SetWeaponRank sets the "weapon_rank" field.
func (knu *KusogeeeeeeNFTUpdate) SetWeaponRank(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.ResetWeaponRank()
	knu.mutation.SetWeaponRank(i)
	return knu
}

// SetNillableWeaponRank sets the "weapon_rank" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableWeaponRank(i *int) *KusogeeeeeeNFTUpdate {
	if i != nil {
		knu.SetWeaponRank(*i)
	}
	return knu
}

// AddWeaponRank adds i to the "weapon_rank" field.
func (knu *KusogeeeeeeNFTUpdate) AddWeaponRank(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddWeaponRank(i)
	return knu
}

// ClearWeaponRank clears the value of the "weapon_rank" field.
func (knu *KusogeeeeeeNFTUpdate) ClearWeaponRank() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearWeaponRank()
	return knu
}

// SetWeaponType sets the "weapon_type" field.
func (knu *KusogeeeeeeNFTUpdate) SetWeaponType(s string) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetWeaponType(s)
	return knu
}

// SetNillableWeaponType sets the "weapon_type" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableWeaponType(s *string) *KusogeeeeeeNFTUpdate {
	if s != nil {
		knu.SetWeaponType(*s)
	}
	return knu
}

// ClearWeaponType clears the value of the "weapon_type" field.
func (knu *KusogeeeeeeNFTUpdate) ClearWeaponType() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearWeaponType()
	return knu
}

// SetWeaponVitality sets the "weapon_vitality" field.
func (knu *KusogeeeeeeNFTUpdate) SetWeaponVitality(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.ResetWeaponVitality()
	knu.mutation.SetWeaponVitality(i)
	return knu
}

// SetNillableWeaponVitality sets the "weapon_vitality" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableWeaponVitality(i *int) *KusogeeeeeeNFTUpdate {
	if i != nil {
		knu.SetWeaponVitality(*i)
	}
	return knu
}

// AddWeaponVitality adds i to the "weapon_vitality" field.
func (knu *KusogeeeeeeNFTUpdate) AddWeaponVitality(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddWeaponVitality(i)
	return knu
}

// ClearWeaponVitality clears the value of the "weapon_vitality" field.
func (knu *KusogeeeeeeNFTUpdate) ClearWeaponVitality() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearWeaponVitality()
	return knu
}

// SetWeaponStrength sets the "weapon_strength" field.
func (knu *KusogeeeeeeNFTUpdate) SetWeaponStrength(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.ResetWeaponStrength()
	knu.mutation.SetWeaponStrength(i)
	return knu
}

// SetNillableWeaponStrength sets the "weapon_strength" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableWeaponStrength(i *int) *KusogeeeeeeNFTUpdate {
	if i != nil {
		knu.SetWeaponStrength(*i)
	}
	return knu
}

// AddWeaponStrength adds i to the "weapon_strength" field.
func (knu *KusogeeeeeeNFTUpdate) AddWeaponStrength(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddWeaponStrength(i)
	return knu
}

// ClearWeaponStrength clears the value of the "weapon_strength" field.
func (knu *KusogeeeeeeNFTUpdate) ClearWeaponStrength() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearWeaponStrength()
	return knu
}

// SetWeaponPhysicalDefense sets the "weapon_physical_defense" field.
func (knu *KusogeeeeeeNFTUpdate) SetWeaponPhysicalDefense(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.ResetWeaponPhysicalDefense()
	knu.mutation.SetWeaponPhysicalDefense(i)
	return knu
}

// SetNillableWeaponPhysicalDefense sets the "weapon_physical_defense" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableWeaponPhysicalDefense(i *int) *KusogeeeeeeNFTUpdate {
	if i != nil {
		knu.SetWeaponPhysicalDefense(*i)
	}
	return knu
}

// AddWeaponPhysicalDefense adds i to the "weapon_physical_defense" field.
func (knu *KusogeeeeeeNFTUpdate) AddWeaponPhysicalDefense(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddWeaponPhysicalDefense(i)
	return knu
}

// ClearWeaponPhysicalDefense clears the value of the "weapon_physical_defense" field.
func (knu *KusogeeeeeeNFTUpdate) ClearWeaponPhysicalDefense() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearWeaponPhysicalDefense()
	return knu
}

// SetWeaponMagicalDefense sets the "weapon_magical_defense" field.
func (knu *KusogeeeeeeNFTUpdate) SetWeaponMagicalDefense(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.ResetWeaponMagicalDefense()
	knu.mutation.SetWeaponMagicalDefense(i)
	return knu
}

// SetNillableWeaponMagicalDefense sets the "weapon_magical_defense" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableWeaponMagicalDefense(i *int) *KusogeeeeeeNFTUpdate {
	if i != nil {
		knu.SetWeaponMagicalDefense(*i)
	}
	return knu
}

// AddWeaponMagicalDefense adds i to the "weapon_magical_defense" field.
func (knu *KusogeeeeeeNFTUpdate) AddWeaponMagicalDefense(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddWeaponMagicalDefense(i)
	return knu
}

// ClearWeaponMagicalDefense clears the value of the "weapon_magical_defense" field.
func (knu *KusogeeeeeeNFTUpdate) ClearWeaponMagicalDefense() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearWeaponMagicalDefense()
	return knu
}

// SetWeaponAgility sets the "weapon_agility" field.
func (knu *KusogeeeeeeNFTUpdate) SetWeaponAgility(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.ResetWeaponAgility()
	knu.mutation.SetWeaponAgility(i)
	return knu
}

// SetNillableWeaponAgility sets the "weapon_agility" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableWeaponAgility(i *int) *KusogeeeeeeNFTUpdate {
	if i != nil {
		knu.SetWeaponAgility(*i)
	}
	return knu
}

// AddWeaponAgility adds i to the "weapon_agility" field.
func (knu *KusogeeeeeeNFTUpdate) AddWeaponAgility(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddWeaponAgility(i)
	return knu
}

// ClearWeaponAgility clears the value of the "weapon_agility" field.
func (knu *KusogeeeeeeNFTUpdate) ClearWeaponAgility() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearWeaponAgility()
	return knu
}

// SetCharacterRank sets the "character_rank" field.
func (knu *KusogeeeeeeNFTUpdate) SetCharacterRank(s string) *KusogeeeeeeNFTUpdate {
	knu.mutation.SetCharacterRank(s)
	return knu
}

// SetNillableCharacterRank sets the "character_rank" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableCharacterRank(s *string) *KusogeeeeeeNFTUpdate {
	if s != nil {
		knu.SetCharacterRank(*s)
	}
	return knu
}

// ClearCharacterRank clears the value of the "character_rank" field.
func (knu *KusogeeeeeeNFTUpdate) ClearCharacterRank() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearCharacterRank()
	return knu
}

// SetCharacterTotalSupply sets the "character_total_supply" field.
func (knu *KusogeeeeeeNFTUpdate) SetCharacterTotalSupply(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.ResetCharacterTotalSupply()
	knu.mutation.SetCharacterTotalSupply(i)
	return knu
}

// SetNillableCharacterTotalSupply sets the "character_total_supply" field if the given value is not nil.
func (knu *KusogeeeeeeNFTUpdate) SetNillableCharacterTotalSupply(i *int) *KusogeeeeeeNFTUpdate {
	if i != nil {
		knu.SetCharacterTotalSupply(*i)
	}
	return knu
}

// AddCharacterTotalSupply adds i to the "character_total_supply" field.
func (knu *KusogeeeeeeNFTUpdate) AddCharacterTotalSupply(i int) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddCharacterTotalSupply(i)
	return knu
}

// ClearCharacterTotalSupply clears the value of the "character_total_supply" field.
func (knu *KusogeeeeeeNFTUpdate) ClearCharacterTotalSupply() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearCharacterTotalSupply()
	return knu
}

// AddChangeLogIDs adds the "change_logs" edge to the KusogeeeeeeNFTChangeLog entity by IDs.
func (knu *KusogeeeeeeNFTUpdate) AddChangeLogIDs(ids ...uint32) *KusogeeeeeeNFTUpdate {
	knu.mutation.AddChangeLogIDs(ids...)
	return knu
}

// AddChangeLogs adds the "change_logs" edges to the KusogeeeeeeNFTChangeLog entity.
func (knu *KusogeeeeeeNFTUpdate) AddChangeLogs(k ...*KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTUpdate {
	ids := make([]uint32, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return knu.AddChangeLogIDs(ids...)
}

// Mutation returns the KusogeeeeeeNFTMutation object of the builder.
func (knu *KusogeeeeeeNFTUpdate) Mutation() *KusogeeeeeeNFTMutation {
	return knu.mutation
}

// ClearChangeLogs clears all "change_logs" edges to the KusogeeeeeeNFTChangeLog entity.
func (knu *KusogeeeeeeNFTUpdate) ClearChangeLogs() *KusogeeeeeeNFTUpdate {
	knu.mutation.ClearChangeLogs()
	return knu
}

// RemoveChangeLogIDs removes the "change_logs" edge to KusogeeeeeeNFTChangeLog entities by IDs.
func (knu *KusogeeeeeeNFTUpdate) RemoveChangeLogIDs(ids ...uint32) *KusogeeeeeeNFTUpdate {
	knu.mutation.RemoveChangeLogIDs(ids...)
	return knu
}

// RemoveChangeLogs removes "change_logs" edges to KusogeeeeeeNFTChangeLog entities.
func (knu *KusogeeeeeeNFTUpdate) RemoveChangeLogs(k ...*KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTUpdate {
	ids := make([]uint32, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return knu.RemoveChangeLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (knu *KusogeeeeeeNFTUpdate) Save(ctx context.Context) (int, error) {
	if err := knu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, knu.sqlSave, knu.mutation, knu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (knu *KusogeeeeeeNFTUpdate) SaveX(ctx context.Context) int {
	affected, err := knu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (knu *KusogeeeeeeNFTUpdate) Exec(ctx context.Context) error {
	_, err := knu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (knu *KusogeeeeeeNFTUpdate) ExecX(ctx context.Context) {
	if err := knu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (knu *KusogeeeeeeNFTUpdate) defaults() error {
	if _, ok := knu.mutation.UpdatedAt(); !ok {
		if kusogeeeeeenft.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kusogeeeeeenft.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kusogeeeeeenft.UpdateDefaultUpdatedAt()
		knu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (knu *KusogeeeeeeNFTUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(kusogeeeeeenft.Table, kusogeeeeeenft.Columns, sqlgraph.NewFieldSpec(kusogeeeeeenft.FieldID, field.TypeUint32))
	if ps := knu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := knu.mutation.UpdatedAt(); ok {
		_spec.SetField(kusogeeeeeenft.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := knu.mutation.DeletedAt(); ok {
		_spec.SetField(kusogeeeeeenft.FieldDeletedAt, field.TypeTime, value)
	}
	if knu.mutation.DeletedAtCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := knu.mutation.URI(); ok {
		_spec.SetField(kusogeeeeeenft.FieldURI, field.TypeString, value)
	}
	if value, ok := knu.mutation.GetType(); ok {
		_spec.SetField(kusogeeeeeenft.FieldType, field.TypeString, value)
	}
	if value, ok := knu.mutation.Name(); ok {
		_spec.SetField(kusogeeeeeenft.FieldName, field.TypeString, value)
	}
	if value, ok := knu.mutation.Status(); ok {
		_spec.SetField(kusogeeeeeenft.FieldStatus, field.TypeString, value)
	}
	if value, ok := knu.mutation.Price(); ok {
		_spec.SetField(kusogeeeeeenft.FieldPrice, field.TypeInt, value)
	}
	if value, ok := knu.mutation.AddedPrice(); ok {
		_spec.AddField(kusogeeeeeenft.FieldPrice, field.TypeInt, value)
	}
	if value, ok := knu.mutation.PublishedAt(); ok {
		_spec.SetField(kusogeeeeeenft.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := knu.mutation.WeaponRank(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponRank, field.TypeInt, value)
	}
	if value, ok := knu.mutation.AddedWeaponRank(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponRank, field.TypeInt, value)
	}
	if knu.mutation.WeaponRankCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponRank, field.TypeInt)
	}
	if value, ok := knu.mutation.WeaponType(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponType, field.TypeString, value)
	}
	if knu.mutation.WeaponTypeCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponType, field.TypeString)
	}
	if value, ok := knu.mutation.WeaponVitality(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponVitality, field.TypeInt, value)
	}
	if value, ok := knu.mutation.AddedWeaponVitality(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponVitality, field.TypeInt, value)
	}
	if knu.mutation.WeaponVitalityCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponVitality, field.TypeInt)
	}
	if value, ok := knu.mutation.WeaponStrength(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponStrength, field.TypeInt, value)
	}
	if value, ok := knu.mutation.AddedWeaponStrength(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponStrength, field.TypeInt, value)
	}
	if knu.mutation.WeaponStrengthCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponStrength, field.TypeInt)
	}
	if value, ok := knu.mutation.WeaponPhysicalDefense(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponPhysicalDefense, field.TypeInt, value)
	}
	if value, ok := knu.mutation.AddedWeaponPhysicalDefense(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponPhysicalDefense, field.TypeInt, value)
	}
	if knu.mutation.WeaponPhysicalDefenseCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponPhysicalDefense, field.TypeInt)
	}
	if value, ok := knu.mutation.WeaponMagicalDefense(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponMagicalDefense, field.TypeInt, value)
	}
	if value, ok := knu.mutation.AddedWeaponMagicalDefense(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponMagicalDefense, field.TypeInt, value)
	}
	if knu.mutation.WeaponMagicalDefenseCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponMagicalDefense, field.TypeInt)
	}
	if value, ok := knu.mutation.WeaponAgility(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponAgility, field.TypeInt, value)
	}
	if value, ok := knu.mutation.AddedWeaponAgility(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponAgility, field.TypeInt, value)
	}
	if knu.mutation.WeaponAgilityCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponAgility, field.TypeInt)
	}
	if value, ok := knu.mutation.CharacterRank(); ok {
		_spec.SetField(kusogeeeeeenft.FieldCharacterRank, field.TypeString, value)
	}
	if knu.mutation.CharacterRankCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldCharacterRank, field.TypeString)
	}
	if value, ok := knu.mutation.CharacterTotalSupply(); ok {
		_spec.SetField(kusogeeeeeenft.FieldCharacterTotalSupply, field.TypeInt, value)
	}
	if value, ok := knu.mutation.AddedCharacterTotalSupply(); ok {
		_spec.AddField(kusogeeeeeenft.FieldCharacterTotalSupply, field.TypeInt, value)
	}
	if knu.mutation.CharacterTotalSupplyCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldCharacterTotalSupply, field.TypeInt)
	}
	if knu.mutation.ChangeLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kusogeeeeeenft.ChangeLogsTable,
			Columns: []string{kusogeeeeeenft.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := knu.mutation.RemovedChangeLogsIDs(); len(nodes) > 0 && !knu.mutation.ChangeLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kusogeeeeeenft.ChangeLogsTable,
			Columns: []string{kusogeeeeeenft.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := knu.mutation.ChangeLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kusogeeeeeenft.ChangeLogsTable,
			Columns: []string{kusogeeeeeenft.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, knu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kusogeeeeeenft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	knu.mutation.done = true
	return n, nil
}

// KusogeeeeeeNFTUpdateOne is the builder for updating a single KusogeeeeeeNFT entity.
type KusogeeeeeeNFTUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KusogeeeeeeNFTMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetUpdatedAt(t time.Time) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetUpdatedAt(t)
	return knuo
}

// SetDeletedAt sets the "deleted_at" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetDeletedAt(t time.Time) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetDeletedAt(t)
	return knuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableDeletedAt(t *time.Time) *KusogeeeeeeNFTUpdateOne {
	if t != nil {
		knuo.SetDeletedAt(*t)
	}
	return knuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearDeletedAt() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearDeletedAt()
	return knuo
}

// SetURI sets the "uri" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetURI(s string) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetURI(s)
	return knuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableURI(s *string) *KusogeeeeeeNFTUpdateOne {
	if s != nil {
		knuo.SetURI(*s)
	}
	return knuo
}

// SetType sets the "type" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetType(s string) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetType(s)
	return knuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableType(s *string) *KusogeeeeeeNFTUpdateOne {
	if s != nil {
		knuo.SetType(*s)
	}
	return knuo
}

// SetName sets the "name" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetName(s string) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetName(s)
	return knuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableName(s *string) *KusogeeeeeeNFTUpdateOne {
	if s != nil {
		knuo.SetName(*s)
	}
	return knuo
}

// SetStatus sets the "status" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetStatus(s string) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetStatus(s)
	return knuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableStatus(s *string) *KusogeeeeeeNFTUpdateOne {
	if s != nil {
		knuo.SetStatus(*s)
	}
	return knuo
}

// SetPrice sets the "price" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetPrice(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ResetPrice()
	knuo.mutation.SetPrice(i)
	return knuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillablePrice(i *int) *KusogeeeeeeNFTUpdateOne {
	if i != nil {
		knuo.SetPrice(*i)
	}
	return knuo
}

// AddPrice adds i to the "price" field.
func (knuo *KusogeeeeeeNFTUpdateOne) AddPrice(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddPrice(i)
	return knuo
}

// SetPublishedAt sets the "published_at" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetPublishedAt(t time.Time) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetPublishedAt(t)
	return knuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillablePublishedAt(t *time.Time) *KusogeeeeeeNFTUpdateOne {
	if t != nil {
		knuo.SetPublishedAt(*t)
	}
	return knuo
}

// SetWeaponRank sets the "weapon_rank" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetWeaponRank(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ResetWeaponRank()
	knuo.mutation.SetWeaponRank(i)
	return knuo
}

// SetNillableWeaponRank sets the "weapon_rank" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableWeaponRank(i *int) *KusogeeeeeeNFTUpdateOne {
	if i != nil {
		knuo.SetWeaponRank(*i)
	}
	return knuo
}

// AddWeaponRank adds i to the "weapon_rank" field.
func (knuo *KusogeeeeeeNFTUpdateOne) AddWeaponRank(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddWeaponRank(i)
	return knuo
}

// ClearWeaponRank clears the value of the "weapon_rank" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearWeaponRank() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearWeaponRank()
	return knuo
}

// SetWeaponType sets the "weapon_type" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetWeaponType(s string) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetWeaponType(s)
	return knuo
}

// SetNillableWeaponType sets the "weapon_type" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableWeaponType(s *string) *KusogeeeeeeNFTUpdateOne {
	if s != nil {
		knuo.SetWeaponType(*s)
	}
	return knuo
}

// ClearWeaponType clears the value of the "weapon_type" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearWeaponType() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearWeaponType()
	return knuo
}

// SetWeaponVitality sets the "weapon_vitality" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetWeaponVitality(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ResetWeaponVitality()
	knuo.mutation.SetWeaponVitality(i)
	return knuo
}

// SetNillableWeaponVitality sets the "weapon_vitality" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableWeaponVitality(i *int) *KusogeeeeeeNFTUpdateOne {
	if i != nil {
		knuo.SetWeaponVitality(*i)
	}
	return knuo
}

// AddWeaponVitality adds i to the "weapon_vitality" field.
func (knuo *KusogeeeeeeNFTUpdateOne) AddWeaponVitality(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddWeaponVitality(i)
	return knuo
}

// ClearWeaponVitality clears the value of the "weapon_vitality" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearWeaponVitality() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearWeaponVitality()
	return knuo
}

// SetWeaponStrength sets the "weapon_strength" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetWeaponStrength(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ResetWeaponStrength()
	knuo.mutation.SetWeaponStrength(i)
	return knuo
}

// SetNillableWeaponStrength sets the "weapon_strength" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableWeaponStrength(i *int) *KusogeeeeeeNFTUpdateOne {
	if i != nil {
		knuo.SetWeaponStrength(*i)
	}
	return knuo
}

// AddWeaponStrength adds i to the "weapon_strength" field.
func (knuo *KusogeeeeeeNFTUpdateOne) AddWeaponStrength(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddWeaponStrength(i)
	return knuo
}

// ClearWeaponStrength clears the value of the "weapon_strength" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearWeaponStrength() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearWeaponStrength()
	return knuo
}

// SetWeaponPhysicalDefense sets the "weapon_physical_defense" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetWeaponPhysicalDefense(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ResetWeaponPhysicalDefense()
	knuo.mutation.SetWeaponPhysicalDefense(i)
	return knuo
}

// SetNillableWeaponPhysicalDefense sets the "weapon_physical_defense" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableWeaponPhysicalDefense(i *int) *KusogeeeeeeNFTUpdateOne {
	if i != nil {
		knuo.SetWeaponPhysicalDefense(*i)
	}
	return knuo
}

// AddWeaponPhysicalDefense adds i to the "weapon_physical_defense" field.
func (knuo *KusogeeeeeeNFTUpdateOne) AddWeaponPhysicalDefense(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddWeaponPhysicalDefense(i)
	return knuo
}

// ClearWeaponPhysicalDefense clears the value of the "weapon_physical_defense" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearWeaponPhysicalDefense() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearWeaponPhysicalDefense()
	return knuo
}

// SetWeaponMagicalDefense sets the "weapon_magical_defense" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetWeaponMagicalDefense(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ResetWeaponMagicalDefense()
	knuo.mutation.SetWeaponMagicalDefense(i)
	return knuo
}

// SetNillableWeaponMagicalDefense sets the "weapon_magical_defense" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableWeaponMagicalDefense(i *int) *KusogeeeeeeNFTUpdateOne {
	if i != nil {
		knuo.SetWeaponMagicalDefense(*i)
	}
	return knuo
}

// AddWeaponMagicalDefense adds i to the "weapon_magical_defense" field.
func (knuo *KusogeeeeeeNFTUpdateOne) AddWeaponMagicalDefense(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddWeaponMagicalDefense(i)
	return knuo
}

// ClearWeaponMagicalDefense clears the value of the "weapon_magical_defense" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearWeaponMagicalDefense() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearWeaponMagicalDefense()
	return knuo
}

// SetWeaponAgility sets the "weapon_agility" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetWeaponAgility(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ResetWeaponAgility()
	knuo.mutation.SetWeaponAgility(i)
	return knuo
}

// SetNillableWeaponAgility sets the "weapon_agility" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableWeaponAgility(i *int) *KusogeeeeeeNFTUpdateOne {
	if i != nil {
		knuo.SetWeaponAgility(*i)
	}
	return knuo
}

// AddWeaponAgility adds i to the "weapon_agility" field.
func (knuo *KusogeeeeeeNFTUpdateOne) AddWeaponAgility(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddWeaponAgility(i)
	return knuo
}

// ClearWeaponAgility clears the value of the "weapon_agility" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearWeaponAgility() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearWeaponAgility()
	return knuo
}

// SetCharacterRank sets the "character_rank" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetCharacterRank(s string) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.SetCharacterRank(s)
	return knuo
}

// SetNillableCharacterRank sets the "character_rank" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableCharacterRank(s *string) *KusogeeeeeeNFTUpdateOne {
	if s != nil {
		knuo.SetCharacterRank(*s)
	}
	return knuo
}

// ClearCharacterRank clears the value of the "character_rank" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearCharacterRank() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearCharacterRank()
	return knuo
}

// SetCharacterTotalSupply sets the "character_total_supply" field.
func (knuo *KusogeeeeeeNFTUpdateOne) SetCharacterTotalSupply(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ResetCharacterTotalSupply()
	knuo.mutation.SetCharacterTotalSupply(i)
	return knuo
}

// SetNillableCharacterTotalSupply sets the "character_total_supply" field if the given value is not nil.
func (knuo *KusogeeeeeeNFTUpdateOne) SetNillableCharacterTotalSupply(i *int) *KusogeeeeeeNFTUpdateOne {
	if i != nil {
		knuo.SetCharacterTotalSupply(*i)
	}
	return knuo
}

// AddCharacterTotalSupply adds i to the "character_total_supply" field.
func (knuo *KusogeeeeeeNFTUpdateOne) AddCharacterTotalSupply(i int) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddCharacterTotalSupply(i)
	return knuo
}

// ClearCharacterTotalSupply clears the value of the "character_total_supply" field.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearCharacterTotalSupply() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearCharacterTotalSupply()
	return knuo
}

// AddChangeLogIDs adds the "change_logs" edge to the KusogeeeeeeNFTChangeLog entity by IDs.
func (knuo *KusogeeeeeeNFTUpdateOne) AddChangeLogIDs(ids ...uint32) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.AddChangeLogIDs(ids...)
	return knuo
}

// AddChangeLogs adds the "change_logs" edges to the KusogeeeeeeNFTChangeLog entity.
func (knuo *KusogeeeeeeNFTUpdateOne) AddChangeLogs(k ...*KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTUpdateOne {
	ids := make([]uint32, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return knuo.AddChangeLogIDs(ids...)
}

// Mutation returns the KusogeeeeeeNFTMutation object of the builder.
func (knuo *KusogeeeeeeNFTUpdateOne) Mutation() *KusogeeeeeeNFTMutation {
	return knuo.mutation
}

// ClearChangeLogs clears all "change_logs" edges to the KusogeeeeeeNFTChangeLog entity.
func (knuo *KusogeeeeeeNFTUpdateOne) ClearChangeLogs() *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.ClearChangeLogs()
	return knuo
}

// RemoveChangeLogIDs removes the "change_logs" edge to KusogeeeeeeNFTChangeLog entities by IDs.
func (knuo *KusogeeeeeeNFTUpdateOne) RemoveChangeLogIDs(ids ...uint32) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.RemoveChangeLogIDs(ids...)
	return knuo
}

// RemoveChangeLogs removes "change_logs" edges to KusogeeeeeeNFTChangeLog entities.
func (knuo *KusogeeeeeeNFTUpdateOne) RemoveChangeLogs(k ...*KusogeeeeeeNFTChangeLog) *KusogeeeeeeNFTUpdateOne {
	ids := make([]uint32, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return knuo.RemoveChangeLogIDs(ids...)
}

// Where appends a list predicates to the KusogeeeeeeNFTUpdate builder.
func (knuo *KusogeeeeeeNFTUpdateOne) Where(ps ...predicate.KusogeeeeeeNFT) *KusogeeeeeeNFTUpdateOne {
	knuo.mutation.Where(ps...)
	return knuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (knuo *KusogeeeeeeNFTUpdateOne) Select(field string, fields ...string) *KusogeeeeeeNFTUpdateOne {
	knuo.fields = append([]string{field}, fields...)
	return knuo
}

// Save executes the query and returns the updated KusogeeeeeeNFT entity.
func (knuo *KusogeeeeeeNFTUpdateOne) Save(ctx context.Context) (*KusogeeeeeeNFT, error) {
	if err := knuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, knuo.sqlSave, knuo.mutation, knuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (knuo *KusogeeeeeeNFTUpdateOne) SaveX(ctx context.Context) *KusogeeeeeeNFT {
	node, err := knuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (knuo *KusogeeeeeeNFTUpdateOne) Exec(ctx context.Context) error {
	_, err := knuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (knuo *KusogeeeeeeNFTUpdateOne) ExecX(ctx context.Context) {
	if err := knuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (knuo *KusogeeeeeeNFTUpdateOne) defaults() error {
	if _, ok := knuo.mutation.UpdatedAt(); !ok {
		if kusogeeeeeenft.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kusogeeeeeenft.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kusogeeeeeenft.UpdateDefaultUpdatedAt()
		knuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (knuo *KusogeeeeeeNFTUpdateOne) sqlSave(ctx context.Context) (_node *KusogeeeeeeNFT, err error) {
	_spec := sqlgraph.NewUpdateSpec(kusogeeeeeenft.Table, kusogeeeeeenft.Columns, sqlgraph.NewFieldSpec(kusogeeeeeenft.FieldID, field.TypeUint32))
	id, ok := knuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KusogeeeeeeNFT.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := knuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kusogeeeeeenft.FieldID)
		for _, f := range fields {
			if !kusogeeeeeenft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kusogeeeeeenft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := knuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := knuo.mutation.UpdatedAt(); ok {
		_spec.SetField(kusogeeeeeenft.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := knuo.mutation.DeletedAt(); ok {
		_spec.SetField(kusogeeeeeenft.FieldDeletedAt, field.TypeTime, value)
	}
	if knuo.mutation.DeletedAtCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := knuo.mutation.URI(); ok {
		_spec.SetField(kusogeeeeeenft.FieldURI, field.TypeString, value)
	}
	if value, ok := knuo.mutation.GetType(); ok {
		_spec.SetField(kusogeeeeeenft.FieldType, field.TypeString, value)
	}
	if value, ok := knuo.mutation.Name(); ok {
		_spec.SetField(kusogeeeeeenft.FieldName, field.TypeString, value)
	}
	if value, ok := knuo.mutation.Status(); ok {
		_spec.SetField(kusogeeeeeenft.FieldStatus, field.TypeString, value)
	}
	if value, ok := knuo.mutation.Price(); ok {
		_spec.SetField(kusogeeeeeenft.FieldPrice, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.AddedPrice(); ok {
		_spec.AddField(kusogeeeeeenft.FieldPrice, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.PublishedAt(); ok {
		_spec.SetField(kusogeeeeeenft.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := knuo.mutation.WeaponRank(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponRank, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.AddedWeaponRank(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponRank, field.TypeInt, value)
	}
	if knuo.mutation.WeaponRankCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponRank, field.TypeInt)
	}
	if value, ok := knuo.mutation.WeaponType(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponType, field.TypeString, value)
	}
	if knuo.mutation.WeaponTypeCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponType, field.TypeString)
	}
	if value, ok := knuo.mutation.WeaponVitality(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponVitality, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.AddedWeaponVitality(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponVitality, field.TypeInt, value)
	}
	if knuo.mutation.WeaponVitalityCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponVitality, field.TypeInt)
	}
	if value, ok := knuo.mutation.WeaponStrength(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponStrength, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.AddedWeaponStrength(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponStrength, field.TypeInt, value)
	}
	if knuo.mutation.WeaponStrengthCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponStrength, field.TypeInt)
	}
	if value, ok := knuo.mutation.WeaponPhysicalDefense(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponPhysicalDefense, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.AddedWeaponPhysicalDefense(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponPhysicalDefense, field.TypeInt, value)
	}
	if knuo.mutation.WeaponPhysicalDefenseCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponPhysicalDefense, field.TypeInt)
	}
	if value, ok := knuo.mutation.WeaponMagicalDefense(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponMagicalDefense, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.AddedWeaponMagicalDefense(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponMagicalDefense, field.TypeInt, value)
	}
	if knuo.mutation.WeaponMagicalDefenseCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponMagicalDefense, field.TypeInt)
	}
	if value, ok := knuo.mutation.WeaponAgility(); ok {
		_spec.SetField(kusogeeeeeenft.FieldWeaponAgility, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.AddedWeaponAgility(); ok {
		_spec.AddField(kusogeeeeeenft.FieldWeaponAgility, field.TypeInt, value)
	}
	if knuo.mutation.WeaponAgilityCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldWeaponAgility, field.TypeInt)
	}
	if value, ok := knuo.mutation.CharacterRank(); ok {
		_spec.SetField(kusogeeeeeenft.FieldCharacterRank, field.TypeString, value)
	}
	if knuo.mutation.CharacterRankCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldCharacterRank, field.TypeString)
	}
	if value, ok := knuo.mutation.CharacterTotalSupply(); ok {
		_spec.SetField(kusogeeeeeenft.FieldCharacterTotalSupply, field.TypeInt, value)
	}
	if value, ok := knuo.mutation.AddedCharacterTotalSupply(); ok {
		_spec.AddField(kusogeeeeeenft.FieldCharacterTotalSupply, field.TypeInt, value)
	}
	if knuo.mutation.CharacterTotalSupplyCleared() {
		_spec.ClearField(kusogeeeeeenft.FieldCharacterTotalSupply, field.TypeInt)
	}
	if knuo.mutation.ChangeLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kusogeeeeeenft.ChangeLogsTable,
			Columns: []string{kusogeeeeeenft.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := knuo.mutation.RemovedChangeLogsIDs(); len(nodes) > 0 && !knuo.mutation.ChangeLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kusogeeeeeenft.ChangeLogsTable,
			Columns: []string{kusogeeeeeenft.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := knuo.mutation.ChangeLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kusogeeeeeenft.ChangeLogsTable,
			Columns: []string{kusogeeeeeenft.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kusogeeeeeenftchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KusogeeeeeeNFT{config: knuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, knuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kusogeeeeeenft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	knuo.mutation.done = true
	return _node, nil
}
