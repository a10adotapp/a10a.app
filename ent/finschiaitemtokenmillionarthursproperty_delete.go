// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenmillionarthursproperty"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// FinschiaItemTokenMillionArthursPropertyDelete is the builder for deleting a FinschiaItemTokenMillionArthursProperty entity.
type FinschiaItemTokenMillionArthursPropertyDelete struct {
	config
	hooks    []Hook
	mutation *FinschiaItemTokenMillionArthursPropertyMutation
}

// Where appends a list predicates to the FinschiaItemTokenMillionArthursPropertyDelete builder.
func (fitmapd *FinschiaItemTokenMillionArthursPropertyDelete) Where(ps ...predicate.FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenMillionArthursPropertyDelete {
	fitmapd.mutation.Where(ps...)
	return fitmapd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fitmapd *FinschiaItemTokenMillionArthursPropertyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fitmapd.sqlExec, fitmapd.mutation, fitmapd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fitmapd *FinschiaItemTokenMillionArthursPropertyDelete) ExecX(ctx context.Context) int {
	n, err := fitmapd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fitmapd *FinschiaItemTokenMillionArthursPropertyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(finschiaitemtokenmillionarthursproperty.Table, sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32))
	if ps := fitmapd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fitmapd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fitmapd.mutation.done = true
	return affected, err
}

// FinschiaItemTokenMillionArthursPropertyDeleteOne is the builder for deleting a single FinschiaItemTokenMillionArthursProperty entity.
type FinschiaItemTokenMillionArthursPropertyDeleteOne struct {
	fitmapd *FinschiaItemTokenMillionArthursPropertyDelete
}

// Where appends a list predicates to the FinschiaItemTokenMillionArthursPropertyDelete builder.
func (fitmapdo *FinschiaItemTokenMillionArthursPropertyDeleteOne) Where(ps ...predicate.FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenMillionArthursPropertyDeleteOne {
	fitmapdo.fitmapd.mutation.Where(ps...)
	return fitmapdo
}

// Exec executes the deletion query.
func (fitmapdo *FinschiaItemTokenMillionArthursPropertyDeleteOne) Exec(ctx context.Context) error {
	n, err := fitmapdo.fitmapd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{finschiaitemtokenmillionarthursproperty.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fitmapdo *FinschiaItemTokenMillionArthursPropertyDeleteOne) ExecX(ctx context.Context) {
	if err := fitmapdo.Exec(ctx); err != nil {
		panic(err)
	}
}
