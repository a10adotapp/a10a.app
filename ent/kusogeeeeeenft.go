// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenft"
)

// Kusogeeeeee NFT
type KusogeeeeeeNFT struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at"`
	// URI holds the value of the "uri" field.
	URI string `json:"uri"`
	// Type holds the value of the "type" field.
	Type string `json:"type"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Status holds the value of the "status" field.
	Status string `json:"status"`
	// Price holds the value of the "price" field.
	Price int `json:"price"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at"`
	// WeaponRank holds the value of the "weapon_rank" field.
	WeaponRank *int `json:"weapon_rank"`
	// WeaponType holds the value of the "weapon_type" field.
	WeaponType *string `json:"weapon_type"`
	// WeaponVitality holds the value of the "weapon_vitality" field.
	WeaponVitality *int `json:"weapon_vitality"`
	// WeaponStrength holds the value of the "weapon_strength" field.
	WeaponStrength *int `json:"weapon_strength"`
	// WeaponPhysicalDefense holds the value of the "weapon_physical_defense" field.
	WeaponPhysicalDefense *int `json:"weapon_physical_defense"`
	// WeaponMagicalDefense holds the value of the "weapon_magical_defense" field.
	WeaponMagicalDefense *int `json:"weapon_magical_defense"`
	// WeaponAgility holds the value of the "weapon_agility" field.
	WeaponAgility *int `json:"weapon_agility"`
	// CharacterRank holds the value of the "character_rank" field.
	CharacterRank *string `json:"character_rank"`
	// CharacterTotalSupply holds the value of the "character_total_supply" field.
	CharacterTotalSupply *int `json:"character_total_supply"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KusogeeeeeeNFTQuery when eager-loading is set.
	Edges        KusogeeeeeeNFTEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KusogeeeeeeNFTEdges holds the relations/edges for other nodes in the graph.
type KusogeeeeeeNFTEdges struct {
	// ChangeLogs holds the value of the change_logs edge.
	ChangeLogs []*KusogeeeeeeNFTChangeLog `json:"change_logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChangeLogsOrErr returns the ChangeLogs value or an error if the edge
// was not loaded in eager-loading.
func (e KusogeeeeeeNFTEdges) ChangeLogsOrErr() ([]*KusogeeeeeeNFTChangeLog, error) {
	if e.loadedTypes[0] {
		return e.ChangeLogs, nil
	}
	return nil, &NotLoadedError{edge: "change_logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KusogeeeeeeNFT) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kusogeeeeeenft.FieldID, kusogeeeeeenft.FieldPrice, kusogeeeeeenft.FieldWeaponRank, kusogeeeeeenft.FieldWeaponVitality, kusogeeeeeenft.FieldWeaponStrength, kusogeeeeeenft.FieldWeaponPhysicalDefense, kusogeeeeeenft.FieldWeaponMagicalDefense, kusogeeeeeenft.FieldWeaponAgility, kusogeeeeeenft.FieldCharacterTotalSupply:
			values[i] = new(sql.NullInt64)
		case kusogeeeeeenft.FieldURI, kusogeeeeeenft.FieldType, kusogeeeeeenft.FieldName, kusogeeeeeenft.FieldStatus, kusogeeeeeenft.FieldWeaponType, kusogeeeeeenft.FieldCharacterRank:
			values[i] = new(sql.NullString)
		case kusogeeeeeenft.FieldCreatedAt, kusogeeeeeenft.FieldUpdatedAt, kusogeeeeeenft.FieldDeletedAt, kusogeeeeeenft.FieldPublishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KusogeeeeeeNFT fields.
func (kn *KusogeeeeeeNFT) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kusogeeeeeenft.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kn.ID = uint32(value.Int64)
		case kusogeeeeeenft.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kn.CreatedAt = value.Time
			}
		case kusogeeeeeenft.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kn.UpdatedAt = value.Time
			}
		case kusogeeeeeenft.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				kn.DeletedAt = new(time.Time)
				*kn.DeletedAt = value.Time
			}
		case kusogeeeeeenft.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				kn.URI = value.String
			}
		case kusogeeeeeenft.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				kn.Type = value.String
			}
		case kusogeeeeeenft.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				kn.Name = value.String
			}
		case kusogeeeeeenft.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				kn.Status = value.String
			}
		case kusogeeeeeenft.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				kn.Price = int(value.Int64)
			}
		case kusogeeeeeenft.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				kn.PublishedAt = value.Time
			}
		case kusogeeeeeenft.FieldWeaponRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_rank", values[i])
			} else if value.Valid {
				kn.WeaponRank = new(int)
				*kn.WeaponRank = int(value.Int64)
			}
		case kusogeeeeeenft.FieldWeaponType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_type", values[i])
			} else if value.Valid {
				kn.WeaponType = new(string)
				*kn.WeaponType = value.String
			}
		case kusogeeeeeenft.FieldWeaponVitality:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_vitality", values[i])
			} else if value.Valid {
				kn.WeaponVitality = new(int)
				*kn.WeaponVitality = int(value.Int64)
			}
		case kusogeeeeeenft.FieldWeaponStrength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_strength", values[i])
			} else if value.Valid {
				kn.WeaponStrength = new(int)
				*kn.WeaponStrength = int(value.Int64)
			}
		case kusogeeeeeenft.FieldWeaponPhysicalDefense:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_physical_defense", values[i])
			} else if value.Valid {
				kn.WeaponPhysicalDefense = new(int)
				*kn.WeaponPhysicalDefense = int(value.Int64)
			}
		case kusogeeeeeenft.FieldWeaponMagicalDefense:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_magical_defense", values[i])
			} else if value.Valid {
				kn.WeaponMagicalDefense = new(int)
				*kn.WeaponMagicalDefense = int(value.Int64)
			}
		case kusogeeeeeenft.FieldWeaponAgility:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weapon_agility", values[i])
			} else if value.Valid {
				kn.WeaponAgility = new(int)
				*kn.WeaponAgility = int(value.Int64)
			}
		case kusogeeeeeenft.FieldCharacterRank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field character_rank", values[i])
			} else if value.Valid {
				kn.CharacterRank = new(string)
				*kn.CharacterRank = value.String
			}
		case kusogeeeeeenft.FieldCharacterTotalSupply:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field character_total_supply", values[i])
			} else if value.Valid {
				kn.CharacterTotalSupply = new(int)
				*kn.CharacterTotalSupply = int(value.Int64)
			}
		default:
			kn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KusogeeeeeeNFT.
// This includes values selected through modifiers, order, etc.
func (kn *KusogeeeeeeNFT) Value(name string) (ent.Value, error) {
	return kn.selectValues.Get(name)
}

// QueryChangeLogs queries the "change_logs" edge of the KusogeeeeeeNFT entity.
func (kn *KusogeeeeeeNFT) QueryChangeLogs() *KusogeeeeeeNFTChangeLogQuery {
	return NewKusogeeeeeeNFTClient(kn.config).QueryChangeLogs(kn)
}

// Update returns a builder for updating this KusogeeeeeeNFT.
// Note that you need to call KusogeeeeeeNFT.Unwrap() before calling this method if this KusogeeeeeeNFT
// was returned from a transaction, and the transaction was committed or rolled back.
func (kn *KusogeeeeeeNFT) Update() *KusogeeeeeeNFTUpdateOne {
	return NewKusogeeeeeeNFTClient(kn.config).UpdateOne(kn)
}

// Unwrap unwraps the KusogeeeeeeNFT entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kn *KusogeeeeeeNFT) Unwrap() *KusogeeeeeeNFT {
	_tx, ok := kn.config.driver.(*txDriver)
	if !ok {
		panic("ent: KusogeeeeeeNFT is not a transactional entity")
	}
	kn.config.driver = _tx.drv
	return kn
}

// String implements the fmt.Stringer.
func (kn *KusogeeeeeeNFT) String() string {
	var builder strings.Builder
	builder.WriteString("KusogeeeeeeNFT(")
	builder.WriteString(fmt.Sprintf("id=%v, ", kn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(kn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(kn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := kn.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(kn.URI)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(kn.Type)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(kn.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(kn.Status)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", kn.Price))
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(kn.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := kn.WeaponRank; v != nil {
		builder.WriteString("weapon_rank=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := kn.WeaponType; v != nil {
		builder.WriteString("weapon_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := kn.WeaponVitality; v != nil {
		builder.WriteString("weapon_vitality=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := kn.WeaponStrength; v != nil {
		builder.WriteString("weapon_strength=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := kn.WeaponPhysicalDefense; v != nil {
		builder.WriteString("weapon_physical_defense=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := kn.WeaponMagicalDefense; v != nil {
		builder.WriteString("weapon_magical_defense=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := kn.WeaponAgility; v != nil {
		builder.WriteString("weapon_agility=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := kn.CharacterRank; v != nil {
		builder.WriteString("character_rank=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := kn.CharacterTotalSupply; v != nil {
		builder.WriteString("character_total_supply=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// KusogeeeeeeNFTs is a parsable slice of KusogeeeeeeNFT.
type KusogeeeeeeNFTs []*KusogeeeeeeNFT
