// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtoken"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenmillionarthursproperty"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// FinschiaItemTokenMillionArthursPropertyUpdate is the builder for updating FinschiaItemTokenMillionArthursProperty entities.
type FinschiaItemTokenMillionArthursPropertyUpdate struct {
	config
	hooks    []Hook
	mutation *FinschiaItemTokenMillionArthursPropertyMutation
}

// Where appends a list predicates to the FinschiaItemTokenMillionArthursPropertyUpdate builder.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) Where(ps ...predicate.FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.Where(ps...)
	return fitmapu
}

// SetUpdatedAt sets the "updated_at" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetUpdatedAt(t time.Time) *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.SetUpdatedAt(t)
	return fitmapu
}

// SetDeletedAt sets the "deleted_at" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetDeletedAt(t time.Time) *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.SetDeletedAt(t)
	return fitmapu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetNillableDeletedAt(t *time.Time) *FinschiaItemTokenMillionArthursPropertyUpdate {
	if t != nil {
		fitmapu.SetDeletedAt(*t)
	}
	return fitmapu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) ClearDeletedAt() *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.ClearDeletedAt()
	return fitmapu
}

// SetFinschiaItemTokenID sets the "finschia_item_token_id" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetFinschiaItemTokenID(u uint32) *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.SetFinschiaItemTokenID(u)
	return fitmapu
}

// SetNillableFinschiaItemTokenID sets the "finschia_item_token_id" field if the given value is not nil.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetNillableFinschiaItemTokenID(u *uint32) *FinschiaItemTokenMillionArthursPropertyUpdate {
	if u != nil {
		fitmapu.SetFinschiaItemTokenID(*u)
	}
	return fitmapu
}

// SetSeries sets the "series" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetSeries(s string) *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.SetSeries(s)
	return fitmapu
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetNillableSeries(s *string) *FinschiaItemTokenMillionArthursPropertyUpdate {
	if s != nil {
		fitmapu.SetSeries(*s)
	}
	return fitmapu
}

// ClearSeries clears the value of the "series" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) ClearSeries() *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.ClearSeries()
	return fitmapu
}

// SetGearCategory sets the "gear_category" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetGearCategory(s string) *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.SetGearCategory(s)
	return fitmapu
}

// SetNillableGearCategory sets the "gear_category" field if the given value is not nil.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetNillableGearCategory(s *string) *FinschiaItemTokenMillionArthursPropertyUpdate {
	if s != nil {
		fitmapu.SetGearCategory(*s)
	}
	return fitmapu
}

// ClearGearCategory clears the value of the "gear_category" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) ClearGearCategory() *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.ClearGearCategory()
	return fitmapu
}

// SetGearRarity sets the "gear_rarity" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetGearRarity(s string) *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.SetGearRarity(s)
	return fitmapu
}

// SetNillableGearRarity sets the "gear_rarity" field if the given value is not nil.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetNillableGearRarity(s *string) *FinschiaItemTokenMillionArthursPropertyUpdate {
	if s != nil {
		fitmapu.SetGearRarity(*s)
	}
	return fitmapu
}

// ClearGearRarity clears the value of the "gear_rarity" field.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) ClearGearRarity() *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.ClearGearRarity()
	return fitmapu
}

// SetFinschiaItemToken sets the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SetFinschiaItemToken(f *FinschiaItemToken) *FinschiaItemTokenMillionArthursPropertyUpdate {
	return fitmapu.SetFinschiaItemTokenID(f.ID)
}

// Mutation returns the FinschiaItemTokenMillionArthursPropertyMutation object of the builder.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) Mutation() *FinschiaItemTokenMillionArthursPropertyMutation {
	return fitmapu.mutation
}

// ClearFinschiaItemToken clears the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) ClearFinschiaItemToken() *FinschiaItemTokenMillionArthursPropertyUpdate {
	fitmapu.mutation.ClearFinschiaItemToken()
	return fitmapu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) Save(ctx context.Context) (int, error) {
	if err := fitmapu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fitmapu.sqlSave, fitmapu.mutation, fitmapu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) SaveX(ctx context.Context) int {
	affected, err := fitmapu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) Exec(ctx context.Context) error {
	_, err := fitmapu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) ExecX(ctx context.Context) {
	if err := fitmapu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) defaults() error {
	if _, ok := fitmapu.mutation.UpdatedAt(); !ok {
		if finschiaitemtokenmillionarthursproperty.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtokenmillionarthursproperty.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtokenmillionarthursproperty.UpdateDefaultUpdatedAt()
		fitmapu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) check() error {
	if _, ok := fitmapu.mutation.FinschiaItemTokenID(); fitmapu.mutation.FinschiaItemTokenCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FinschiaItemTokenMillionArthursProperty.finschia_item_token"`)
	}
	return nil
}

func (fitmapu *FinschiaItemTokenMillionArthursPropertyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fitmapu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(finschiaitemtokenmillionarthursproperty.Table, finschiaitemtokenmillionarthursproperty.Columns, sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32))
	if ps := fitmapu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fitmapu.mutation.UpdatedAt(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fitmapu.mutation.DeletedAt(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldDeletedAt, field.TypeTime, value)
	}
	if fitmapu.mutation.DeletedAtCleared() {
		_spec.ClearField(finschiaitemtokenmillionarthursproperty.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fitmapu.mutation.Series(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldSeries, field.TypeString, value)
	}
	if fitmapu.mutation.SeriesCleared() {
		_spec.ClearField(finschiaitemtokenmillionarthursproperty.FieldSeries, field.TypeString)
	}
	if value, ok := fitmapu.mutation.GearCategory(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldGearCategory, field.TypeString, value)
	}
	if fitmapu.mutation.GearCategoryCleared() {
		_spec.ClearField(finschiaitemtokenmillionarthursproperty.FieldGearCategory, field.TypeString)
	}
	if value, ok := fitmapu.mutation.GearRarity(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldGearRarity, field.TypeString, value)
	}
	if fitmapu.mutation.GearRarityCleared() {
		_spec.ClearField(finschiaitemtokenmillionarthursproperty.FieldGearRarity, field.TypeString)
	}
	if fitmapu.mutation.FinschiaItemTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenmillionarthursproperty.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenmillionarthursproperty.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitmapu.mutation.FinschiaItemTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenmillionarthursproperty.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenmillionarthursproperty.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fitmapu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finschiaitemtokenmillionarthursproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fitmapu.mutation.done = true
	return n, nil
}

// FinschiaItemTokenMillionArthursPropertyUpdateOne is the builder for updating a single FinschiaItemTokenMillionArthursProperty entity.
type FinschiaItemTokenMillionArthursPropertyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FinschiaItemTokenMillionArthursPropertyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetUpdatedAt(t time.Time) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.SetUpdatedAt(t)
	return fitmapuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetDeletedAt(t time.Time) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.SetDeletedAt(t)
	return fitmapuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetNillableDeletedAt(t *time.Time) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	if t != nil {
		fitmapuo.SetDeletedAt(*t)
	}
	return fitmapuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) ClearDeletedAt() *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.ClearDeletedAt()
	return fitmapuo
}

// SetFinschiaItemTokenID sets the "finschia_item_token_id" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetFinschiaItemTokenID(u uint32) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.SetFinschiaItemTokenID(u)
	return fitmapuo
}

// SetNillableFinschiaItemTokenID sets the "finschia_item_token_id" field if the given value is not nil.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetNillableFinschiaItemTokenID(u *uint32) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	if u != nil {
		fitmapuo.SetFinschiaItemTokenID(*u)
	}
	return fitmapuo
}

// SetSeries sets the "series" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetSeries(s string) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.SetSeries(s)
	return fitmapuo
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetNillableSeries(s *string) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	if s != nil {
		fitmapuo.SetSeries(*s)
	}
	return fitmapuo
}

// ClearSeries clears the value of the "series" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) ClearSeries() *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.ClearSeries()
	return fitmapuo
}

// SetGearCategory sets the "gear_category" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetGearCategory(s string) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.SetGearCategory(s)
	return fitmapuo
}

// SetNillableGearCategory sets the "gear_category" field if the given value is not nil.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetNillableGearCategory(s *string) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	if s != nil {
		fitmapuo.SetGearCategory(*s)
	}
	return fitmapuo
}

// ClearGearCategory clears the value of the "gear_category" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) ClearGearCategory() *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.ClearGearCategory()
	return fitmapuo
}

// SetGearRarity sets the "gear_rarity" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetGearRarity(s string) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.SetGearRarity(s)
	return fitmapuo
}

// SetNillableGearRarity sets the "gear_rarity" field if the given value is not nil.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetNillableGearRarity(s *string) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	if s != nil {
		fitmapuo.SetGearRarity(*s)
	}
	return fitmapuo
}

// ClearGearRarity clears the value of the "gear_rarity" field.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) ClearGearRarity() *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.ClearGearRarity()
	return fitmapuo
}

// SetFinschiaItemToken sets the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SetFinschiaItemToken(f *FinschiaItemToken) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	return fitmapuo.SetFinschiaItemTokenID(f.ID)
}

// Mutation returns the FinschiaItemTokenMillionArthursPropertyMutation object of the builder.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) Mutation() *FinschiaItemTokenMillionArthursPropertyMutation {
	return fitmapuo.mutation
}

// ClearFinschiaItemToken clears the "finschia_item_token" edge to the FinschiaItemToken entity.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) ClearFinschiaItemToken() *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.ClearFinschiaItemToken()
	return fitmapuo
}

// Where appends a list predicates to the FinschiaItemTokenMillionArthursPropertyUpdate builder.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) Where(ps ...predicate.FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.mutation.Where(ps...)
	return fitmapuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) Select(field string, fields ...string) *FinschiaItemTokenMillionArthursPropertyUpdateOne {
	fitmapuo.fields = append([]string{field}, fields...)
	return fitmapuo
}

// Save executes the query and returns the updated FinschiaItemTokenMillionArthursProperty entity.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) Save(ctx context.Context) (*FinschiaItemTokenMillionArthursProperty, error) {
	if err := fitmapuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fitmapuo.sqlSave, fitmapuo.mutation, fitmapuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) SaveX(ctx context.Context) *FinschiaItemTokenMillionArthursProperty {
	node, err := fitmapuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) Exec(ctx context.Context) error {
	_, err := fitmapuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) ExecX(ctx context.Context) {
	if err := fitmapuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) defaults() error {
	if _, ok := fitmapuo.mutation.UpdatedAt(); !ok {
		if finschiaitemtokenmillionarthursproperty.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtokenmillionarthursproperty.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtokenmillionarthursproperty.UpdateDefaultUpdatedAt()
		fitmapuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) check() error {
	if _, ok := fitmapuo.mutation.FinschiaItemTokenID(); fitmapuo.mutation.FinschiaItemTokenCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FinschiaItemTokenMillionArthursProperty.finschia_item_token"`)
	}
	return nil
}

func (fitmapuo *FinschiaItemTokenMillionArthursPropertyUpdateOne) sqlSave(ctx context.Context) (_node *FinschiaItemTokenMillionArthursProperty, err error) {
	if err := fitmapuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(finschiaitemtokenmillionarthursproperty.Table, finschiaitemtokenmillionarthursproperty.Columns, sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32))
	id, ok := fitmapuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FinschiaItemTokenMillionArthursProperty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fitmapuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, finschiaitemtokenmillionarthursproperty.FieldID)
		for _, f := range fields {
			if !finschiaitemtokenmillionarthursproperty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != finschiaitemtokenmillionarthursproperty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fitmapuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fitmapuo.mutation.UpdatedAt(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fitmapuo.mutation.DeletedAt(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldDeletedAt, field.TypeTime, value)
	}
	if fitmapuo.mutation.DeletedAtCleared() {
		_spec.ClearField(finschiaitemtokenmillionarthursproperty.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fitmapuo.mutation.Series(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldSeries, field.TypeString, value)
	}
	if fitmapuo.mutation.SeriesCleared() {
		_spec.ClearField(finschiaitemtokenmillionarthursproperty.FieldSeries, field.TypeString)
	}
	if value, ok := fitmapuo.mutation.GearCategory(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldGearCategory, field.TypeString, value)
	}
	if fitmapuo.mutation.GearCategoryCleared() {
		_spec.ClearField(finschiaitemtokenmillionarthursproperty.FieldGearCategory, field.TypeString)
	}
	if value, ok := fitmapuo.mutation.GearRarity(); ok {
		_spec.SetField(finschiaitemtokenmillionarthursproperty.FieldGearRarity, field.TypeString, value)
	}
	if fitmapuo.mutation.GearRarityCleared() {
		_spec.ClearField(finschiaitemtokenmillionarthursproperty.FieldGearRarity, field.TypeString)
	}
	if fitmapuo.mutation.FinschiaItemTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenmillionarthursproperty.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenmillionarthursproperty.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitmapuo.mutation.FinschiaItemTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finschiaitemtokenmillionarthursproperty.FinschiaItemTokenTable,
			Columns: []string{finschiaitemtokenmillionarthursproperty.FinschiaItemTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FinschiaItemTokenMillionArthursProperty{config: fitmapuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fitmapuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finschiaitemtokenmillionarthursproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fitmapuo.mutation.done = true
	return _node, nil
}
