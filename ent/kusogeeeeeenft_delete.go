// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/kusogeeeeeenft"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// KusogeeeeeeNFTDelete is the builder for deleting a KusogeeeeeeNFT entity.
type KusogeeeeeeNFTDelete struct {
	config
	hooks    []Hook
	mutation *KusogeeeeeeNFTMutation
}

// Where appends a list predicates to the KusogeeeeeeNFTDelete builder.
func (knd *KusogeeeeeeNFTDelete) Where(ps ...predicate.KusogeeeeeeNFT) *KusogeeeeeeNFTDelete {
	knd.mutation.Where(ps...)
	return knd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (knd *KusogeeeeeeNFTDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, knd.sqlExec, knd.mutation, knd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (knd *KusogeeeeeeNFTDelete) ExecX(ctx context.Context) int {
	n, err := knd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (knd *KusogeeeeeeNFTDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(kusogeeeeeenft.Table, sqlgraph.NewFieldSpec(kusogeeeeeenft.FieldID, field.TypeUint32))
	if ps := knd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, knd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	knd.mutation.done = true
	return affected, err
}

// KusogeeeeeeNFTDeleteOne is the builder for deleting a single KusogeeeeeeNFT entity.
type KusogeeeeeeNFTDeleteOne struct {
	knd *KusogeeeeeeNFTDelete
}

// Where appends a list predicates to the KusogeeeeeeNFTDelete builder.
func (kndo *KusogeeeeeeNFTDeleteOne) Where(ps ...predicate.KusogeeeeeeNFT) *KusogeeeeeeNFTDeleteOne {
	kndo.knd.mutation.Where(ps...)
	return kndo
}

// Exec executes the deletion query.
func (kndo *KusogeeeeeeNFTDeleteOne) Exec(ctx context.Context) error {
	n, err := kndo.knd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{kusogeeeeeenft.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kndo *KusogeeeeeeNFTDeleteOne) ExecX(ctx context.Context) {
	if err := kndo.Exec(ctx); err != nil {
		panic(err)
	}
}
