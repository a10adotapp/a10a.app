// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/changokushiweapon"
	"github.com/a10adotapp/a10a.app/ent/changokushiweaponchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ChangokushiWeaponChangeLogUpdate is the builder for updating ChangokushiWeaponChangeLog entities.
type ChangokushiWeaponChangeLogUpdate struct {
	config
	hooks    []Hook
	mutation *ChangokushiWeaponChangeLogMutation
}

// Where appends a list predicates to the ChangokushiWeaponChangeLogUpdate builder.
func (cwclu *ChangokushiWeaponChangeLogUpdate) Where(ps ...predicate.ChangokushiWeaponChangeLog) *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.Where(ps...)
	return cwclu
}

// SetUpdatedAt sets the "updated_at" field.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetUpdatedAt(t time.Time) *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.SetUpdatedAt(t)
	return cwclu
}

// SetDeletedAt sets the "deleted_at" field.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetDeletedAt(t time.Time) *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.SetDeletedAt(t)
	return cwclu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetNillableDeletedAt(t *time.Time) *ChangokushiWeaponChangeLogUpdate {
	if t != nil {
		cwclu.SetDeletedAt(*t)
	}
	return cwclu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cwclu *ChangokushiWeaponChangeLogUpdate) ClearDeletedAt() *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.ClearDeletedAt()
	return cwclu
}

// SetChangokushiWeaponID sets the "changokushi_weapon_id" field.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetChangokushiWeaponID(u uint32) *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.SetChangokushiWeaponID(u)
	return cwclu
}

// SetNillableChangokushiWeaponID sets the "changokushi_weapon_id" field if the given value is not nil.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetNillableChangokushiWeaponID(u *uint32) *ChangokushiWeaponChangeLogUpdate {
	if u != nil {
		cwclu.SetChangokushiWeaponID(*u)
	}
	return cwclu
}

// SetStatus sets the "status" field.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetStatus(s string) *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.SetStatus(s)
	return cwclu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetNillableStatus(s *string) *ChangokushiWeaponChangeLogUpdate {
	if s != nil {
		cwclu.SetStatus(*s)
	}
	return cwclu
}

// SetPrice sets the "price" field.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetPrice(i int) *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.ResetPrice()
	cwclu.mutation.SetPrice(i)
	return cwclu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetNillablePrice(i *int) *ChangokushiWeaponChangeLogUpdate {
	if i != nil {
		cwclu.SetPrice(*i)
	}
	return cwclu
}

// AddPrice adds i to the "price" field.
func (cwclu *ChangokushiWeaponChangeLogUpdate) AddPrice(i int) *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.AddPrice(i)
	return cwclu
}

// SetPublishedAt sets the "published_at" field.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetPublishedAt(t time.Time) *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.SetPublishedAt(t)
	return cwclu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetNillablePublishedAt(t *time.Time) *ChangokushiWeaponChangeLogUpdate {
	if t != nil {
		cwclu.SetPublishedAt(*t)
	}
	return cwclu
}

// SetChangokushiWeapon sets the "changokushi_weapon" edge to the ChangokushiWeapon entity.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SetChangokushiWeapon(c *ChangokushiWeapon) *ChangokushiWeaponChangeLogUpdate {
	return cwclu.SetChangokushiWeaponID(c.ID)
}

// Mutation returns the ChangokushiWeaponChangeLogMutation object of the builder.
func (cwclu *ChangokushiWeaponChangeLogUpdate) Mutation() *ChangokushiWeaponChangeLogMutation {
	return cwclu.mutation
}

// ClearChangokushiWeapon clears the "changokushi_weapon" edge to the ChangokushiWeapon entity.
func (cwclu *ChangokushiWeaponChangeLogUpdate) ClearChangokushiWeapon() *ChangokushiWeaponChangeLogUpdate {
	cwclu.mutation.ClearChangokushiWeapon()
	return cwclu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cwclu *ChangokushiWeaponChangeLogUpdate) Save(ctx context.Context) (int, error) {
	if err := cwclu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cwclu.sqlSave, cwclu.mutation, cwclu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cwclu *ChangokushiWeaponChangeLogUpdate) SaveX(ctx context.Context) int {
	affected, err := cwclu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cwclu *ChangokushiWeaponChangeLogUpdate) Exec(ctx context.Context) error {
	_, err := cwclu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwclu *ChangokushiWeaponChangeLogUpdate) ExecX(ctx context.Context) {
	if err := cwclu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwclu *ChangokushiWeaponChangeLogUpdate) defaults() error {
	if _, ok := cwclu.mutation.UpdatedAt(); !ok {
		if changokushiweaponchangelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized changokushiweaponchangelog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := changokushiweaponchangelog.UpdateDefaultUpdatedAt()
		cwclu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cwclu *ChangokushiWeaponChangeLogUpdate) check() error {
	if _, ok := cwclu.mutation.ChangokushiWeaponID(); cwclu.mutation.ChangokushiWeaponCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChangokushiWeaponChangeLog.changokushi_weapon"`)
	}
	return nil
}

func (cwclu *ChangokushiWeaponChangeLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cwclu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(changokushiweaponchangelog.Table, changokushiweaponchangelog.Columns, sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32))
	if ps := cwclu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cwclu.mutation.UpdatedAt(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cwclu.mutation.DeletedAt(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldDeletedAt, field.TypeTime, value)
	}
	if cwclu.mutation.DeletedAtCleared() {
		_spec.ClearField(changokushiweaponchangelog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cwclu.mutation.Status(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldStatus, field.TypeString, value)
	}
	if value, ok := cwclu.mutation.Price(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldPrice, field.TypeInt, value)
	}
	if value, ok := cwclu.mutation.AddedPrice(); ok {
		_spec.AddField(changokushiweaponchangelog.FieldPrice, field.TypeInt, value)
	}
	if value, ok := cwclu.mutation.PublishedAt(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldPublishedAt, field.TypeTime, value)
	}
	if cwclu.mutation.ChangokushiWeaponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changokushiweaponchangelog.ChangokushiWeaponTable,
			Columns: []string{changokushiweaponchangelog.ChangokushiWeaponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweapon.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cwclu.mutation.ChangokushiWeaponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changokushiweaponchangelog.ChangokushiWeaponTable,
			Columns: []string{changokushiweaponchangelog.ChangokushiWeaponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweapon.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cwclu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changokushiweaponchangelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cwclu.mutation.done = true
	return n, nil
}

// ChangokushiWeaponChangeLogUpdateOne is the builder for updating a single ChangokushiWeaponChangeLog entity.
type ChangokushiWeaponChangeLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChangokushiWeaponChangeLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetUpdatedAt(t time.Time) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.SetUpdatedAt(t)
	return cwcluo
}

// SetDeletedAt sets the "deleted_at" field.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetDeletedAt(t time.Time) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.SetDeletedAt(t)
	return cwcluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetNillableDeletedAt(t *time.Time) *ChangokushiWeaponChangeLogUpdateOne {
	if t != nil {
		cwcluo.SetDeletedAt(*t)
	}
	return cwcluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) ClearDeletedAt() *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.ClearDeletedAt()
	return cwcluo
}

// SetChangokushiWeaponID sets the "changokushi_weapon_id" field.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetChangokushiWeaponID(u uint32) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.SetChangokushiWeaponID(u)
	return cwcluo
}

// SetNillableChangokushiWeaponID sets the "changokushi_weapon_id" field if the given value is not nil.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetNillableChangokushiWeaponID(u *uint32) *ChangokushiWeaponChangeLogUpdateOne {
	if u != nil {
		cwcluo.SetChangokushiWeaponID(*u)
	}
	return cwcluo
}

// SetStatus sets the "status" field.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetStatus(s string) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.SetStatus(s)
	return cwcluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetNillableStatus(s *string) *ChangokushiWeaponChangeLogUpdateOne {
	if s != nil {
		cwcluo.SetStatus(*s)
	}
	return cwcluo
}

// SetPrice sets the "price" field.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetPrice(i int) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.ResetPrice()
	cwcluo.mutation.SetPrice(i)
	return cwcluo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetNillablePrice(i *int) *ChangokushiWeaponChangeLogUpdateOne {
	if i != nil {
		cwcluo.SetPrice(*i)
	}
	return cwcluo
}

// AddPrice adds i to the "price" field.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) AddPrice(i int) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.AddPrice(i)
	return cwcluo
}

// SetPublishedAt sets the "published_at" field.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetPublishedAt(t time.Time) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.SetPublishedAt(t)
	return cwcluo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetNillablePublishedAt(t *time.Time) *ChangokushiWeaponChangeLogUpdateOne {
	if t != nil {
		cwcluo.SetPublishedAt(*t)
	}
	return cwcluo
}

// SetChangokushiWeapon sets the "changokushi_weapon" edge to the ChangokushiWeapon entity.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SetChangokushiWeapon(c *ChangokushiWeapon) *ChangokushiWeaponChangeLogUpdateOne {
	return cwcluo.SetChangokushiWeaponID(c.ID)
}

// Mutation returns the ChangokushiWeaponChangeLogMutation object of the builder.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) Mutation() *ChangokushiWeaponChangeLogMutation {
	return cwcluo.mutation
}

// ClearChangokushiWeapon clears the "changokushi_weapon" edge to the ChangokushiWeapon entity.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) ClearChangokushiWeapon() *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.ClearChangokushiWeapon()
	return cwcluo
}

// Where appends a list predicates to the ChangokushiWeaponChangeLogUpdate builder.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) Where(ps ...predicate.ChangokushiWeaponChangeLog) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.mutation.Where(ps...)
	return cwcluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) Select(field string, fields ...string) *ChangokushiWeaponChangeLogUpdateOne {
	cwcluo.fields = append([]string{field}, fields...)
	return cwcluo
}

// Save executes the query and returns the updated ChangokushiWeaponChangeLog entity.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) Save(ctx context.Context) (*ChangokushiWeaponChangeLog, error) {
	if err := cwcluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cwcluo.sqlSave, cwcluo.mutation, cwcluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) SaveX(ctx context.Context) *ChangokushiWeaponChangeLog {
	node, err := cwcluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) Exec(ctx context.Context) error {
	_, err := cwcluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) ExecX(ctx context.Context) {
	if err := cwcluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) defaults() error {
	if _, ok := cwcluo.mutation.UpdatedAt(); !ok {
		if changokushiweaponchangelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized changokushiweaponchangelog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := changokushiweaponchangelog.UpdateDefaultUpdatedAt()
		cwcluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) check() error {
	if _, ok := cwcluo.mutation.ChangokushiWeaponID(); cwcluo.mutation.ChangokushiWeaponCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChangokushiWeaponChangeLog.changokushi_weapon"`)
	}
	return nil
}

func (cwcluo *ChangokushiWeaponChangeLogUpdateOne) sqlSave(ctx context.Context) (_node *ChangokushiWeaponChangeLog, err error) {
	if err := cwcluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(changokushiweaponchangelog.Table, changokushiweaponchangelog.Columns, sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32))
	id, ok := cwcluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChangokushiWeaponChangeLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cwcluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, changokushiweaponchangelog.FieldID)
		for _, f := range fields {
			if !changokushiweaponchangelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != changokushiweaponchangelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cwcluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cwcluo.mutation.UpdatedAt(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cwcluo.mutation.DeletedAt(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldDeletedAt, field.TypeTime, value)
	}
	if cwcluo.mutation.DeletedAtCleared() {
		_spec.ClearField(changokushiweaponchangelog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cwcluo.mutation.Status(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldStatus, field.TypeString, value)
	}
	if value, ok := cwcluo.mutation.Price(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldPrice, field.TypeInt, value)
	}
	if value, ok := cwcluo.mutation.AddedPrice(); ok {
		_spec.AddField(changokushiweaponchangelog.FieldPrice, field.TypeInt, value)
	}
	if value, ok := cwcluo.mutation.PublishedAt(); ok {
		_spec.SetField(changokushiweaponchangelog.FieldPublishedAt, field.TypeTime, value)
	}
	if cwcluo.mutation.ChangokushiWeaponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changokushiweaponchangelog.ChangokushiWeaponTable,
			Columns: []string{changokushiweaponchangelog.ChangokushiWeaponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweapon.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cwcluo.mutation.ChangokushiWeaponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changokushiweaponchangelog.ChangokushiWeaponTable,
			Columns: []string{changokushiweaponchangelog.ChangokushiWeaponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweapon.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChangokushiWeaponChangeLog{config: cwcluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cwcluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changokushiweaponchangelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cwcluo.mutation.done = true
	return _node, nil
}
