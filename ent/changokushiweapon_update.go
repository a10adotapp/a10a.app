// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/changokushiweapon"
	"github.com/a10adotapp/a10a.app/ent/changokushiweaponchangelog"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ChangokushiWeaponUpdate is the builder for updating ChangokushiWeapon entities.
type ChangokushiWeaponUpdate struct {
	config
	hooks    []Hook
	mutation *ChangokushiWeaponMutation
}

// Where appends a list predicates to the ChangokushiWeaponUpdate builder.
func (cwu *ChangokushiWeaponUpdate) Where(ps ...predicate.ChangokushiWeapon) *ChangokushiWeaponUpdate {
	cwu.mutation.Where(ps...)
	return cwu
}

// SetUpdatedAt sets the "updated_at" field.
func (cwu *ChangokushiWeaponUpdate) SetUpdatedAt(t time.Time) *ChangokushiWeaponUpdate {
	cwu.mutation.SetUpdatedAt(t)
	return cwu
}

// SetDeletedAt sets the "deleted_at" field.
func (cwu *ChangokushiWeaponUpdate) SetDeletedAt(t time.Time) *ChangokushiWeaponUpdate {
	cwu.mutation.SetDeletedAt(t)
	return cwu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableDeletedAt(t *time.Time) *ChangokushiWeaponUpdate {
	if t != nil {
		cwu.SetDeletedAt(*t)
	}
	return cwu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cwu *ChangokushiWeaponUpdate) ClearDeletedAt() *ChangokushiWeaponUpdate {
	cwu.mutation.ClearDeletedAt()
	return cwu
}

// SetURI sets the "uri" field.
func (cwu *ChangokushiWeaponUpdate) SetURI(s string) *ChangokushiWeaponUpdate {
	cwu.mutation.SetURI(s)
	return cwu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableURI(s *string) *ChangokushiWeaponUpdate {
	if s != nil {
		cwu.SetURI(*s)
	}
	return cwu
}

// SetName sets the "name" field.
func (cwu *ChangokushiWeaponUpdate) SetName(s string) *ChangokushiWeaponUpdate {
	cwu.mutation.SetName(s)
	return cwu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableName(s *string) *ChangokushiWeaponUpdate {
	if s != nil {
		cwu.SetName(*s)
	}
	return cwu
}

// SetRank sets the "rank" field.
func (cwu *ChangokushiWeaponUpdate) SetRank(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.ResetRank()
	cwu.mutation.SetRank(i)
	return cwu
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableRank(i *int) *ChangokushiWeaponUpdate {
	if i != nil {
		cwu.SetRank(*i)
	}
	return cwu
}

// AddRank adds i to the "rank" field.
func (cwu *ChangokushiWeaponUpdate) AddRank(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.AddRank(i)
	return cwu
}

// SetType sets the "type" field.
func (cwu *ChangokushiWeaponUpdate) SetType(s string) *ChangokushiWeaponUpdate {
	cwu.mutation.SetType(s)
	return cwu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableType(s *string) *ChangokushiWeaponUpdate {
	if s != nil {
		cwu.SetType(*s)
	}
	return cwu
}

// SetSkill sets the "skill" field.
func (cwu *ChangokushiWeaponUpdate) SetSkill(s string) *ChangokushiWeaponUpdate {
	cwu.mutation.SetSkill(s)
	return cwu
}

// SetNillableSkill sets the "skill" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableSkill(s *string) *ChangokushiWeaponUpdate {
	if s != nil {
		cwu.SetSkill(*s)
	}
	return cwu
}

// SetVitality sets the "vitality" field.
func (cwu *ChangokushiWeaponUpdate) SetVitality(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.ResetVitality()
	cwu.mutation.SetVitality(i)
	return cwu
}

// SetNillableVitality sets the "vitality" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableVitality(i *int) *ChangokushiWeaponUpdate {
	if i != nil {
		cwu.SetVitality(*i)
	}
	return cwu
}

// AddVitality adds i to the "vitality" field.
func (cwu *ChangokushiWeaponUpdate) AddVitality(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.AddVitality(i)
	return cwu
}

// SetStrength sets the "strength" field.
func (cwu *ChangokushiWeaponUpdate) SetStrength(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.ResetStrength()
	cwu.mutation.SetStrength(i)
	return cwu
}

// SetNillableStrength sets the "strength" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableStrength(i *int) *ChangokushiWeaponUpdate {
	if i != nil {
		cwu.SetStrength(*i)
	}
	return cwu
}

// AddStrength adds i to the "strength" field.
func (cwu *ChangokushiWeaponUpdate) AddStrength(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.AddStrength(i)
	return cwu
}

// SetPhysicalDefense sets the "physical_defense" field.
func (cwu *ChangokushiWeaponUpdate) SetPhysicalDefense(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.ResetPhysicalDefense()
	cwu.mutation.SetPhysicalDefense(i)
	return cwu
}

// SetNillablePhysicalDefense sets the "physical_defense" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillablePhysicalDefense(i *int) *ChangokushiWeaponUpdate {
	if i != nil {
		cwu.SetPhysicalDefense(*i)
	}
	return cwu
}

// AddPhysicalDefense adds i to the "physical_defense" field.
func (cwu *ChangokushiWeaponUpdate) AddPhysicalDefense(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.AddPhysicalDefense(i)
	return cwu
}

// SetMagicalDefense sets the "magical_defense" field.
func (cwu *ChangokushiWeaponUpdate) SetMagicalDefense(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.ResetMagicalDefense()
	cwu.mutation.SetMagicalDefense(i)
	return cwu
}

// SetNillableMagicalDefense sets the "magical_defense" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableMagicalDefense(i *int) *ChangokushiWeaponUpdate {
	if i != nil {
		cwu.SetMagicalDefense(*i)
	}
	return cwu
}

// AddMagicalDefense adds i to the "magical_defense" field.
func (cwu *ChangokushiWeaponUpdate) AddMagicalDefense(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.AddMagicalDefense(i)
	return cwu
}

// SetAgility sets the "agility" field.
func (cwu *ChangokushiWeaponUpdate) SetAgility(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.ResetAgility()
	cwu.mutation.SetAgility(i)
	return cwu
}

// SetNillableAgility sets the "agility" field if the given value is not nil.
func (cwu *ChangokushiWeaponUpdate) SetNillableAgility(i *int) *ChangokushiWeaponUpdate {
	if i != nil {
		cwu.SetAgility(*i)
	}
	return cwu
}

// AddAgility adds i to the "agility" field.
func (cwu *ChangokushiWeaponUpdate) AddAgility(i int) *ChangokushiWeaponUpdate {
	cwu.mutation.AddAgility(i)
	return cwu
}

// AddChangeLogIDs adds the "change_logs" edge to the ChangokushiWeaponChangeLog entity by IDs.
func (cwu *ChangokushiWeaponUpdate) AddChangeLogIDs(ids ...uint32) *ChangokushiWeaponUpdate {
	cwu.mutation.AddChangeLogIDs(ids...)
	return cwu
}

// AddChangeLogs adds the "change_logs" edges to the ChangokushiWeaponChangeLog entity.
func (cwu *ChangokushiWeaponUpdate) AddChangeLogs(c ...*ChangokushiWeaponChangeLog) *ChangokushiWeaponUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cwu.AddChangeLogIDs(ids...)
}

// Mutation returns the ChangokushiWeaponMutation object of the builder.
func (cwu *ChangokushiWeaponUpdate) Mutation() *ChangokushiWeaponMutation {
	return cwu.mutation
}

// ClearChangeLogs clears all "change_logs" edges to the ChangokushiWeaponChangeLog entity.
func (cwu *ChangokushiWeaponUpdate) ClearChangeLogs() *ChangokushiWeaponUpdate {
	cwu.mutation.ClearChangeLogs()
	return cwu
}

// RemoveChangeLogIDs removes the "change_logs" edge to ChangokushiWeaponChangeLog entities by IDs.
func (cwu *ChangokushiWeaponUpdate) RemoveChangeLogIDs(ids ...uint32) *ChangokushiWeaponUpdate {
	cwu.mutation.RemoveChangeLogIDs(ids...)
	return cwu
}

// RemoveChangeLogs removes "change_logs" edges to ChangokushiWeaponChangeLog entities.
func (cwu *ChangokushiWeaponUpdate) RemoveChangeLogs(c ...*ChangokushiWeaponChangeLog) *ChangokushiWeaponUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cwu.RemoveChangeLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cwu *ChangokushiWeaponUpdate) Save(ctx context.Context) (int, error) {
	if err := cwu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cwu.sqlSave, cwu.mutation, cwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cwu *ChangokushiWeaponUpdate) SaveX(ctx context.Context) int {
	affected, err := cwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cwu *ChangokushiWeaponUpdate) Exec(ctx context.Context) error {
	_, err := cwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwu *ChangokushiWeaponUpdate) ExecX(ctx context.Context) {
	if err := cwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwu *ChangokushiWeaponUpdate) defaults() error {
	if _, ok := cwu.mutation.UpdatedAt(); !ok {
		if changokushiweapon.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized changokushiweapon.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := changokushiweapon.UpdateDefaultUpdatedAt()
		cwu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cwu *ChangokushiWeaponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(changokushiweapon.Table, changokushiweapon.Columns, sqlgraph.NewFieldSpec(changokushiweapon.FieldID, field.TypeUint32))
	if ps := cwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cwu.mutation.UpdatedAt(); ok {
		_spec.SetField(changokushiweapon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cwu.mutation.DeletedAt(); ok {
		_spec.SetField(changokushiweapon.FieldDeletedAt, field.TypeTime, value)
	}
	if cwu.mutation.DeletedAtCleared() {
		_spec.ClearField(changokushiweapon.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cwu.mutation.URI(); ok {
		_spec.SetField(changokushiweapon.FieldURI, field.TypeString, value)
	}
	if value, ok := cwu.mutation.Name(); ok {
		_spec.SetField(changokushiweapon.FieldName, field.TypeString, value)
	}
	if value, ok := cwu.mutation.Rank(); ok {
		_spec.SetField(changokushiweapon.FieldRank, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.AddedRank(); ok {
		_spec.AddField(changokushiweapon.FieldRank, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.GetType(); ok {
		_spec.SetField(changokushiweapon.FieldType, field.TypeString, value)
	}
	if value, ok := cwu.mutation.Skill(); ok {
		_spec.SetField(changokushiweapon.FieldSkill, field.TypeString, value)
	}
	if value, ok := cwu.mutation.Vitality(); ok {
		_spec.SetField(changokushiweapon.FieldVitality, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.AddedVitality(); ok {
		_spec.AddField(changokushiweapon.FieldVitality, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.Strength(); ok {
		_spec.SetField(changokushiweapon.FieldStrength, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.AddedStrength(); ok {
		_spec.AddField(changokushiweapon.FieldStrength, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.PhysicalDefense(); ok {
		_spec.SetField(changokushiweapon.FieldPhysicalDefense, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.AddedPhysicalDefense(); ok {
		_spec.AddField(changokushiweapon.FieldPhysicalDefense, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.MagicalDefense(); ok {
		_spec.SetField(changokushiweapon.FieldMagicalDefense, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.AddedMagicalDefense(); ok {
		_spec.AddField(changokushiweapon.FieldMagicalDefense, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.Agility(); ok {
		_spec.SetField(changokushiweapon.FieldAgility, field.TypeInt, value)
	}
	if value, ok := cwu.mutation.AddedAgility(); ok {
		_spec.AddField(changokushiweapon.FieldAgility, field.TypeInt, value)
	}
	if cwu.mutation.ChangeLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changokushiweapon.ChangeLogsTable,
			Columns: []string{changokushiweapon.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cwu.mutation.RemovedChangeLogsIDs(); len(nodes) > 0 && !cwu.mutation.ChangeLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changokushiweapon.ChangeLogsTable,
			Columns: []string{changokushiweapon.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cwu.mutation.ChangeLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changokushiweapon.ChangeLogsTable,
			Columns: []string{changokushiweapon.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changokushiweapon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cwu.mutation.done = true
	return n, nil
}

// ChangokushiWeaponUpdateOne is the builder for updating a single ChangokushiWeapon entity.
type ChangokushiWeaponUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChangokushiWeaponMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetUpdatedAt(t time.Time) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.SetUpdatedAt(t)
	return cwuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetDeletedAt(t time.Time) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.SetDeletedAt(t)
	return cwuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableDeletedAt(t *time.Time) *ChangokushiWeaponUpdateOne {
	if t != nil {
		cwuo.SetDeletedAt(*t)
	}
	return cwuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cwuo *ChangokushiWeaponUpdateOne) ClearDeletedAt() *ChangokushiWeaponUpdateOne {
	cwuo.mutation.ClearDeletedAt()
	return cwuo
}

// SetURI sets the "uri" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetURI(s string) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.SetURI(s)
	return cwuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableURI(s *string) *ChangokushiWeaponUpdateOne {
	if s != nil {
		cwuo.SetURI(*s)
	}
	return cwuo
}

// SetName sets the "name" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetName(s string) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.SetName(s)
	return cwuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableName(s *string) *ChangokushiWeaponUpdateOne {
	if s != nil {
		cwuo.SetName(*s)
	}
	return cwuo
}

// SetRank sets the "rank" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetRank(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.ResetRank()
	cwuo.mutation.SetRank(i)
	return cwuo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableRank(i *int) *ChangokushiWeaponUpdateOne {
	if i != nil {
		cwuo.SetRank(*i)
	}
	return cwuo
}

// AddRank adds i to the "rank" field.
func (cwuo *ChangokushiWeaponUpdateOne) AddRank(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.AddRank(i)
	return cwuo
}

// SetType sets the "type" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetType(s string) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.SetType(s)
	return cwuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableType(s *string) *ChangokushiWeaponUpdateOne {
	if s != nil {
		cwuo.SetType(*s)
	}
	return cwuo
}

// SetSkill sets the "skill" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetSkill(s string) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.SetSkill(s)
	return cwuo
}

// SetNillableSkill sets the "skill" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableSkill(s *string) *ChangokushiWeaponUpdateOne {
	if s != nil {
		cwuo.SetSkill(*s)
	}
	return cwuo
}

// SetVitality sets the "vitality" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetVitality(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.ResetVitality()
	cwuo.mutation.SetVitality(i)
	return cwuo
}

// SetNillableVitality sets the "vitality" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableVitality(i *int) *ChangokushiWeaponUpdateOne {
	if i != nil {
		cwuo.SetVitality(*i)
	}
	return cwuo
}

// AddVitality adds i to the "vitality" field.
func (cwuo *ChangokushiWeaponUpdateOne) AddVitality(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.AddVitality(i)
	return cwuo
}

// SetStrength sets the "strength" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetStrength(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.ResetStrength()
	cwuo.mutation.SetStrength(i)
	return cwuo
}

// SetNillableStrength sets the "strength" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableStrength(i *int) *ChangokushiWeaponUpdateOne {
	if i != nil {
		cwuo.SetStrength(*i)
	}
	return cwuo
}

// AddStrength adds i to the "strength" field.
func (cwuo *ChangokushiWeaponUpdateOne) AddStrength(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.AddStrength(i)
	return cwuo
}

// SetPhysicalDefense sets the "physical_defense" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetPhysicalDefense(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.ResetPhysicalDefense()
	cwuo.mutation.SetPhysicalDefense(i)
	return cwuo
}

// SetNillablePhysicalDefense sets the "physical_defense" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillablePhysicalDefense(i *int) *ChangokushiWeaponUpdateOne {
	if i != nil {
		cwuo.SetPhysicalDefense(*i)
	}
	return cwuo
}

// AddPhysicalDefense adds i to the "physical_defense" field.
func (cwuo *ChangokushiWeaponUpdateOne) AddPhysicalDefense(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.AddPhysicalDefense(i)
	return cwuo
}

// SetMagicalDefense sets the "magical_defense" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetMagicalDefense(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.ResetMagicalDefense()
	cwuo.mutation.SetMagicalDefense(i)
	return cwuo
}

// SetNillableMagicalDefense sets the "magical_defense" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableMagicalDefense(i *int) *ChangokushiWeaponUpdateOne {
	if i != nil {
		cwuo.SetMagicalDefense(*i)
	}
	return cwuo
}

// AddMagicalDefense adds i to the "magical_defense" field.
func (cwuo *ChangokushiWeaponUpdateOne) AddMagicalDefense(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.AddMagicalDefense(i)
	return cwuo
}

// SetAgility sets the "agility" field.
func (cwuo *ChangokushiWeaponUpdateOne) SetAgility(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.ResetAgility()
	cwuo.mutation.SetAgility(i)
	return cwuo
}

// SetNillableAgility sets the "agility" field if the given value is not nil.
func (cwuo *ChangokushiWeaponUpdateOne) SetNillableAgility(i *int) *ChangokushiWeaponUpdateOne {
	if i != nil {
		cwuo.SetAgility(*i)
	}
	return cwuo
}

// AddAgility adds i to the "agility" field.
func (cwuo *ChangokushiWeaponUpdateOne) AddAgility(i int) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.AddAgility(i)
	return cwuo
}

// AddChangeLogIDs adds the "change_logs" edge to the ChangokushiWeaponChangeLog entity by IDs.
func (cwuo *ChangokushiWeaponUpdateOne) AddChangeLogIDs(ids ...uint32) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.AddChangeLogIDs(ids...)
	return cwuo
}

// AddChangeLogs adds the "change_logs" edges to the ChangokushiWeaponChangeLog entity.
func (cwuo *ChangokushiWeaponUpdateOne) AddChangeLogs(c ...*ChangokushiWeaponChangeLog) *ChangokushiWeaponUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cwuo.AddChangeLogIDs(ids...)
}

// Mutation returns the ChangokushiWeaponMutation object of the builder.
func (cwuo *ChangokushiWeaponUpdateOne) Mutation() *ChangokushiWeaponMutation {
	return cwuo.mutation
}

// ClearChangeLogs clears all "change_logs" edges to the ChangokushiWeaponChangeLog entity.
func (cwuo *ChangokushiWeaponUpdateOne) ClearChangeLogs() *ChangokushiWeaponUpdateOne {
	cwuo.mutation.ClearChangeLogs()
	return cwuo
}

// RemoveChangeLogIDs removes the "change_logs" edge to ChangokushiWeaponChangeLog entities by IDs.
func (cwuo *ChangokushiWeaponUpdateOne) RemoveChangeLogIDs(ids ...uint32) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.RemoveChangeLogIDs(ids...)
	return cwuo
}

// RemoveChangeLogs removes "change_logs" edges to ChangokushiWeaponChangeLog entities.
func (cwuo *ChangokushiWeaponUpdateOne) RemoveChangeLogs(c ...*ChangokushiWeaponChangeLog) *ChangokushiWeaponUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cwuo.RemoveChangeLogIDs(ids...)
}

// Where appends a list predicates to the ChangokushiWeaponUpdate builder.
func (cwuo *ChangokushiWeaponUpdateOne) Where(ps ...predicate.ChangokushiWeapon) *ChangokushiWeaponUpdateOne {
	cwuo.mutation.Where(ps...)
	return cwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cwuo *ChangokushiWeaponUpdateOne) Select(field string, fields ...string) *ChangokushiWeaponUpdateOne {
	cwuo.fields = append([]string{field}, fields...)
	return cwuo
}

// Save executes the query and returns the updated ChangokushiWeapon entity.
func (cwuo *ChangokushiWeaponUpdateOne) Save(ctx context.Context) (*ChangokushiWeapon, error) {
	if err := cwuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cwuo.sqlSave, cwuo.mutation, cwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cwuo *ChangokushiWeaponUpdateOne) SaveX(ctx context.Context) *ChangokushiWeapon {
	node, err := cwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cwuo *ChangokushiWeaponUpdateOne) Exec(ctx context.Context) error {
	_, err := cwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwuo *ChangokushiWeaponUpdateOne) ExecX(ctx context.Context) {
	if err := cwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwuo *ChangokushiWeaponUpdateOne) defaults() error {
	if _, ok := cwuo.mutation.UpdatedAt(); !ok {
		if changokushiweapon.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized changokushiweapon.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := changokushiweapon.UpdateDefaultUpdatedAt()
		cwuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cwuo *ChangokushiWeaponUpdateOne) sqlSave(ctx context.Context) (_node *ChangokushiWeapon, err error) {
	_spec := sqlgraph.NewUpdateSpec(changokushiweapon.Table, changokushiweapon.Columns, sqlgraph.NewFieldSpec(changokushiweapon.FieldID, field.TypeUint32))
	id, ok := cwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChangokushiWeapon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, changokushiweapon.FieldID)
		for _, f := range fields {
			if !changokushiweapon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != changokushiweapon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(changokushiweapon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cwuo.mutation.DeletedAt(); ok {
		_spec.SetField(changokushiweapon.FieldDeletedAt, field.TypeTime, value)
	}
	if cwuo.mutation.DeletedAtCleared() {
		_spec.ClearField(changokushiweapon.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cwuo.mutation.URI(); ok {
		_spec.SetField(changokushiweapon.FieldURI, field.TypeString, value)
	}
	if value, ok := cwuo.mutation.Name(); ok {
		_spec.SetField(changokushiweapon.FieldName, field.TypeString, value)
	}
	if value, ok := cwuo.mutation.Rank(); ok {
		_spec.SetField(changokushiweapon.FieldRank, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.AddedRank(); ok {
		_spec.AddField(changokushiweapon.FieldRank, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.GetType(); ok {
		_spec.SetField(changokushiweapon.FieldType, field.TypeString, value)
	}
	if value, ok := cwuo.mutation.Skill(); ok {
		_spec.SetField(changokushiweapon.FieldSkill, field.TypeString, value)
	}
	if value, ok := cwuo.mutation.Vitality(); ok {
		_spec.SetField(changokushiweapon.FieldVitality, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.AddedVitality(); ok {
		_spec.AddField(changokushiweapon.FieldVitality, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.Strength(); ok {
		_spec.SetField(changokushiweapon.FieldStrength, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.AddedStrength(); ok {
		_spec.AddField(changokushiweapon.FieldStrength, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.PhysicalDefense(); ok {
		_spec.SetField(changokushiweapon.FieldPhysicalDefense, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.AddedPhysicalDefense(); ok {
		_spec.AddField(changokushiweapon.FieldPhysicalDefense, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.MagicalDefense(); ok {
		_spec.SetField(changokushiweapon.FieldMagicalDefense, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.AddedMagicalDefense(); ok {
		_spec.AddField(changokushiweapon.FieldMagicalDefense, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.Agility(); ok {
		_spec.SetField(changokushiweapon.FieldAgility, field.TypeInt, value)
	}
	if value, ok := cwuo.mutation.AddedAgility(); ok {
		_spec.AddField(changokushiweapon.FieldAgility, field.TypeInt, value)
	}
	if cwuo.mutation.ChangeLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changokushiweapon.ChangeLogsTable,
			Columns: []string{changokushiweapon.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cwuo.mutation.RemovedChangeLogsIDs(); len(nodes) > 0 && !cwuo.mutation.ChangeLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changokushiweapon.ChangeLogsTable,
			Columns: []string{changokushiweapon.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cwuo.mutation.ChangeLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changokushiweapon.ChangeLogsTable,
			Columns: []string{changokushiweapon.ChangeLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changokushiweaponchangelog.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChangokushiWeapon{config: cwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changokushiweapon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cwuo.mutation.done = true
	return _node, nil
}
