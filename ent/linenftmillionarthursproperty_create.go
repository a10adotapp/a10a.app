// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/linenft"
	"github.com/a10adotapp/a10a.app/ent/linenftmillionarthursproperty"
)

// LINENFTMillionArthursPropertyCreate is the builder for creating a LINENFTMillionArthursProperty entity.
type LINENFTMillionArthursPropertyCreate struct {
	config
	mutation *LINENFTMillionArthursPropertyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetCreatedAt(t time.Time) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetCreatedAt(t)
	return lmapc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetNillableCreatedAt(t *time.Time) *LINENFTMillionArthursPropertyCreate {
	if t != nil {
		lmapc.SetCreatedAt(*t)
	}
	return lmapc
}

// SetUpdatedAt sets the "updated_at" field.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetUpdatedAt(t time.Time) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetUpdatedAt(t)
	return lmapc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetNillableUpdatedAt(t *time.Time) *LINENFTMillionArthursPropertyCreate {
	if t != nil {
		lmapc.SetUpdatedAt(*t)
	}
	return lmapc
}

// SetDeletedAt sets the "deleted_at" field.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetDeletedAt(t time.Time) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetDeletedAt(t)
	return lmapc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetNillableDeletedAt(t *time.Time) *LINENFTMillionArthursPropertyCreate {
	if t != nil {
		lmapc.SetDeletedAt(*t)
	}
	return lmapc
}

// SetSeries sets the "series" field.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetSeries(s string) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetSeries(s)
	return lmapc
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetNillableSeries(s *string) *LINENFTMillionArthursPropertyCreate {
	if s != nil {
		lmapc.SetSeries(*s)
	}
	return lmapc
}

// SetGearCategory sets the "gear_category" field.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetGearCategory(s string) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetGearCategory(s)
	return lmapc
}

// SetNillableGearCategory sets the "gear_category" field if the given value is not nil.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetNillableGearCategory(s *string) *LINENFTMillionArthursPropertyCreate {
	if s != nil {
		lmapc.SetGearCategory(*s)
	}
	return lmapc
}

// SetGearRarity sets the "gear_rarity" field.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetGearRarity(s string) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetGearRarity(s)
	return lmapc
}

// SetNillableGearRarity sets the "gear_rarity" field if the given value is not nil.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetNillableGearRarity(s *string) *LINENFTMillionArthursPropertyCreate {
	if s != nil {
		lmapc.SetGearRarity(*s)
	}
	return lmapc
}

// SetOmj sets the "omj" field.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetOmj(s string) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetOmj(s)
	return lmapc
}

// SetNillableOmj sets the "omj" field if the given value is not nil.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetNillableOmj(s *string) *LINENFTMillionArthursPropertyCreate {
	if s != nil {
		lmapc.SetOmj(*s)
	}
	return lmapc
}

// SetID sets the "id" field.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetID(u uint32) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetID(u)
	return lmapc
}

// SetLineNftID sets the "line_nft" edge to the LINENFT entity by ID.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetLineNftID(id uint32) *LINENFTMillionArthursPropertyCreate {
	lmapc.mutation.SetLineNftID(id)
	return lmapc
}

// SetLineNft sets the "line_nft" edge to the LINENFT entity.
func (lmapc *LINENFTMillionArthursPropertyCreate) SetLineNft(l *LINENFT) *LINENFTMillionArthursPropertyCreate {
	return lmapc.SetLineNftID(l.ID)
}

// Mutation returns the LINENFTMillionArthursPropertyMutation object of the builder.
func (lmapc *LINENFTMillionArthursPropertyCreate) Mutation() *LINENFTMillionArthursPropertyMutation {
	return lmapc.mutation
}

// Save creates the LINENFTMillionArthursProperty in the database.
func (lmapc *LINENFTMillionArthursPropertyCreate) Save(ctx context.Context) (*LINENFTMillionArthursProperty, error) {
	if err := lmapc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, lmapc.sqlSave, lmapc.mutation, lmapc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lmapc *LINENFTMillionArthursPropertyCreate) SaveX(ctx context.Context) *LINENFTMillionArthursProperty {
	v, err := lmapc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lmapc *LINENFTMillionArthursPropertyCreate) Exec(ctx context.Context) error {
	_, err := lmapc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lmapc *LINENFTMillionArthursPropertyCreate) ExecX(ctx context.Context) {
	if err := lmapc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lmapc *LINENFTMillionArthursPropertyCreate) defaults() error {
	if _, ok := lmapc.mutation.CreatedAt(); !ok {
		if linenftmillionarthursproperty.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized linenftmillionarthursproperty.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := linenftmillionarthursproperty.DefaultCreatedAt()
		lmapc.mutation.SetCreatedAt(v)
	}
	if _, ok := lmapc.mutation.UpdatedAt(); !ok {
		if linenftmillionarthursproperty.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized linenftmillionarthursproperty.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := linenftmillionarthursproperty.DefaultUpdatedAt()
		lmapc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lmapc *LINENFTMillionArthursPropertyCreate) check() error {
	if _, ok := lmapc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LINENFTMillionArthursProperty.created_at"`)}
	}
	if _, ok := lmapc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LINENFTMillionArthursProperty.updated_at"`)}
	}
	if _, ok := lmapc.mutation.LineNftID(); !ok {
		return &ValidationError{Name: "line_nft", err: errors.New(`ent: missing required edge "LINENFTMillionArthursProperty.line_nft"`)}
	}
	return nil
}

func (lmapc *LINENFTMillionArthursPropertyCreate) sqlSave(ctx context.Context) (*LINENFTMillionArthursProperty, error) {
	if err := lmapc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lmapc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lmapc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	lmapc.mutation.id = &_node.ID
	lmapc.mutation.done = true
	return _node, nil
}

func (lmapc *LINENFTMillionArthursPropertyCreate) createSpec() (*LINENFTMillionArthursProperty, *sqlgraph.CreateSpec) {
	var (
		_node = &LINENFTMillionArthursProperty{config: lmapc.config}
		_spec = sqlgraph.NewCreateSpec(linenftmillionarthursproperty.Table, sqlgraph.NewFieldSpec(linenftmillionarthursproperty.FieldID, field.TypeUint32))
	)
	if id, ok := lmapc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lmapc.mutation.CreatedAt(); ok {
		_spec.SetField(linenftmillionarthursproperty.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lmapc.mutation.UpdatedAt(); ok {
		_spec.SetField(linenftmillionarthursproperty.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lmapc.mutation.DeletedAt(); ok {
		_spec.SetField(linenftmillionarthursproperty.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := lmapc.mutation.Series(); ok {
		_spec.SetField(linenftmillionarthursproperty.FieldSeries, field.TypeString, value)
		_node.Series = &value
	}
	if value, ok := lmapc.mutation.GearCategory(); ok {
		_spec.SetField(linenftmillionarthursproperty.FieldGearCategory, field.TypeString, value)
		_node.GearCategory = &value
	}
	if value, ok := lmapc.mutation.GearRarity(); ok {
		_spec.SetField(linenftmillionarthursproperty.FieldGearRarity, field.TypeString, value)
		_node.GearRarity = &value
	}
	if value, ok := lmapc.mutation.Omj(); ok {
		_spec.SetField(linenftmillionarthursproperty.FieldOmj, field.TypeString, value)
		_node.Omj = &value
	}
	if nodes := lmapc.mutation.LineNftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   linenftmillionarthursproperty.LineNftTable,
			Columns: []string{linenftmillionarthursproperty.LineNftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linenft.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.linenft_million_arthurs_property = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LINENFTMillionArthursPropertyCreateBulk is the builder for creating many LINENFTMillionArthursProperty entities in bulk.
type LINENFTMillionArthursPropertyCreateBulk struct {
	config
	err      error
	builders []*LINENFTMillionArthursPropertyCreate
}

// Save creates the LINENFTMillionArthursProperty entities in the database.
func (lmapcb *LINENFTMillionArthursPropertyCreateBulk) Save(ctx context.Context) ([]*LINENFTMillionArthursProperty, error) {
	if lmapcb.err != nil {
		return nil, lmapcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lmapcb.builders))
	nodes := make([]*LINENFTMillionArthursProperty, len(lmapcb.builders))
	mutators := make([]Mutator, len(lmapcb.builders))
	for i := range lmapcb.builders {
		func(i int, root context.Context) {
			builder := lmapcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LINENFTMillionArthursPropertyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lmapcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lmapcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lmapcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lmapcb *LINENFTMillionArthursPropertyCreateBulk) SaveX(ctx context.Context) []*LINENFTMillionArthursProperty {
	v, err := lmapcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lmapcb *LINENFTMillionArthursPropertyCreateBulk) Exec(ctx context.Context) error {
	_, err := lmapcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lmapcb *LINENFTMillionArthursPropertyCreateBulk) ExecX(ctx context.Context) {
	if err := lmapcb.Exec(ctx); err != nil {
		panic(err)
	}
}
