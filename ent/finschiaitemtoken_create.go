// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtoken"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenactivity"
	"github.com/a10adotapp/a10a.app/ent/finschiaitemtokenmillionarthursproperty"
)

// FinschiaItemTokenCreate is the builder for creating a FinschiaItemToken entity.
type FinschiaItemTokenCreate struct {
	config
	mutation *FinschiaItemTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fitc *FinschiaItemTokenCreate) SetCreatedAt(t time.Time) *FinschiaItemTokenCreate {
	fitc.mutation.SetCreatedAt(t)
	return fitc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fitc *FinschiaItemTokenCreate) SetNillableCreatedAt(t *time.Time) *FinschiaItemTokenCreate {
	if t != nil {
		fitc.SetCreatedAt(*t)
	}
	return fitc
}

// SetUpdatedAt sets the "updated_at" field.
func (fitc *FinschiaItemTokenCreate) SetUpdatedAt(t time.Time) *FinschiaItemTokenCreate {
	fitc.mutation.SetUpdatedAt(t)
	return fitc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fitc *FinschiaItemTokenCreate) SetNillableUpdatedAt(t *time.Time) *FinschiaItemTokenCreate {
	if t != nil {
		fitc.SetUpdatedAt(*t)
	}
	return fitc
}

// SetDeletedAt sets the "deleted_at" field.
func (fitc *FinschiaItemTokenCreate) SetDeletedAt(t time.Time) *FinschiaItemTokenCreate {
	fitc.mutation.SetDeletedAt(t)
	return fitc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fitc *FinschiaItemTokenCreate) SetNillableDeletedAt(t *time.Time) *FinschiaItemTokenCreate {
	if t != nil {
		fitc.SetDeletedAt(*t)
	}
	return fitc
}

// SetContractID sets the "contract_id" field.
func (fitc *FinschiaItemTokenCreate) SetContractID(s string) *FinschiaItemTokenCreate {
	fitc.mutation.SetContractID(s)
	return fitc
}

// SetTokenType sets the "token_type" field.
func (fitc *FinschiaItemTokenCreate) SetTokenType(s string) *FinschiaItemTokenCreate {
	fitc.mutation.SetTokenType(s)
	return fitc
}

// SetName sets the "name" field.
func (fitc *FinschiaItemTokenCreate) SetName(s string) *FinschiaItemTokenCreate {
	fitc.mutation.SetName(s)
	return fitc
}

// SetID sets the "id" field.
func (fitc *FinschiaItemTokenCreate) SetID(u uint32) *FinschiaItemTokenCreate {
	fitc.mutation.SetID(u)
	return fitc
}

// AddActivityIDs adds the "activities" edge to the FinschiaItemTokenActivity entity by IDs.
func (fitc *FinschiaItemTokenCreate) AddActivityIDs(ids ...uint32) *FinschiaItemTokenCreate {
	fitc.mutation.AddActivityIDs(ids...)
	return fitc
}

// AddActivities adds the "activities" edges to the FinschiaItemTokenActivity entity.
func (fitc *FinschiaItemTokenCreate) AddActivities(f ...*FinschiaItemTokenActivity) *FinschiaItemTokenCreate {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fitc.AddActivityIDs(ids...)
}

// AddMillionArthursPropertyIDs adds the "million_arthurs_properties" edge to the FinschiaItemTokenMillionArthursProperty entity by IDs.
func (fitc *FinschiaItemTokenCreate) AddMillionArthursPropertyIDs(ids ...uint32) *FinschiaItemTokenCreate {
	fitc.mutation.AddMillionArthursPropertyIDs(ids...)
	return fitc
}

// AddMillionArthursProperties adds the "million_arthurs_properties" edges to the FinschiaItemTokenMillionArthursProperty entity.
func (fitc *FinschiaItemTokenCreate) AddMillionArthursProperties(f ...*FinschiaItemTokenMillionArthursProperty) *FinschiaItemTokenCreate {
	ids := make([]uint32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fitc.AddMillionArthursPropertyIDs(ids...)
}

// Mutation returns the FinschiaItemTokenMutation object of the builder.
func (fitc *FinschiaItemTokenCreate) Mutation() *FinschiaItemTokenMutation {
	return fitc.mutation
}

// Save creates the FinschiaItemToken in the database.
func (fitc *FinschiaItemTokenCreate) Save(ctx context.Context) (*FinschiaItemToken, error) {
	if err := fitc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fitc.sqlSave, fitc.mutation, fitc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fitc *FinschiaItemTokenCreate) SaveX(ctx context.Context) *FinschiaItemToken {
	v, err := fitc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fitc *FinschiaItemTokenCreate) Exec(ctx context.Context) error {
	_, err := fitc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitc *FinschiaItemTokenCreate) ExecX(ctx context.Context) {
	if err := fitc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitc *FinschiaItemTokenCreate) defaults() error {
	if _, ok := fitc.mutation.CreatedAt(); !ok {
		if finschiaitemtoken.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtoken.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtoken.DefaultCreatedAt()
		fitc.mutation.SetCreatedAt(v)
	}
	if _, ok := fitc.mutation.UpdatedAt(); !ok {
		if finschiaitemtoken.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized finschiaitemtoken.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := finschiaitemtoken.DefaultUpdatedAt()
		fitc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fitc *FinschiaItemTokenCreate) check() error {
	if _, ok := fitc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FinschiaItemToken.created_at"`)}
	}
	if _, ok := fitc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FinschiaItemToken.updated_at"`)}
	}
	if _, ok := fitc.mutation.ContractID(); !ok {
		return &ValidationError{Name: "contract_id", err: errors.New(`ent: missing required field "FinschiaItemToken.contract_id"`)}
	}
	if _, ok := fitc.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "FinschiaItemToken.token_type"`)}
	}
	if _, ok := fitc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FinschiaItemToken.name"`)}
	}
	return nil
}

func (fitc *FinschiaItemTokenCreate) sqlSave(ctx context.Context) (*FinschiaItemToken, error) {
	if err := fitc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fitc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fitc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	fitc.mutation.id = &_node.ID
	fitc.mutation.done = true
	return _node, nil
}

func (fitc *FinschiaItemTokenCreate) createSpec() (*FinschiaItemToken, *sqlgraph.CreateSpec) {
	var (
		_node = &FinschiaItemToken{config: fitc.config}
		_spec = sqlgraph.NewCreateSpec(finschiaitemtoken.Table, sqlgraph.NewFieldSpec(finschiaitemtoken.FieldID, field.TypeUint32))
	)
	if id, ok := fitc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fitc.mutation.CreatedAt(); ok {
		_spec.SetField(finschiaitemtoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fitc.mutation.UpdatedAt(); ok {
		_spec.SetField(finschiaitemtoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fitc.mutation.DeletedAt(); ok {
		_spec.SetField(finschiaitemtoken.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := fitc.mutation.ContractID(); ok {
		_spec.SetField(finschiaitemtoken.FieldContractID, field.TypeString, value)
		_node.ContractID = value
	}
	if value, ok := fitc.mutation.TokenType(); ok {
		_spec.SetField(finschiaitemtoken.FieldTokenType, field.TypeString, value)
		_node.TokenType = value
	}
	if value, ok := fitc.mutation.Name(); ok {
		_spec.SetField(finschiaitemtoken.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := fitc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.ActivitiesTable,
			Columns: []string{finschiaitemtoken.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenactivity.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fitc.mutation.MillionArthursPropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finschiaitemtoken.MillionArthursPropertiesTable,
			Columns: []string{finschiaitemtoken.MillionArthursPropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(finschiaitemtokenmillionarthursproperty.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FinschiaItemTokenCreateBulk is the builder for creating many FinschiaItemToken entities in bulk.
type FinschiaItemTokenCreateBulk struct {
	config
	err      error
	builders []*FinschiaItemTokenCreate
}

// Save creates the FinschiaItemToken entities in the database.
func (fitcb *FinschiaItemTokenCreateBulk) Save(ctx context.Context) ([]*FinschiaItemToken, error) {
	if fitcb.err != nil {
		return nil, fitcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fitcb.builders))
	nodes := make([]*FinschiaItemToken, len(fitcb.builders))
	mutators := make([]Mutator, len(fitcb.builders))
	for i := range fitcb.builders {
		func(i int, root context.Context) {
			builder := fitcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FinschiaItemTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fitcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fitcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fitcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fitcb *FinschiaItemTokenCreateBulk) SaveX(ctx context.Context) []*FinschiaItemToken {
	v, err := fitcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fitcb *FinschiaItemTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := fitcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitcb *FinschiaItemTokenCreateBulk) ExecX(ctx context.Context) {
	if err := fitcb.Exec(ctx); err != nil {
		panic(err)
	}
}
