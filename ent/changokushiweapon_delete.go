// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/a10adotapp/a10a.app/ent/changokushiweapon"
	"github.com/a10adotapp/a10a.app/ent/predicate"
)

// ChangokushiWeaponDelete is the builder for deleting a ChangokushiWeapon entity.
type ChangokushiWeaponDelete struct {
	config
	hooks    []Hook
	mutation *ChangokushiWeaponMutation
}

// Where appends a list predicates to the ChangokushiWeaponDelete builder.
func (cwd *ChangokushiWeaponDelete) Where(ps ...predicate.ChangokushiWeapon) *ChangokushiWeaponDelete {
	cwd.mutation.Where(ps...)
	return cwd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cwd *ChangokushiWeaponDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cwd.sqlExec, cwd.mutation, cwd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cwd *ChangokushiWeaponDelete) ExecX(ctx context.Context) int {
	n, err := cwd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cwd *ChangokushiWeaponDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(changokushiweapon.Table, sqlgraph.NewFieldSpec(changokushiweapon.FieldID, field.TypeUint32))
	if ps := cwd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cwd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cwd.mutation.done = true
	return affected, err
}

// ChangokushiWeaponDeleteOne is the builder for deleting a single ChangokushiWeapon entity.
type ChangokushiWeaponDeleteOne struct {
	cwd *ChangokushiWeaponDelete
}

// Where appends a list predicates to the ChangokushiWeaponDelete builder.
func (cwdo *ChangokushiWeaponDeleteOne) Where(ps ...predicate.ChangokushiWeapon) *ChangokushiWeaponDeleteOne {
	cwdo.cwd.mutation.Where(ps...)
	return cwdo
}

// Exec executes the deletion query.
func (cwdo *ChangokushiWeaponDeleteOne) Exec(ctx context.Context) error {
	n, err := cwdo.cwd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{changokushiweapon.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cwdo *ChangokushiWeaponDeleteOne) ExecX(ctx context.Context) {
	if err := cwdo.Exec(ctx); err != nil {
		panic(err)
	}
}
